
oledControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08005278  08005278  00006278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae8  08005ae8  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005ae8  08005ae8  00007064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005ae8  08005ae8  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae8  08005ae8  00006ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005aec  08005aec  00006aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005af0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  20000064  08005b54  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08005b54  000074c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c876  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f75  00000000  00000000  00013902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00015878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000807  00000000  00000000  000162d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001249f  00000000  00000000  00016adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef86  00000000  00000000  00028f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006b77e  00000000  00000000  00037f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3682  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f8  00000000  00000000  000a36c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000a60c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005260 	.word	0x08005260

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	08005260 	.word	0x08005260

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_ddiv>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46de      	mov	lr, fp
 800040c:	4645      	mov	r5, r8
 800040e:	4657      	mov	r7, sl
 8000410:	464e      	mov	r6, r9
 8000412:	b5e0      	push	{r5, r6, r7, lr}
 8000414:	b087      	sub	sp, #28
 8000416:	9200      	str	r2, [sp, #0]
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	030b      	lsls	r3, r1, #12
 800041c:	0b1b      	lsrs	r3, r3, #12
 800041e:	469b      	mov	fp, r3
 8000420:	0fca      	lsrs	r2, r1, #31
 8000422:	004b      	lsls	r3, r1, #1
 8000424:	0004      	movs	r4, r0
 8000426:	4680      	mov	r8, r0
 8000428:	0d5b      	lsrs	r3, r3, #21
 800042a:	9202      	str	r2, [sp, #8]
 800042c:	d100      	bne.n	8000430 <__aeabi_ddiv+0x28>
 800042e:	e098      	b.n	8000562 <__aeabi_ddiv+0x15a>
 8000430:	4a7c      	ldr	r2, [pc, #496]	@ (8000624 <__aeabi_ddiv+0x21c>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d037      	beq.n	80004a6 <__aeabi_ddiv+0x9e>
 8000436:	4659      	mov	r1, fp
 8000438:	0f42      	lsrs	r2, r0, #29
 800043a:	00c9      	lsls	r1, r1, #3
 800043c:	430a      	orrs	r2, r1
 800043e:	2180      	movs	r1, #128	@ 0x80
 8000440:	0409      	lsls	r1, r1, #16
 8000442:	4311      	orrs	r1, r2
 8000444:	00c2      	lsls	r2, r0, #3
 8000446:	4690      	mov	r8, r2
 8000448:	4a77      	ldr	r2, [pc, #476]	@ (8000628 <__aeabi_ddiv+0x220>)
 800044a:	4689      	mov	r9, r1
 800044c:	4692      	mov	sl, r2
 800044e:	449a      	add	sl, r3
 8000450:	2300      	movs	r3, #0
 8000452:	2400      	movs	r4, #0
 8000454:	9303      	str	r3, [sp, #12]
 8000456:	9e00      	ldr	r6, [sp, #0]
 8000458:	9f01      	ldr	r7, [sp, #4]
 800045a:	033b      	lsls	r3, r7, #12
 800045c:	0b1b      	lsrs	r3, r3, #12
 800045e:	469b      	mov	fp, r3
 8000460:	007b      	lsls	r3, r7, #1
 8000462:	0030      	movs	r0, r6
 8000464:	0d5b      	lsrs	r3, r3, #21
 8000466:	0ffd      	lsrs	r5, r7, #31
 8000468:	2b00      	cmp	r3, #0
 800046a:	d059      	beq.n	8000520 <__aeabi_ddiv+0x118>
 800046c:	4a6d      	ldr	r2, [pc, #436]	@ (8000624 <__aeabi_ddiv+0x21c>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d048      	beq.n	8000504 <__aeabi_ddiv+0xfc>
 8000472:	4659      	mov	r1, fp
 8000474:	0f72      	lsrs	r2, r6, #29
 8000476:	00c9      	lsls	r1, r1, #3
 8000478:	430a      	orrs	r2, r1
 800047a:	2180      	movs	r1, #128	@ 0x80
 800047c:	0409      	lsls	r1, r1, #16
 800047e:	4311      	orrs	r1, r2
 8000480:	468b      	mov	fp, r1
 8000482:	4969      	ldr	r1, [pc, #420]	@ (8000628 <__aeabi_ddiv+0x220>)
 8000484:	00f2      	lsls	r2, r6, #3
 8000486:	468c      	mov	ip, r1
 8000488:	4651      	mov	r1, sl
 800048a:	4463      	add	r3, ip
 800048c:	1acb      	subs	r3, r1, r3
 800048e:	469a      	mov	sl, r3
 8000490:	2100      	movs	r1, #0
 8000492:	9e02      	ldr	r6, [sp, #8]
 8000494:	406e      	eors	r6, r5
 8000496:	b2f6      	uxtb	r6, r6
 8000498:	2c0f      	cmp	r4, #15
 800049a:	d900      	bls.n	800049e <__aeabi_ddiv+0x96>
 800049c:	e0ce      	b.n	800063c <__aeabi_ddiv+0x234>
 800049e:	4b63      	ldr	r3, [pc, #396]	@ (800062c <__aeabi_ddiv+0x224>)
 80004a0:	00a4      	lsls	r4, r4, #2
 80004a2:	591b      	ldr	r3, [r3, r4]
 80004a4:	469f      	mov	pc, r3
 80004a6:	465a      	mov	r2, fp
 80004a8:	4302      	orrs	r2, r0
 80004aa:	4691      	mov	r9, r2
 80004ac:	d000      	beq.n	80004b0 <__aeabi_ddiv+0xa8>
 80004ae:	e090      	b.n	80005d2 <__aeabi_ddiv+0x1ca>
 80004b0:	469a      	mov	sl, r3
 80004b2:	2302      	movs	r3, #2
 80004b4:	4690      	mov	r8, r2
 80004b6:	2408      	movs	r4, #8
 80004b8:	9303      	str	r3, [sp, #12]
 80004ba:	e7cc      	b.n	8000456 <__aeabi_ddiv+0x4e>
 80004bc:	46cb      	mov	fp, r9
 80004be:	4642      	mov	r2, r8
 80004c0:	9d02      	ldr	r5, [sp, #8]
 80004c2:	9903      	ldr	r1, [sp, #12]
 80004c4:	2902      	cmp	r1, #2
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0xc2>
 80004c8:	e1de      	b.n	8000888 <__aeabi_ddiv+0x480>
 80004ca:	2903      	cmp	r1, #3
 80004cc:	d100      	bne.n	80004d0 <__aeabi_ddiv+0xc8>
 80004ce:	e08d      	b.n	80005ec <__aeabi_ddiv+0x1e4>
 80004d0:	2901      	cmp	r1, #1
 80004d2:	d000      	beq.n	80004d6 <__aeabi_ddiv+0xce>
 80004d4:	e179      	b.n	80007ca <__aeabi_ddiv+0x3c2>
 80004d6:	002e      	movs	r6, r5
 80004d8:	2200      	movs	r2, #0
 80004da:	2300      	movs	r3, #0
 80004dc:	2400      	movs	r4, #0
 80004de:	4690      	mov	r8, r2
 80004e0:	051b      	lsls	r3, r3, #20
 80004e2:	4323      	orrs	r3, r4
 80004e4:	07f6      	lsls	r6, r6, #31
 80004e6:	4333      	orrs	r3, r6
 80004e8:	4640      	mov	r0, r8
 80004ea:	0019      	movs	r1, r3
 80004ec:	b007      	add	sp, #28
 80004ee:	bcf0      	pop	{r4, r5, r6, r7}
 80004f0:	46bb      	mov	fp, r7
 80004f2:	46b2      	mov	sl, r6
 80004f4:	46a9      	mov	r9, r5
 80004f6:	46a0      	mov	r8, r4
 80004f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004fa:	2200      	movs	r2, #0
 80004fc:	2400      	movs	r4, #0
 80004fe:	4690      	mov	r8, r2
 8000500:	4b48      	ldr	r3, [pc, #288]	@ (8000624 <__aeabi_ddiv+0x21c>)
 8000502:	e7ed      	b.n	80004e0 <__aeabi_ddiv+0xd8>
 8000504:	465a      	mov	r2, fp
 8000506:	9b00      	ldr	r3, [sp, #0]
 8000508:	431a      	orrs	r2, r3
 800050a:	4b49      	ldr	r3, [pc, #292]	@ (8000630 <__aeabi_ddiv+0x228>)
 800050c:	469c      	mov	ip, r3
 800050e:	44e2      	add	sl, ip
 8000510:	2a00      	cmp	r2, #0
 8000512:	d159      	bne.n	80005c8 <__aeabi_ddiv+0x1c0>
 8000514:	2302      	movs	r3, #2
 8000516:	431c      	orrs	r4, r3
 8000518:	2300      	movs	r3, #0
 800051a:	2102      	movs	r1, #2
 800051c:	469b      	mov	fp, r3
 800051e:	e7b8      	b.n	8000492 <__aeabi_ddiv+0x8a>
 8000520:	465a      	mov	r2, fp
 8000522:	9b00      	ldr	r3, [sp, #0]
 8000524:	431a      	orrs	r2, r3
 8000526:	d049      	beq.n	80005bc <__aeabi_ddiv+0x1b4>
 8000528:	465b      	mov	r3, fp
 800052a:	2b00      	cmp	r3, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_ddiv+0x128>
 800052e:	e19c      	b.n	800086a <__aeabi_ddiv+0x462>
 8000530:	4658      	mov	r0, fp
 8000532:	f000 fdd1 	bl	80010d8 <__clzsi2>
 8000536:	0002      	movs	r2, r0
 8000538:	0003      	movs	r3, r0
 800053a:	3a0b      	subs	r2, #11
 800053c:	271d      	movs	r7, #29
 800053e:	9e00      	ldr	r6, [sp, #0]
 8000540:	1aba      	subs	r2, r7, r2
 8000542:	0019      	movs	r1, r3
 8000544:	4658      	mov	r0, fp
 8000546:	40d6      	lsrs	r6, r2
 8000548:	3908      	subs	r1, #8
 800054a:	4088      	lsls	r0, r1
 800054c:	0032      	movs	r2, r6
 800054e:	4302      	orrs	r2, r0
 8000550:	4693      	mov	fp, r2
 8000552:	9a00      	ldr	r2, [sp, #0]
 8000554:	408a      	lsls	r2, r1
 8000556:	4937      	ldr	r1, [pc, #220]	@ (8000634 <__aeabi_ddiv+0x22c>)
 8000558:	4453      	add	r3, sl
 800055a:	468a      	mov	sl, r1
 800055c:	2100      	movs	r1, #0
 800055e:	449a      	add	sl, r3
 8000560:	e797      	b.n	8000492 <__aeabi_ddiv+0x8a>
 8000562:	465b      	mov	r3, fp
 8000564:	4303      	orrs	r3, r0
 8000566:	4699      	mov	r9, r3
 8000568:	d021      	beq.n	80005ae <__aeabi_ddiv+0x1a6>
 800056a:	465b      	mov	r3, fp
 800056c:	2b00      	cmp	r3, #0
 800056e:	d100      	bne.n	8000572 <__aeabi_ddiv+0x16a>
 8000570:	e169      	b.n	8000846 <__aeabi_ddiv+0x43e>
 8000572:	4658      	mov	r0, fp
 8000574:	f000 fdb0 	bl	80010d8 <__clzsi2>
 8000578:	230b      	movs	r3, #11
 800057a:	425b      	negs	r3, r3
 800057c:	469c      	mov	ip, r3
 800057e:	0002      	movs	r2, r0
 8000580:	4484      	add	ip, r0
 8000582:	4666      	mov	r6, ip
 8000584:	231d      	movs	r3, #29
 8000586:	1b9b      	subs	r3, r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	0011      	movs	r1, r2
 800058c:	4658      	mov	r0, fp
 800058e:	40de      	lsrs	r6, r3
 8000590:	3908      	subs	r1, #8
 8000592:	4088      	lsls	r0, r1
 8000594:	0033      	movs	r3, r6
 8000596:	4303      	orrs	r3, r0
 8000598:	4699      	mov	r9, r3
 800059a:	0023      	movs	r3, r4
 800059c:	408b      	lsls	r3, r1
 800059e:	4698      	mov	r8, r3
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <__aeabi_ddiv+0x230>)
 80005a2:	2400      	movs	r4, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	469a      	mov	sl, r3
 80005a8:	2300      	movs	r3, #0
 80005aa:	9303      	str	r3, [sp, #12]
 80005ac:	e753      	b.n	8000456 <__aeabi_ddiv+0x4e>
 80005ae:	2300      	movs	r3, #0
 80005b0:	4698      	mov	r8, r3
 80005b2:	469a      	mov	sl, r3
 80005b4:	3301      	adds	r3, #1
 80005b6:	2404      	movs	r4, #4
 80005b8:	9303      	str	r3, [sp, #12]
 80005ba:	e74c      	b.n	8000456 <__aeabi_ddiv+0x4e>
 80005bc:	2301      	movs	r3, #1
 80005be:	431c      	orrs	r4, r3
 80005c0:	2300      	movs	r3, #0
 80005c2:	2101      	movs	r1, #1
 80005c4:	469b      	mov	fp, r3
 80005c6:	e764      	b.n	8000492 <__aeabi_ddiv+0x8a>
 80005c8:	2303      	movs	r3, #3
 80005ca:	0032      	movs	r2, r6
 80005cc:	2103      	movs	r1, #3
 80005ce:	431c      	orrs	r4, r3
 80005d0:	e75f      	b.n	8000492 <__aeabi_ddiv+0x8a>
 80005d2:	469a      	mov	sl, r3
 80005d4:	2303      	movs	r3, #3
 80005d6:	46d9      	mov	r9, fp
 80005d8:	240c      	movs	r4, #12
 80005da:	9303      	str	r3, [sp, #12]
 80005dc:	e73b      	b.n	8000456 <__aeabi_ddiv+0x4e>
 80005de:	2300      	movs	r3, #0
 80005e0:	2480      	movs	r4, #128	@ 0x80
 80005e2:	4698      	mov	r8, r3
 80005e4:	2600      	movs	r6, #0
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <__aeabi_ddiv+0x21c>)
 80005e8:	0324      	lsls	r4, r4, #12
 80005ea:	e779      	b.n	80004e0 <__aeabi_ddiv+0xd8>
 80005ec:	2480      	movs	r4, #128	@ 0x80
 80005ee:	465b      	mov	r3, fp
 80005f0:	0324      	lsls	r4, r4, #12
 80005f2:	431c      	orrs	r4, r3
 80005f4:	0324      	lsls	r4, r4, #12
 80005f6:	002e      	movs	r6, r5
 80005f8:	4690      	mov	r8, r2
 80005fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <__aeabi_ddiv+0x21c>)
 80005fc:	0b24      	lsrs	r4, r4, #12
 80005fe:	e76f      	b.n	80004e0 <__aeabi_ddiv+0xd8>
 8000600:	2480      	movs	r4, #128	@ 0x80
 8000602:	464b      	mov	r3, r9
 8000604:	0324      	lsls	r4, r4, #12
 8000606:	4223      	tst	r3, r4
 8000608:	d002      	beq.n	8000610 <__aeabi_ddiv+0x208>
 800060a:	465b      	mov	r3, fp
 800060c:	4223      	tst	r3, r4
 800060e:	d0f0      	beq.n	80005f2 <__aeabi_ddiv+0x1ea>
 8000610:	2480      	movs	r4, #128	@ 0x80
 8000612:	464b      	mov	r3, r9
 8000614:	0324      	lsls	r4, r4, #12
 8000616:	431c      	orrs	r4, r3
 8000618:	0324      	lsls	r4, r4, #12
 800061a:	9e02      	ldr	r6, [sp, #8]
 800061c:	4b01      	ldr	r3, [pc, #4]	@ (8000624 <__aeabi_ddiv+0x21c>)
 800061e:	0b24      	lsrs	r4, r4, #12
 8000620:	e75e      	b.n	80004e0 <__aeabi_ddiv+0xd8>
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	000007ff 	.word	0x000007ff
 8000628:	fffffc01 	.word	0xfffffc01
 800062c:	080052c4 	.word	0x080052c4
 8000630:	fffff801 	.word	0xfffff801
 8000634:	000003f3 	.word	0x000003f3
 8000638:	fffffc0d 	.word	0xfffffc0d
 800063c:	45cb      	cmp	fp, r9
 800063e:	d200      	bcs.n	8000642 <__aeabi_ddiv+0x23a>
 8000640:	e0f8      	b.n	8000834 <__aeabi_ddiv+0x42c>
 8000642:	d100      	bne.n	8000646 <__aeabi_ddiv+0x23e>
 8000644:	e0f3      	b.n	800082e <__aeabi_ddiv+0x426>
 8000646:	2301      	movs	r3, #1
 8000648:	425b      	negs	r3, r3
 800064a:	469c      	mov	ip, r3
 800064c:	4644      	mov	r4, r8
 800064e:	4648      	mov	r0, r9
 8000650:	2500      	movs	r5, #0
 8000652:	44e2      	add	sl, ip
 8000654:	465b      	mov	r3, fp
 8000656:	0e17      	lsrs	r7, r2, #24
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	431f      	orrs	r7, r3
 800065c:	0c19      	lsrs	r1, r3, #16
 800065e:	043b      	lsls	r3, r7, #16
 8000660:	0212      	lsls	r2, r2, #8
 8000662:	9700      	str	r7, [sp, #0]
 8000664:	0c1f      	lsrs	r7, r3, #16
 8000666:	4691      	mov	r9, r2
 8000668:	9102      	str	r1, [sp, #8]
 800066a:	9703      	str	r7, [sp, #12]
 800066c:	f7ff fddc 	bl	8000228 <__aeabi_uidivmod>
 8000670:	0002      	movs	r2, r0
 8000672:	437a      	muls	r2, r7
 8000674:	040b      	lsls	r3, r1, #16
 8000676:	0c21      	lsrs	r1, r4, #16
 8000678:	4680      	mov	r8, r0
 800067a:	4319      	orrs	r1, r3
 800067c:	428a      	cmp	r2, r1
 800067e:	d909      	bls.n	8000694 <__aeabi_ddiv+0x28c>
 8000680:	9f00      	ldr	r7, [sp, #0]
 8000682:	2301      	movs	r3, #1
 8000684:	46bc      	mov	ip, r7
 8000686:	425b      	negs	r3, r3
 8000688:	4461      	add	r1, ip
 800068a:	469c      	mov	ip, r3
 800068c:	44e0      	add	r8, ip
 800068e:	428f      	cmp	r7, r1
 8000690:	d800      	bhi.n	8000694 <__aeabi_ddiv+0x28c>
 8000692:	e15c      	b.n	800094e <__aeabi_ddiv+0x546>
 8000694:	1a88      	subs	r0, r1, r2
 8000696:	9902      	ldr	r1, [sp, #8]
 8000698:	f7ff fdc6 	bl	8000228 <__aeabi_uidivmod>
 800069c:	9a03      	ldr	r2, [sp, #12]
 800069e:	0424      	lsls	r4, r4, #16
 80006a0:	4342      	muls	r2, r0
 80006a2:	0409      	lsls	r1, r1, #16
 80006a4:	0c24      	lsrs	r4, r4, #16
 80006a6:	0003      	movs	r3, r0
 80006a8:	430c      	orrs	r4, r1
 80006aa:	42a2      	cmp	r2, r4
 80006ac:	d906      	bls.n	80006bc <__aeabi_ddiv+0x2b4>
 80006ae:	9900      	ldr	r1, [sp, #0]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	468c      	mov	ip, r1
 80006b4:	4464      	add	r4, ip
 80006b6:	42a1      	cmp	r1, r4
 80006b8:	d800      	bhi.n	80006bc <__aeabi_ddiv+0x2b4>
 80006ba:	e142      	b.n	8000942 <__aeabi_ddiv+0x53a>
 80006bc:	1aa0      	subs	r0, r4, r2
 80006be:	4642      	mov	r2, r8
 80006c0:	0412      	lsls	r2, r2, #16
 80006c2:	431a      	orrs	r2, r3
 80006c4:	4693      	mov	fp, r2
 80006c6:	464b      	mov	r3, r9
 80006c8:	4659      	mov	r1, fp
 80006ca:	0c1b      	lsrs	r3, r3, #16
 80006cc:	001f      	movs	r7, r3
 80006ce:	9304      	str	r3, [sp, #16]
 80006d0:	040b      	lsls	r3, r1, #16
 80006d2:	4649      	mov	r1, r9
 80006d4:	0409      	lsls	r1, r1, #16
 80006d6:	0c09      	lsrs	r1, r1, #16
 80006d8:	000c      	movs	r4, r1
 80006da:	0c1b      	lsrs	r3, r3, #16
 80006dc:	435c      	muls	r4, r3
 80006de:	0c12      	lsrs	r2, r2, #16
 80006e0:	437b      	muls	r3, r7
 80006e2:	4688      	mov	r8, r1
 80006e4:	4351      	muls	r1, r2
 80006e6:	437a      	muls	r2, r7
 80006e8:	0c27      	lsrs	r7, r4, #16
 80006ea:	46bc      	mov	ip, r7
 80006ec:	185b      	adds	r3, r3, r1
 80006ee:	4463      	add	r3, ip
 80006f0:	4299      	cmp	r1, r3
 80006f2:	d903      	bls.n	80006fc <__aeabi_ddiv+0x2f4>
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	0249      	lsls	r1, r1, #9
 80006f8:	468c      	mov	ip, r1
 80006fa:	4462      	add	r2, ip
 80006fc:	0c19      	lsrs	r1, r3, #16
 80006fe:	0424      	lsls	r4, r4, #16
 8000700:	041b      	lsls	r3, r3, #16
 8000702:	0c24      	lsrs	r4, r4, #16
 8000704:	188a      	adds	r2, r1, r2
 8000706:	191c      	adds	r4, r3, r4
 8000708:	4290      	cmp	r0, r2
 800070a:	d302      	bcc.n	8000712 <__aeabi_ddiv+0x30a>
 800070c:	d116      	bne.n	800073c <__aeabi_ddiv+0x334>
 800070e:	42a5      	cmp	r5, r4
 8000710:	d214      	bcs.n	800073c <__aeabi_ddiv+0x334>
 8000712:	465b      	mov	r3, fp
 8000714:	9f00      	ldr	r7, [sp, #0]
 8000716:	3b01      	subs	r3, #1
 8000718:	444d      	add	r5, r9
 800071a:	9305      	str	r3, [sp, #20]
 800071c:	454d      	cmp	r5, r9
 800071e:	419b      	sbcs	r3, r3
 8000720:	46bc      	mov	ip, r7
 8000722:	425b      	negs	r3, r3
 8000724:	4463      	add	r3, ip
 8000726:	18c0      	adds	r0, r0, r3
 8000728:	4287      	cmp	r7, r0
 800072a:	d300      	bcc.n	800072e <__aeabi_ddiv+0x326>
 800072c:	e102      	b.n	8000934 <__aeabi_ddiv+0x52c>
 800072e:	4282      	cmp	r2, r0
 8000730:	d900      	bls.n	8000734 <__aeabi_ddiv+0x32c>
 8000732:	e129      	b.n	8000988 <__aeabi_ddiv+0x580>
 8000734:	d100      	bne.n	8000738 <__aeabi_ddiv+0x330>
 8000736:	e124      	b.n	8000982 <__aeabi_ddiv+0x57a>
 8000738:	9b05      	ldr	r3, [sp, #20]
 800073a:	469b      	mov	fp, r3
 800073c:	1b2c      	subs	r4, r5, r4
 800073e:	42a5      	cmp	r5, r4
 8000740:	41ad      	sbcs	r5, r5
 8000742:	9b00      	ldr	r3, [sp, #0]
 8000744:	1a80      	subs	r0, r0, r2
 8000746:	426d      	negs	r5, r5
 8000748:	1b40      	subs	r0, r0, r5
 800074a:	4283      	cmp	r3, r0
 800074c:	d100      	bne.n	8000750 <__aeabi_ddiv+0x348>
 800074e:	e10f      	b.n	8000970 <__aeabi_ddiv+0x568>
 8000750:	9902      	ldr	r1, [sp, #8]
 8000752:	f7ff fd69 	bl	8000228 <__aeabi_uidivmod>
 8000756:	9a03      	ldr	r2, [sp, #12]
 8000758:	040b      	lsls	r3, r1, #16
 800075a:	4342      	muls	r2, r0
 800075c:	0c21      	lsrs	r1, r4, #16
 800075e:	0005      	movs	r5, r0
 8000760:	4319      	orrs	r1, r3
 8000762:	428a      	cmp	r2, r1
 8000764:	d900      	bls.n	8000768 <__aeabi_ddiv+0x360>
 8000766:	e0cb      	b.n	8000900 <__aeabi_ddiv+0x4f8>
 8000768:	1a88      	subs	r0, r1, r2
 800076a:	9902      	ldr	r1, [sp, #8]
 800076c:	f7ff fd5c 	bl	8000228 <__aeabi_uidivmod>
 8000770:	9a03      	ldr	r2, [sp, #12]
 8000772:	0424      	lsls	r4, r4, #16
 8000774:	4342      	muls	r2, r0
 8000776:	0409      	lsls	r1, r1, #16
 8000778:	0c24      	lsrs	r4, r4, #16
 800077a:	0003      	movs	r3, r0
 800077c:	430c      	orrs	r4, r1
 800077e:	42a2      	cmp	r2, r4
 8000780:	d900      	bls.n	8000784 <__aeabi_ddiv+0x37c>
 8000782:	e0ca      	b.n	800091a <__aeabi_ddiv+0x512>
 8000784:	4641      	mov	r1, r8
 8000786:	1aa4      	subs	r4, r4, r2
 8000788:	042a      	lsls	r2, r5, #16
 800078a:	431a      	orrs	r2, r3
 800078c:	9f04      	ldr	r7, [sp, #16]
 800078e:	0413      	lsls	r3, r2, #16
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	4359      	muls	r1, r3
 8000794:	4640      	mov	r0, r8
 8000796:	437b      	muls	r3, r7
 8000798:	469c      	mov	ip, r3
 800079a:	0c15      	lsrs	r5, r2, #16
 800079c:	4368      	muls	r0, r5
 800079e:	0c0b      	lsrs	r3, r1, #16
 80007a0:	4484      	add	ip, r0
 80007a2:	4463      	add	r3, ip
 80007a4:	437d      	muls	r5, r7
 80007a6:	4298      	cmp	r0, r3
 80007a8:	d903      	bls.n	80007b2 <__aeabi_ddiv+0x3aa>
 80007aa:	2080      	movs	r0, #128	@ 0x80
 80007ac:	0240      	lsls	r0, r0, #9
 80007ae:	4684      	mov	ip, r0
 80007b0:	4465      	add	r5, ip
 80007b2:	0c18      	lsrs	r0, r3, #16
 80007b4:	0409      	lsls	r1, r1, #16
 80007b6:	041b      	lsls	r3, r3, #16
 80007b8:	0c09      	lsrs	r1, r1, #16
 80007ba:	1940      	adds	r0, r0, r5
 80007bc:	185b      	adds	r3, r3, r1
 80007be:	4284      	cmp	r4, r0
 80007c0:	d327      	bcc.n	8000812 <__aeabi_ddiv+0x40a>
 80007c2:	d023      	beq.n	800080c <__aeabi_ddiv+0x404>
 80007c4:	2301      	movs	r3, #1
 80007c6:	0035      	movs	r5, r6
 80007c8:	431a      	orrs	r2, r3
 80007ca:	4b94      	ldr	r3, [pc, #592]	@ (8000a1c <__aeabi_ddiv+0x614>)
 80007cc:	4453      	add	r3, sl
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dd60      	ble.n	8000894 <__aeabi_ddiv+0x48c>
 80007d2:	0751      	lsls	r1, r2, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_ddiv+0x3d0>
 80007d6:	e086      	b.n	80008e6 <__aeabi_ddiv+0x4de>
 80007d8:	002e      	movs	r6, r5
 80007da:	08d1      	lsrs	r1, r2, #3
 80007dc:	465a      	mov	r2, fp
 80007de:	01d2      	lsls	r2, r2, #7
 80007e0:	d506      	bpl.n	80007f0 <__aeabi_ddiv+0x3e8>
 80007e2:	465a      	mov	r2, fp
 80007e4:	4b8e      	ldr	r3, [pc, #568]	@ (8000a20 <__aeabi_ddiv+0x618>)
 80007e6:	401a      	ands	r2, r3
 80007e8:	2380      	movs	r3, #128	@ 0x80
 80007ea:	4693      	mov	fp, r2
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	4453      	add	r3, sl
 80007f0:	4a8c      	ldr	r2, [pc, #560]	@ (8000a24 <__aeabi_ddiv+0x61c>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	dd00      	ble.n	80007f8 <__aeabi_ddiv+0x3f0>
 80007f6:	e680      	b.n	80004fa <__aeabi_ddiv+0xf2>
 80007f8:	465a      	mov	r2, fp
 80007fa:	0752      	lsls	r2, r2, #29
 80007fc:	430a      	orrs	r2, r1
 80007fe:	4690      	mov	r8, r2
 8000800:	465a      	mov	r2, fp
 8000802:	055b      	lsls	r3, r3, #21
 8000804:	0254      	lsls	r4, r2, #9
 8000806:	0b24      	lsrs	r4, r4, #12
 8000808:	0d5b      	lsrs	r3, r3, #21
 800080a:	e669      	b.n	80004e0 <__aeabi_ddiv+0xd8>
 800080c:	0035      	movs	r5, r6
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0db      	beq.n	80007ca <__aeabi_ddiv+0x3c2>
 8000812:	9d00      	ldr	r5, [sp, #0]
 8000814:	1e51      	subs	r1, r2, #1
 8000816:	46ac      	mov	ip, r5
 8000818:	4464      	add	r4, ip
 800081a:	42ac      	cmp	r4, r5
 800081c:	d200      	bcs.n	8000820 <__aeabi_ddiv+0x418>
 800081e:	e09e      	b.n	800095e <__aeabi_ddiv+0x556>
 8000820:	4284      	cmp	r4, r0
 8000822:	d200      	bcs.n	8000826 <__aeabi_ddiv+0x41e>
 8000824:	e0e1      	b.n	80009ea <__aeabi_ddiv+0x5e2>
 8000826:	d100      	bne.n	800082a <__aeabi_ddiv+0x422>
 8000828:	e0ee      	b.n	8000a08 <__aeabi_ddiv+0x600>
 800082a:	000a      	movs	r2, r1
 800082c:	e7ca      	b.n	80007c4 <__aeabi_ddiv+0x3bc>
 800082e:	4542      	cmp	r2, r8
 8000830:	d900      	bls.n	8000834 <__aeabi_ddiv+0x42c>
 8000832:	e708      	b.n	8000646 <__aeabi_ddiv+0x23e>
 8000834:	464b      	mov	r3, r9
 8000836:	07dc      	lsls	r4, r3, #31
 8000838:	0858      	lsrs	r0, r3, #1
 800083a:	4643      	mov	r3, r8
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	431c      	orrs	r4, r3
 8000840:	4643      	mov	r3, r8
 8000842:	07dd      	lsls	r5, r3, #31
 8000844:	e706      	b.n	8000654 <__aeabi_ddiv+0x24c>
 8000846:	f000 fc47 	bl	80010d8 <__clzsi2>
 800084a:	2315      	movs	r3, #21
 800084c:	469c      	mov	ip, r3
 800084e:	4484      	add	ip, r0
 8000850:	0002      	movs	r2, r0
 8000852:	4663      	mov	r3, ip
 8000854:	3220      	adds	r2, #32
 8000856:	2b1c      	cmp	r3, #28
 8000858:	dc00      	bgt.n	800085c <__aeabi_ddiv+0x454>
 800085a:	e692      	b.n	8000582 <__aeabi_ddiv+0x17a>
 800085c:	0023      	movs	r3, r4
 800085e:	3808      	subs	r0, #8
 8000860:	4083      	lsls	r3, r0
 8000862:	4699      	mov	r9, r3
 8000864:	2300      	movs	r3, #0
 8000866:	4698      	mov	r8, r3
 8000868:	e69a      	b.n	80005a0 <__aeabi_ddiv+0x198>
 800086a:	f000 fc35 	bl	80010d8 <__clzsi2>
 800086e:	0002      	movs	r2, r0
 8000870:	0003      	movs	r3, r0
 8000872:	3215      	adds	r2, #21
 8000874:	3320      	adds	r3, #32
 8000876:	2a1c      	cmp	r2, #28
 8000878:	dc00      	bgt.n	800087c <__aeabi_ddiv+0x474>
 800087a:	e65f      	b.n	800053c <__aeabi_ddiv+0x134>
 800087c:	9900      	ldr	r1, [sp, #0]
 800087e:	3808      	subs	r0, #8
 8000880:	4081      	lsls	r1, r0
 8000882:	2200      	movs	r2, #0
 8000884:	468b      	mov	fp, r1
 8000886:	e666      	b.n	8000556 <__aeabi_ddiv+0x14e>
 8000888:	2200      	movs	r2, #0
 800088a:	002e      	movs	r6, r5
 800088c:	2400      	movs	r4, #0
 800088e:	4690      	mov	r8, r2
 8000890:	4b65      	ldr	r3, [pc, #404]	@ (8000a28 <__aeabi_ddiv+0x620>)
 8000892:	e625      	b.n	80004e0 <__aeabi_ddiv+0xd8>
 8000894:	002e      	movs	r6, r5
 8000896:	2101      	movs	r1, #1
 8000898:	1ac9      	subs	r1, r1, r3
 800089a:	2938      	cmp	r1, #56	@ 0x38
 800089c:	dd00      	ble.n	80008a0 <__aeabi_ddiv+0x498>
 800089e:	e61b      	b.n	80004d8 <__aeabi_ddiv+0xd0>
 80008a0:	291f      	cmp	r1, #31
 80008a2:	dc7e      	bgt.n	80009a2 <__aeabi_ddiv+0x59a>
 80008a4:	4861      	ldr	r0, [pc, #388]	@ (8000a2c <__aeabi_ddiv+0x624>)
 80008a6:	0014      	movs	r4, r2
 80008a8:	4450      	add	r0, sl
 80008aa:	465b      	mov	r3, fp
 80008ac:	4082      	lsls	r2, r0
 80008ae:	4083      	lsls	r3, r0
 80008b0:	40cc      	lsrs	r4, r1
 80008b2:	1e50      	subs	r0, r2, #1
 80008b4:	4182      	sbcs	r2, r0
 80008b6:	4323      	orrs	r3, r4
 80008b8:	431a      	orrs	r2, r3
 80008ba:	465b      	mov	r3, fp
 80008bc:	40cb      	lsrs	r3, r1
 80008be:	0751      	lsls	r1, r2, #29
 80008c0:	d009      	beq.n	80008d6 <__aeabi_ddiv+0x4ce>
 80008c2:	210f      	movs	r1, #15
 80008c4:	4011      	ands	r1, r2
 80008c6:	2904      	cmp	r1, #4
 80008c8:	d005      	beq.n	80008d6 <__aeabi_ddiv+0x4ce>
 80008ca:	1d11      	adds	r1, r2, #4
 80008cc:	4291      	cmp	r1, r2
 80008ce:	4192      	sbcs	r2, r2
 80008d0:	4252      	negs	r2, r2
 80008d2:	189b      	adds	r3, r3, r2
 80008d4:	000a      	movs	r2, r1
 80008d6:	0219      	lsls	r1, r3, #8
 80008d8:	d400      	bmi.n	80008dc <__aeabi_ddiv+0x4d4>
 80008da:	e09b      	b.n	8000a14 <__aeabi_ddiv+0x60c>
 80008dc:	2200      	movs	r2, #0
 80008de:	2301      	movs	r3, #1
 80008e0:	2400      	movs	r4, #0
 80008e2:	4690      	mov	r8, r2
 80008e4:	e5fc      	b.n	80004e0 <__aeabi_ddiv+0xd8>
 80008e6:	210f      	movs	r1, #15
 80008e8:	4011      	ands	r1, r2
 80008ea:	2904      	cmp	r1, #4
 80008ec:	d100      	bne.n	80008f0 <__aeabi_ddiv+0x4e8>
 80008ee:	e773      	b.n	80007d8 <__aeabi_ddiv+0x3d0>
 80008f0:	1d11      	adds	r1, r2, #4
 80008f2:	4291      	cmp	r1, r2
 80008f4:	4192      	sbcs	r2, r2
 80008f6:	4252      	negs	r2, r2
 80008f8:	002e      	movs	r6, r5
 80008fa:	08c9      	lsrs	r1, r1, #3
 80008fc:	4493      	add	fp, r2
 80008fe:	e76d      	b.n	80007dc <__aeabi_ddiv+0x3d4>
 8000900:	9b00      	ldr	r3, [sp, #0]
 8000902:	3d01      	subs	r5, #1
 8000904:	469c      	mov	ip, r3
 8000906:	4461      	add	r1, ip
 8000908:	428b      	cmp	r3, r1
 800090a:	d900      	bls.n	800090e <__aeabi_ddiv+0x506>
 800090c:	e72c      	b.n	8000768 <__aeabi_ddiv+0x360>
 800090e:	428a      	cmp	r2, r1
 8000910:	d800      	bhi.n	8000914 <__aeabi_ddiv+0x50c>
 8000912:	e729      	b.n	8000768 <__aeabi_ddiv+0x360>
 8000914:	1e85      	subs	r5, r0, #2
 8000916:	4461      	add	r1, ip
 8000918:	e726      	b.n	8000768 <__aeabi_ddiv+0x360>
 800091a:	9900      	ldr	r1, [sp, #0]
 800091c:	3b01      	subs	r3, #1
 800091e:	468c      	mov	ip, r1
 8000920:	4464      	add	r4, ip
 8000922:	42a1      	cmp	r1, r4
 8000924:	d900      	bls.n	8000928 <__aeabi_ddiv+0x520>
 8000926:	e72d      	b.n	8000784 <__aeabi_ddiv+0x37c>
 8000928:	42a2      	cmp	r2, r4
 800092a:	d800      	bhi.n	800092e <__aeabi_ddiv+0x526>
 800092c:	e72a      	b.n	8000784 <__aeabi_ddiv+0x37c>
 800092e:	1e83      	subs	r3, r0, #2
 8000930:	4464      	add	r4, ip
 8000932:	e727      	b.n	8000784 <__aeabi_ddiv+0x37c>
 8000934:	4287      	cmp	r7, r0
 8000936:	d000      	beq.n	800093a <__aeabi_ddiv+0x532>
 8000938:	e6fe      	b.n	8000738 <__aeabi_ddiv+0x330>
 800093a:	45a9      	cmp	r9, r5
 800093c:	d900      	bls.n	8000940 <__aeabi_ddiv+0x538>
 800093e:	e6fb      	b.n	8000738 <__aeabi_ddiv+0x330>
 8000940:	e6f5      	b.n	800072e <__aeabi_ddiv+0x326>
 8000942:	42a2      	cmp	r2, r4
 8000944:	d800      	bhi.n	8000948 <__aeabi_ddiv+0x540>
 8000946:	e6b9      	b.n	80006bc <__aeabi_ddiv+0x2b4>
 8000948:	1e83      	subs	r3, r0, #2
 800094a:	4464      	add	r4, ip
 800094c:	e6b6      	b.n	80006bc <__aeabi_ddiv+0x2b4>
 800094e:	428a      	cmp	r2, r1
 8000950:	d800      	bhi.n	8000954 <__aeabi_ddiv+0x54c>
 8000952:	e69f      	b.n	8000694 <__aeabi_ddiv+0x28c>
 8000954:	46bc      	mov	ip, r7
 8000956:	1e83      	subs	r3, r0, #2
 8000958:	4698      	mov	r8, r3
 800095a:	4461      	add	r1, ip
 800095c:	e69a      	b.n	8000694 <__aeabi_ddiv+0x28c>
 800095e:	000a      	movs	r2, r1
 8000960:	4284      	cmp	r4, r0
 8000962:	d000      	beq.n	8000966 <__aeabi_ddiv+0x55e>
 8000964:	e72e      	b.n	80007c4 <__aeabi_ddiv+0x3bc>
 8000966:	454b      	cmp	r3, r9
 8000968:	d000      	beq.n	800096c <__aeabi_ddiv+0x564>
 800096a:	e72b      	b.n	80007c4 <__aeabi_ddiv+0x3bc>
 800096c:	0035      	movs	r5, r6
 800096e:	e72c      	b.n	80007ca <__aeabi_ddiv+0x3c2>
 8000970:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <__aeabi_ddiv+0x614>)
 8000972:	4a2f      	ldr	r2, [pc, #188]	@ (8000a30 <__aeabi_ddiv+0x628>)
 8000974:	4453      	add	r3, sl
 8000976:	4592      	cmp	sl, r2
 8000978:	db43      	blt.n	8000a02 <__aeabi_ddiv+0x5fa>
 800097a:	2201      	movs	r2, #1
 800097c:	2100      	movs	r1, #0
 800097e:	4493      	add	fp, r2
 8000980:	e72c      	b.n	80007dc <__aeabi_ddiv+0x3d4>
 8000982:	42ac      	cmp	r4, r5
 8000984:	d800      	bhi.n	8000988 <__aeabi_ddiv+0x580>
 8000986:	e6d7      	b.n	8000738 <__aeabi_ddiv+0x330>
 8000988:	2302      	movs	r3, #2
 800098a:	425b      	negs	r3, r3
 800098c:	469c      	mov	ip, r3
 800098e:	9900      	ldr	r1, [sp, #0]
 8000990:	444d      	add	r5, r9
 8000992:	454d      	cmp	r5, r9
 8000994:	419b      	sbcs	r3, r3
 8000996:	44e3      	add	fp, ip
 8000998:	468c      	mov	ip, r1
 800099a:	425b      	negs	r3, r3
 800099c:	4463      	add	r3, ip
 800099e:	18c0      	adds	r0, r0, r3
 80009a0:	e6cc      	b.n	800073c <__aeabi_ddiv+0x334>
 80009a2:	201f      	movs	r0, #31
 80009a4:	4240      	negs	r0, r0
 80009a6:	1ac3      	subs	r3, r0, r3
 80009a8:	4658      	mov	r0, fp
 80009aa:	40d8      	lsrs	r0, r3
 80009ac:	2920      	cmp	r1, #32
 80009ae:	d004      	beq.n	80009ba <__aeabi_ddiv+0x5b2>
 80009b0:	4659      	mov	r1, fp
 80009b2:	4b20      	ldr	r3, [pc, #128]	@ (8000a34 <__aeabi_ddiv+0x62c>)
 80009b4:	4453      	add	r3, sl
 80009b6:	4099      	lsls	r1, r3
 80009b8:	430a      	orrs	r2, r1
 80009ba:	1e53      	subs	r3, r2, #1
 80009bc:	419a      	sbcs	r2, r3
 80009be:	2307      	movs	r3, #7
 80009c0:	0019      	movs	r1, r3
 80009c2:	4302      	orrs	r2, r0
 80009c4:	2400      	movs	r4, #0
 80009c6:	4011      	ands	r1, r2
 80009c8:	4213      	tst	r3, r2
 80009ca:	d009      	beq.n	80009e0 <__aeabi_ddiv+0x5d8>
 80009cc:	3308      	adds	r3, #8
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d01d      	beq.n	8000a10 <__aeabi_ddiv+0x608>
 80009d4:	1d13      	adds	r3, r2, #4
 80009d6:	4293      	cmp	r3, r2
 80009d8:	4189      	sbcs	r1, r1
 80009da:	001a      	movs	r2, r3
 80009dc:	4249      	negs	r1, r1
 80009de:	0749      	lsls	r1, r1, #29
 80009e0:	08d2      	lsrs	r2, r2, #3
 80009e2:	430a      	orrs	r2, r1
 80009e4:	4690      	mov	r8, r2
 80009e6:	2300      	movs	r3, #0
 80009e8:	e57a      	b.n	80004e0 <__aeabi_ddiv+0xd8>
 80009ea:	4649      	mov	r1, r9
 80009ec:	9f00      	ldr	r7, [sp, #0]
 80009ee:	004d      	lsls	r5, r1, #1
 80009f0:	454d      	cmp	r5, r9
 80009f2:	4189      	sbcs	r1, r1
 80009f4:	46bc      	mov	ip, r7
 80009f6:	4249      	negs	r1, r1
 80009f8:	4461      	add	r1, ip
 80009fa:	46a9      	mov	r9, r5
 80009fc:	3a02      	subs	r2, #2
 80009fe:	1864      	adds	r4, r4, r1
 8000a00:	e7ae      	b.n	8000960 <__aeabi_ddiv+0x558>
 8000a02:	2201      	movs	r2, #1
 8000a04:	4252      	negs	r2, r2
 8000a06:	e746      	b.n	8000896 <__aeabi_ddiv+0x48e>
 8000a08:	4599      	cmp	r9, r3
 8000a0a:	d3ee      	bcc.n	80009ea <__aeabi_ddiv+0x5e2>
 8000a0c:	000a      	movs	r2, r1
 8000a0e:	e7aa      	b.n	8000966 <__aeabi_ddiv+0x55e>
 8000a10:	2100      	movs	r1, #0
 8000a12:	e7e5      	b.n	80009e0 <__aeabi_ddiv+0x5d8>
 8000a14:	0759      	lsls	r1, r3, #29
 8000a16:	025b      	lsls	r3, r3, #9
 8000a18:	0b1c      	lsrs	r4, r3, #12
 8000a1a:	e7e1      	b.n	80009e0 <__aeabi_ddiv+0x5d8>
 8000a1c:	000003ff 	.word	0x000003ff
 8000a20:	feffffff 	.word	0xfeffffff
 8000a24:	000007fe 	.word	0x000007fe
 8000a28:	000007ff 	.word	0x000007ff
 8000a2c:	0000041e 	.word	0x0000041e
 8000a30:	fffffc02 	.word	0xfffffc02
 8000a34:	0000043e 	.word	0x0000043e

08000a38 <__aeabi_dmul>:
 8000a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3a:	4657      	mov	r7, sl
 8000a3c:	464e      	mov	r6, r9
 8000a3e:	46de      	mov	lr, fp
 8000a40:	4645      	mov	r5, r8
 8000a42:	b5e0      	push	{r5, r6, r7, lr}
 8000a44:	001f      	movs	r7, r3
 8000a46:	030b      	lsls	r3, r1, #12
 8000a48:	0b1b      	lsrs	r3, r3, #12
 8000a4a:	0016      	movs	r6, r2
 8000a4c:	469a      	mov	sl, r3
 8000a4e:	0fca      	lsrs	r2, r1, #31
 8000a50:	004b      	lsls	r3, r1, #1
 8000a52:	0004      	movs	r4, r0
 8000a54:	4691      	mov	r9, r2
 8000a56:	b085      	sub	sp, #20
 8000a58:	0d5b      	lsrs	r3, r3, #21
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_dmul+0x26>
 8000a5c:	e1cf      	b.n	8000dfe <__aeabi_dmul+0x3c6>
 8000a5e:	4acd      	ldr	r2, [pc, #820]	@ (8000d94 <__aeabi_dmul+0x35c>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d055      	beq.n	8000b10 <__aeabi_dmul+0xd8>
 8000a64:	4651      	mov	r1, sl
 8000a66:	0f42      	lsrs	r2, r0, #29
 8000a68:	00c9      	lsls	r1, r1, #3
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	2180      	movs	r1, #128	@ 0x80
 8000a6e:	0409      	lsls	r1, r1, #16
 8000a70:	4311      	orrs	r1, r2
 8000a72:	00c2      	lsls	r2, r0, #3
 8000a74:	4690      	mov	r8, r2
 8000a76:	4ac8      	ldr	r2, [pc, #800]	@ (8000d98 <__aeabi_dmul+0x360>)
 8000a78:	468a      	mov	sl, r1
 8000a7a:	4693      	mov	fp, r2
 8000a7c:	449b      	add	fp, r3
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2500      	movs	r5, #0
 8000a82:	9302      	str	r3, [sp, #8]
 8000a84:	033c      	lsls	r4, r7, #12
 8000a86:	007b      	lsls	r3, r7, #1
 8000a88:	0ffa      	lsrs	r2, r7, #31
 8000a8a:	9601      	str	r6, [sp, #4]
 8000a8c:	0b24      	lsrs	r4, r4, #12
 8000a8e:	0d5b      	lsrs	r3, r3, #21
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dmul+0x5e>
 8000a94:	e188      	b.n	8000da8 <__aeabi_dmul+0x370>
 8000a96:	4abf      	ldr	r2, [pc, #764]	@ (8000d94 <__aeabi_dmul+0x35c>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dmul+0x66>
 8000a9c:	e092      	b.n	8000bc4 <__aeabi_dmul+0x18c>
 8000a9e:	4abe      	ldr	r2, [pc, #760]	@ (8000d98 <__aeabi_dmul+0x360>)
 8000aa0:	4694      	mov	ip, r2
 8000aa2:	4463      	add	r3, ip
 8000aa4:	449b      	add	fp, r3
 8000aa6:	2d0a      	cmp	r5, #10
 8000aa8:	dc42      	bgt.n	8000b30 <__aeabi_dmul+0xf8>
 8000aaa:	00e4      	lsls	r4, r4, #3
 8000aac:	0f73      	lsrs	r3, r6, #29
 8000aae:	4323      	orrs	r3, r4
 8000ab0:	2480      	movs	r4, #128	@ 0x80
 8000ab2:	4649      	mov	r1, r9
 8000ab4:	0424      	lsls	r4, r4, #16
 8000ab6:	431c      	orrs	r4, r3
 8000ab8:	00f3      	lsls	r3, r6, #3
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	9b00      	ldr	r3, [sp, #0]
 8000abe:	2000      	movs	r0, #0
 8000ac0:	4059      	eors	r1, r3
 8000ac2:	b2cb      	uxtb	r3, r1
 8000ac4:	9303      	str	r3, [sp, #12]
 8000ac6:	2d02      	cmp	r5, #2
 8000ac8:	dc00      	bgt.n	8000acc <__aeabi_dmul+0x94>
 8000aca:	e094      	b.n	8000bf6 <__aeabi_dmul+0x1be>
 8000acc:	2301      	movs	r3, #1
 8000ace:	40ab      	lsls	r3, r5
 8000ad0:	001d      	movs	r5, r3
 8000ad2:	23a6      	movs	r3, #166	@ 0xa6
 8000ad4:	002a      	movs	r2, r5
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	401a      	ands	r2, r3
 8000ada:	421d      	tst	r5, r3
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_dmul+0xa8>
 8000ade:	e229      	b.n	8000f34 <__aeabi_dmul+0x4fc>
 8000ae0:	2390      	movs	r3, #144	@ 0x90
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	421d      	tst	r5, r3
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dmul+0xb2>
 8000ae8:	e24d      	b.n	8000f86 <__aeabi_dmul+0x54e>
 8000aea:	2300      	movs	r3, #0
 8000aec:	2480      	movs	r4, #128	@ 0x80
 8000aee:	4699      	mov	r9, r3
 8000af0:	0324      	lsls	r4, r4, #12
 8000af2:	4ba8      	ldr	r3, [pc, #672]	@ (8000d94 <__aeabi_dmul+0x35c>)
 8000af4:	0010      	movs	r0, r2
 8000af6:	464a      	mov	r2, r9
 8000af8:	051b      	lsls	r3, r3, #20
 8000afa:	4323      	orrs	r3, r4
 8000afc:	07d2      	lsls	r2, r2, #31
 8000afe:	4313      	orrs	r3, r2
 8000b00:	0019      	movs	r1, r3
 8000b02:	b005      	add	sp, #20
 8000b04:	bcf0      	pop	{r4, r5, r6, r7}
 8000b06:	46bb      	mov	fp, r7
 8000b08:	46b2      	mov	sl, r6
 8000b0a:	46a9      	mov	r9, r5
 8000b0c:	46a0      	mov	r8, r4
 8000b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b10:	4652      	mov	r2, sl
 8000b12:	4302      	orrs	r2, r0
 8000b14:	4690      	mov	r8, r2
 8000b16:	d000      	beq.n	8000b1a <__aeabi_dmul+0xe2>
 8000b18:	e1ac      	b.n	8000e74 <__aeabi_dmul+0x43c>
 8000b1a:	469b      	mov	fp, r3
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	4692      	mov	sl, r2
 8000b20:	2508      	movs	r5, #8
 8000b22:	9302      	str	r3, [sp, #8]
 8000b24:	e7ae      	b.n	8000a84 <__aeabi_dmul+0x4c>
 8000b26:	9b00      	ldr	r3, [sp, #0]
 8000b28:	46a2      	mov	sl, r4
 8000b2a:	4699      	mov	r9, r3
 8000b2c:	9b01      	ldr	r3, [sp, #4]
 8000b2e:	4698      	mov	r8, r3
 8000b30:	9b02      	ldr	r3, [sp, #8]
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dmul+0x100>
 8000b36:	e1ca      	b.n	8000ece <__aeabi_dmul+0x496>
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dmul+0x106>
 8000b3c:	e192      	b.n	8000e64 <__aeabi_dmul+0x42c>
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d110      	bne.n	8000b64 <__aeabi_dmul+0x12c>
 8000b42:	2300      	movs	r3, #0
 8000b44:	2400      	movs	r4, #0
 8000b46:	2200      	movs	r2, #0
 8000b48:	e7d4      	b.n	8000af4 <__aeabi_dmul+0xbc>
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	087b      	lsrs	r3, r7, #1
 8000b4e:	403a      	ands	r2, r7
 8000b50:	4313      	orrs	r3, r2
 8000b52:	4652      	mov	r2, sl
 8000b54:	07d2      	lsls	r2, r2, #31
 8000b56:	4313      	orrs	r3, r2
 8000b58:	4698      	mov	r8, r3
 8000b5a:	4653      	mov	r3, sl
 8000b5c:	085b      	lsrs	r3, r3, #1
 8000b5e:	469a      	mov	sl, r3
 8000b60:	9b03      	ldr	r3, [sp, #12]
 8000b62:	4699      	mov	r9, r3
 8000b64:	465b      	mov	r3, fp
 8000b66:	1c58      	adds	r0, r3, #1
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	445b      	add	r3, fp
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	dc00      	bgt.n	8000b74 <__aeabi_dmul+0x13c>
 8000b72:	e1b1      	b.n	8000ed8 <__aeabi_dmul+0x4a0>
 8000b74:	4642      	mov	r2, r8
 8000b76:	0752      	lsls	r2, r2, #29
 8000b78:	d00b      	beq.n	8000b92 <__aeabi_dmul+0x15a>
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	4641      	mov	r1, r8
 8000b7e:	400a      	ands	r2, r1
 8000b80:	2a04      	cmp	r2, #4
 8000b82:	d006      	beq.n	8000b92 <__aeabi_dmul+0x15a>
 8000b84:	4642      	mov	r2, r8
 8000b86:	1d11      	adds	r1, r2, #4
 8000b88:	4541      	cmp	r1, r8
 8000b8a:	4192      	sbcs	r2, r2
 8000b8c:	4688      	mov	r8, r1
 8000b8e:	4252      	negs	r2, r2
 8000b90:	4492      	add	sl, r2
 8000b92:	4652      	mov	r2, sl
 8000b94:	01d2      	lsls	r2, r2, #7
 8000b96:	d506      	bpl.n	8000ba6 <__aeabi_dmul+0x16e>
 8000b98:	4652      	mov	r2, sl
 8000b9a:	4b80      	ldr	r3, [pc, #512]	@ (8000d9c <__aeabi_dmul+0x364>)
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	2380      	movs	r3, #128	@ 0x80
 8000ba0:	4692      	mov	sl, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	18c3      	adds	r3, r0, r3
 8000ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8000da0 <__aeabi_dmul+0x368>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	dd00      	ble.n	8000bae <__aeabi_dmul+0x176>
 8000bac:	e18f      	b.n	8000ece <__aeabi_dmul+0x496>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	08d1      	lsrs	r1, r2, #3
 8000bb2:	4652      	mov	r2, sl
 8000bb4:	0752      	lsls	r2, r2, #29
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	4651      	mov	r1, sl
 8000bba:	055b      	lsls	r3, r3, #21
 8000bbc:	024c      	lsls	r4, r1, #9
 8000bbe:	0b24      	lsrs	r4, r4, #12
 8000bc0:	0d5b      	lsrs	r3, r3, #21
 8000bc2:	e797      	b.n	8000af4 <__aeabi_dmul+0xbc>
 8000bc4:	4b73      	ldr	r3, [pc, #460]	@ (8000d94 <__aeabi_dmul+0x35c>)
 8000bc6:	4326      	orrs	r6, r4
 8000bc8:	469c      	mov	ip, r3
 8000bca:	44e3      	add	fp, ip
 8000bcc:	2e00      	cmp	r6, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dmul+0x19a>
 8000bd0:	e16f      	b.n	8000eb2 <__aeabi_dmul+0x47a>
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	4649      	mov	r1, r9
 8000bd6:	431d      	orrs	r5, r3
 8000bd8:	9b00      	ldr	r3, [sp, #0]
 8000bda:	4059      	eors	r1, r3
 8000bdc:	b2cb      	uxtb	r3, r1
 8000bde:	9303      	str	r3, [sp, #12]
 8000be0:	2d0a      	cmp	r5, #10
 8000be2:	dd00      	ble.n	8000be6 <__aeabi_dmul+0x1ae>
 8000be4:	e133      	b.n	8000e4e <__aeabi_dmul+0x416>
 8000be6:	2301      	movs	r3, #1
 8000be8:	40ab      	lsls	r3, r5
 8000bea:	001d      	movs	r5, r3
 8000bec:	2303      	movs	r3, #3
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	2288      	movs	r2, #136	@ 0x88
 8000bf2:	422a      	tst	r2, r5
 8000bf4:	d197      	bne.n	8000b26 <__aeabi_dmul+0xee>
 8000bf6:	4642      	mov	r2, r8
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	0412      	lsls	r2, r2, #16
 8000bfc:	0c12      	lsrs	r2, r2, #16
 8000bfe:	0016      	movs	r6, r2
 8000c00:	9801      	ldr	r0, [sp, #4]
 8000c02:	0c1d      	lsrs	r5, r3, #16
 8000c04:	0c03      	lsrs	r3, r0, #16
 8000c06:	0400      	lsls	r0, r0, #16
 8000c08:	0c00      	lsrs	r0, r0, #16
 8000c0a:	4346      	muls	r6, r0
 8000c0c:	46b4      	mov	ip, r6
 8000c0e:	001e      	movs	r6, r3
 8000c10:	436e      	muls	r6, r5
 8000c12:	9600      	str	r6, [sp, #0]
 8000c14:	0016      	movs	r6, r2
 8000c16:	0007      	movs	r7, r0
 8000c18:	435e      	muls	r6, r3
 8000c1a:	4661      	mov	r1, ip
 8000c1c:	46b0      	mov	r8, r6
 8000c1e:	436f      	muls	r7, r5
 8000c20:	0c0e      	lsrs	r6, r1, #16
 8000c22:	44b8      	add	r8, r7
 8000c24:	4446      	add	r6, r8
 8000c26:	42b7      	cmp	r7, r6
 8000c28:	d905      	bls.n	8000c36 <__aeabi_dmul+0x1fe>
 8000c2a:	2180      	movs	r1, #128	@ 0x80
 8000c2c:	0249      	lsls	r1, r1, #9
 8000c2e:	4688      	mov	r8, r1
 8000c30:	9f00      	ldr	r7, [sp, #0]
 8000c32:	4447      	add	r7, r8
 8000c34:	9700      	str	r7, [sp, #0]
 8000c36:	4661      	mov	r1, ip
 8000c38:	0409      	lsls	r1, r1, #16
 8000c3a:	0c09      	lsrs	r1, r1, #16
 8000c3c:	0c37      	lsrs	r7, r6, #16
 8000c3e:	0436      	lsls	r6, r6, #16
 8000c40:	468c      	mov	ip, r1
 8000c42:	0031      	movs	r1, r6
 8000c44:	4461      	add	r1, ip
 8000c46:	9101      	str	r1, [sp, #4]
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0c26      	lsrs	r6, r4, #16
 8000c4c:	0424      	lsls	r4, r4, #16
 8000c4e:	0c24      	lsrs	r4, r4, #16
 8000c50:	4361      	muls	r1, r4
 8000c52:	468c      	mov	ip, r1
 8000c54:	0021      	movs	r1, r4
 8000c56:	4369      	muls	r1, r5
 8000c58:	4689      	mov	r9, r1
 8000c5a:	4661      	mov	r1, ip
 8000c5c:	0c09      	lsrs	r1, r1, #16
 8000c5e:	4688      	mov	r8, r1
 8000c60:	4372      	muls	r2, r6
 8000c62:	444a      	add	r2, r9
 8000c64:	4442      	add	r2, r8
 8000c66:	4375      	muls	r5, r6
 8000c68:	4591      	cmp	r9, r2
 8000c6a:	d903      	bls.n	8000c74 <__aeabi_dmul+0x23c>
 8000c6c:	2180      	movs	r1, #128	@ 0x80
 8000c6e:	0249      	lsls	r1, r1, #9
 8000c70:	4688      	mov	r8, r1
 8000c72:	4445      	add	r5, r8
 8000c74:	0c11      	lsrs	r1, r2, #16
 8000c76:	4688      	mov	r8, r1
 8000c78:	4661      	mov	r1, ip
 8000c7a:	0409      	lsls	r1, r1, #16
 8000c7c:	0c09      	lsrs	r1, r1, #16
 8000c7e:	468c      	mov	ip, r1
 8000c80:	0412      	lsls	r2, r2, #16
 8000c82:	4462      	add	r2, ip
 8000c84:	18b9      	adds	r1, r7, r2
 8000c86:	9102      	str	r1, [sp, #8]
 8000c88:	4651      	mov	r1, sl
 8000c8a:	0c09      	lsrs	r1, r1, #16
 8000c8c:	468c      	mov	ip, r1
 8000c8e:	4651      	mov	r1, sl
 8000c90:	040f      	lsls	r7, r1, #16
 8000c92:	0c3f      	lsrs	r7, r7, #16
 8000c94:	0039      	movs	r1, r7
 8000c96:	4341      	muls	r1, r0
 8000c98:	4445      	add	r5, r8
 8000c9a:	4688      	mov	r8, r1
 8000c9c:	4661      	mov	r1, ip
 8000c9e:	4341      	muls	r1, r0
 8000ca0:	468a      	mov	sl, r1
 8000ca2:	4641      	mov	r1, r8
 8000ca4:	4660      	mov	r0, ip
 8000ca6:	0c09      	lsrs	r1, r1, #16
 8000ca8:	4689      	mov	r9, r1
 8000caa:	4358      	muls	r0, r3
 8000cac:	437b      	muls	r3, r7
 8000cae:	4453      	add	r3, sl
 8000cb0:	444b      	add	r3, r9
 8000cb2:	459a      	cmp	sl, r3
 8000cb4:	d903      	bls.n	8000cbe <__aeabi_dmul+0x286>
 8000cb6:	2180      	movs	r1, #128	@ 0x80
 8000cb8:	0249      	lsls	r1, r1, #9
 8000cba:	4689      	mov	r9, r1
 8000cbc:	4448      	add	r0, r9
 8000cbe:	0c19      	lsrs	r1, r3, #16
 8000cc0:	4689      	mov	r9, r1
 8000cc2:	4641      	mov	r1, r8
 8000cc4:	0409      	lsls	r1, r1, #16
 8000cc6:	0c09      	lsrs	r1, r1, #16
 8000cc8:	4688      	mov	r8, r1
 8000cca:	0039      	movs	r1, r7
 8000ccc:	4361      	muls	r1, r4
 8000cce:	041b      	lsls	r3, r3, #16
 8000cd0:	4443      	add	r3, r8
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	4661      	mov	r1, ip
 8000cd6:	434c      	muls	r4, r1
 8000cd8:	4371      	muls	r1, r6
 8000cda:	468c      	mov	ip, r1
 8000cdc:	4641      	mov	r1, r8
 8000cde:	4377      	muls	r7, r6
 8000ce0:	0c0e      	lsrs	r6, r1, #16
 8000ce2:	193f      	adds	r7, r7, r4
 8000ce4:	19f6      	adds	r6, r6, r7
 8000ce6:	4448      	add	r0, r9
 8000ce8:	42b4      	cmp	r4, r6
 8000cea:	d903      	bls.n	8000cf4 <__aeabi_dmul+0x2bc>
 8000cec:	2180      	movs	r1, #128	@ 0x80
 8000cee:	0249      	lsls	r1, r1, #9
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	44cc      	add	ip, r9
 8000cf4:	9902      	ldr	r1, [sp, #8]
 8000cf6:	9f00      	ldr	r7, [sp, #0]
 8000cf8:	4689      	mov	r9, r1
 8000cfa:	0431      	lsls	r1, r6, #16
 8000cfc:	444f      	add	r7, r9
 8000cfe:	4689      	mov	r9, r1
 8000d00:	4641      	mov	r1, r8
 8000d02:	4297      	cmp	r7, r2
 8000d04:	4192      	sbcs	r2, r2
 8000d06:	040c      	lsls	r4, r1, #16
 8000d08:	0c24      	lsrs	r4, r4, #16
 8000d0a:	444c      	add	r4, r9
 8000d0c:	18ff      	adds	r7, r7, r3
 8000d0e:	4252      	negs	r2, r2
 8000d10:	1964      	adds	r4, r4, r5
 8000d12:	18a1      	adds	r1, r4, r2
 8000d14:	429f      	cmp	r7, r3
 8000d16:	419b      	sbcs	r3, r3
 8000d18:	4688      	mov	r8, r1
 8000d1a:	4682      	mov	sl, r0
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	4699      	mov	r9, r3
 8000d20:	4590      	cmp	r8, r2
 8000d22:	4192      	sbcs	r2, r2
 8000d24:	42ac      	cmp	r4, r5
 8000d26:	41a4      	sbcs	r4, r4
 8000d28:	44c2      	add	sl, r8
 8000d2a:	44d1      	add	r9, sl
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	4264      	negs	r4, r4
 8000d30:	4314      	orrs	r4, r2
 8000d32:	4599      	cmp	r9, r3
 8000d34:	419b      	sbcs	r3, r3
 8000d36:	4582      	cmp	sl, r0
 8000d38:	4192      	sbcs	r2, r2
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	464a      	mov	r2, r9
 8000d42:	0c36      	lsrs	r6, r6, #16
 8000d44:	19a4      	adds	r4, r4, r6
 8000d46:	18e3      	adds	r3, r4, r3
 8000d48:	4463      	add	r3, ip
 8000d4a:	025b      	lsls	r3, r3, #9
 8000d4c:	0dd2      	lsrs	r2, r2, #23
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	9901      	ldr	r1, [sp, #4]
 8000d52:	4692      	mov	sl, r2
 8000d54:	027a      	lsls	r2, r7, #9
 8000d56:	430a      	orrs	r2, r1
 8000d58:	1e50      	subs	r0, r2, #1
 8000d5a:	4182      	sbcs	r2, r0
 8000d5c:	0dff      	lsrs	r7, r7, #23
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	464a      	mov	r2, r9
 8000d62:	0252      	lsls	r2, r2, #9
 8000d64:	4317      	orrs	r7, r2
 8000d66:	46b8      	mov	r8, r7
 8000d68:	01db      	lsls	r3, r3, #7
 8000d6a:	d500      	bpl.n	8000d6e <__aeabi_dmul+0x336>
 8000d6c:	e6ed      	b.n	8000b4a <__aeabi_dmul+0x112>
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <__aeabi_dmul+0x36c>)
 8000d70:	9a03      	ldr	r2, [sp, #12]
 8000d72:	445b      	add	r3, fp
 8000d74:	4691      	mov	r9, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	dc00      	bgt.n	8000d7c <__aeabi_dmul+0x344>
 8000d7a:	e0ac      	b.n	8000ed6 <__aeabi_dmul+0x49e>
 8000d7c:	003a      	movs	r2, r7
 8000d7e:	0752      	lsls	r2, r2, #29
 8000d80:	d100      	bne.n	8000d84 <__aeabi_dmul+0x34c>
 8000d82:	e710      	b.n	8000ba6 <__aeabi_dmul+0x16e>
 8000d84:	220f      	movs	r2, #15
 8000d86:	4658      	mov	r0, fp
 8000d88:	403a      	ands	r2, r7
 8000d8a:	2a04      	cmp	r2, #4
 8000d8c:	d000      	beq.n	8000d90 <__aeabi_dmul+0x358>
 8000d8e:	e6f9      	b.n	8000b84 <__aeabi_dmul+0x14c>
 8000d90:	e709      	b.n	8000ba6 <__aeabi_dmul+0x16e>
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	000007ff 	.word	0x000007ff
 8000d98:	fffffc01 	.word	0xfffffc01
 8000d9c:	feffffff 	.word	0xfeffffff
 8000da0:	000007fe 	.word	0x000007fe
 8000da4:	000003ff 	.word	0x000003ff
 8000da8:	0022      	movs	r2, r4
 8000daa:	4332      	orrs	r2, r6
 8000dac:	d06f      	beq.n	8000e8e <__aeabi_dmul+0x456>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_dmul+0x37c>
 8000db2:	e0c2      	b.n	8000f3a <__aeabi_dmul+0x502>
 8000db4:	0020      	movs	r0, r4
 8000db6:	f000 f98f 	bl	80010d8 <__clzsi2>
 8000dba:	0002      	movs	r2, r0
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	3a0b      	subs	r2, #11
 8000dc0:	201d      	movs	r0, #29
 8000dc2:	1a82      	subs	r2, r0, r2
 8000dc4:	0030      	movs	r0, r6
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	40d0      	lsrs	r0, r2
 8000dca:	3908      	subs	r1, #8
 8000dcc:	408c      	lsls	r4, r1
 8000dce:	0002      	movs	r2, r0
 8000dd0:	4322      	orrs	r2, r4
 8000dd2:	0034      	movs	r4, r6
 8000dd4:	408c      	lsls	r4, r1
 8000dd6:	4659      	mov	r1, fp
 8000dd8:	1acb      	subs	r3, r1, r3
 8000dda:	4986      	ldr	r1, [pc, #536]	@ (8000ff4 <__aeabi_dmul+0x5bc>)
 8000ddc:	468b      	mov	fp, r1
 8000dde:	449b      	add	fp, r3
 8000de0:	2d0a      	cmp	r5, #10
 8000de2:	dd00      	ble.n	8000de6 <__aeabi_dmul+0x3ae>
 8000de4:	e6a4      	b.n	8000b30 <__aeabi_dmul+0xf8>
 8000de6:	4649      	mov	r1, r9
 8000de8:	9b00      	ldr	r3, [sp, #0]
 8000dea:	9401      	str	r4, [sp, #4]
 8000dec:	4059      	eors	r1, r3
 8000dee:	b2cb      	uxtb	r3, r1
 8000df0:	0014      	movs	r4, r2
 8000df2:	2000      	movs	r0, #0
 8000df4:	9303      	str	r3, [sp, #12]
 8000df6:	2d02      	cmp	r5, #2
 8000df8:	dd00      	ble.n	8000dfc <__aeabi_dmul+0x3c4>
 8000dfa:	e667      	b.n	8000acc <__aeabi_dmul+0x94>
 8000dfc:	e6fb      	b.n	8000bf6 <__aeabi_dmul+0x1be>
 8000dfe:	4653      	mov	r3, sl
 8000e00:	4303      	orrs	r3, r0
 8000e02:	4698      	mov	r8, r3
 8000e04:	d03c      	beq.n	8000e80 <__aeabi_dmul+0x448>
 8000e06:	4653      	mov	r3, sl
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dmul+0x3d6>
 8000e0c:	e0a3      	b.n	8000f56 <__aeabi_dmul+0x51e>
 8000e0e:	4650      	mov	r0, sl
 8000e10:	f000 f962 	bl	80010d8 <__clzsi2>
 8000e14:	230b      	movs	r3, #11
 8000e16:	425b      	negs	r3, r3
 8000e18:	469c      	mov	ip, r3
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	4484      	add	ip, r0
 8000e1e:	0011      	movs	r1, r2
 8000e20:	4650      	mov	r0, sl
 8000e22:	3908      	subs	r1, #8
 8000e24:	4088      	lsls	r0, r1
 8000e26:	231d      	movs	r3, #29
 8000e28:	4680      	mov	r8, r0
 8000e2a:	4660      	mov	r0, ip
 8000e2c:	1a1b      	subs	r3, r3, r0
 8000e2e:	0020      	movs	r0, r4
 8000e30:	40d8      	lsrs	r0, r3
 8000e32:	0003      	movs	r3, r0
 8000e34:	4640      	mov	r0, r8
 8000e36:	4303      	orrs	r3, r0
 8000e38:	469a      	mov	sl, r3
 8000e3a:	0023      	movs	r3, r4
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	4698      	mov	r8, r3
 8000e40:	4b6c      	ldr	r3, [pc, #432]	@ (8000ff4 <__aeabi_dmul+0x5bc>)
 8000e42:	2500      	movs	r5, #0
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	469b      	mov	fp, r3
 8000e48:	2300      	movs	r3, #0
 8000e4a:	9302      	str	r3, [sp, #8]
 8000e4c:	e61a      	b.n	8000a84 <__aeabi_dmul+0x4c>
 8000e4e:	2d0f      	cmp	r5, #15
 8000e50:	d000      	beq.n	8000e54 <__aeabi_dmul+0x41c>
 8000e52:	e0c9      	b.n	8000fe8 <__aeabi_dmul+0x5b0>
 8000e54:	2380      	movs	r3, #128	@ 0x80
 8000e56:	4652      	mov	r2, sl
 8000e58:	031b      	lsls	r3, r3, #12
 8000e5a:	421a      	tst	r2, r3
 8000e5c:	d002      	beq.n	8000e64 <__aeabi_dmul+0x42c>
 8000e5e:	421c      	tst	r4, r3
 8000e60:	d100      	bne.n	8000e64 <__aeabi_dmul+0x42c>
 8000e62:	e092      	b.n	8000f8a <__aeabi_dmul+0x552>
 8000e64:	2480      	movs	r4, #128	@ 0x80
 8000e66:	4653      	mov	r3, sl
 8000e68:	0324      	lsls	r4, r4, #12
 8000e6a:	431c      	orrs	r4, r3
 8000e6c:	0324      	lsls	r4, r4, #12
 8000e6e:	4642      	mov	r2, r8
 8000e70:	0b24      	lsrs	r4, r4, #12
 8000e72:	e63e      	b.n	8000af2 <__aeabi_dmul+0xba>
 8000e74:	469b      	mov	fp, r3
 8000e76:	2303      	movs	r3, #3
 8000e78:	4680      	mov	r8, r0
 8000e7a:	250c      	movs	r5, #12
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	e601      	b.n	8000a84 <__aeabi_dmul+0x4c>
 8000e80:	2300      	movs	r3, #0
 8000e82:	469a      	mov	sl, r3
 8000e84:	469b      	mov	fp, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	2504      	movs	r5, #4
 8000e8a:	9302      	str	r3, [sp, #8]
 8000e8c:	e5fa      	b.n	8000a84 <__aeabi_dmul+0x4c>
 8000e8e:	2101      	movs	r1, #1
 8000e90:	430d      	orrs	r5, r1
 8000e92:	2d0a      	cmp	r5, #10
 8000e94:	dd00      	ble.n	8000e98 <__aeabi_dmul+0x460>
 8000e96:	e64b      	b.n	8000b30 <__aeabi_dmul+0xf8>
 8000e98:	4649      	mov	r1, r9
 8000e9a:	9800      	ldr	r0, [sp, #0]
 8000e9c:	4041      	eors	r1, r0
 8000e9e:	b2c9      	uxtb	r1, r1
 8000ea0:	9103      	str	r1, [sp, #12]
 8000ea2:	2d02      	cmp	r5, #2
 8000ea4:	dc00      	bgt.n	8000ea8 <__aeabi_dmul+0x470>
 8000ea6:	e096      	b.n	8000fd6 <__aeabi_dmul+0x59e>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	2400      	movs	r4, #0
 8000eac:	2001      	movs	r0, #1
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	e60c      	b.n	8000acc <__aeabi_dmul+0x94>
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	9a00      	ldr	r2, [sp, #0]
 8000eb8:	432b      	orrs	r3, r5
 8000eba:	4051      	eors	r1, r2
 8000ebc:	b2ca      	uxtb	r2, r1
 8000ebe:	9203      	str	r2, [sp, #12]
 8000ec0:	2b0a      	cmp	r3, #10
 8000ec2:	dd00      	ble.n	8000ec6 <__aeabi_dmul+0x48e>
 8000ec4:	e634      	b.n	8000b30 <__aeabi_dmul+0xf8>
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d157      	bne.n	8000f7a <__aeabi_dmul+0x542>
 8000eca:	9b03      	ldr	r3, [sp, #12]
 8000ecc:	4699      	mov	r9, r3
 8000ece:	2400      	movs	r4, #0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4b49      	ldr	r3, [pc, #292]	@ (8000ff8 <__aeabi_dmul+0x5c0>)
 8000ed4:	e60e      	b.n	8000af4 <__aeabi_dmul+0xbc>
 8000ed6:	4658      	mov	r0, fp
 8000ed8:	2101      	movs	r1, #1
 8000eda:	1ac9      	subs	r1, r1, r3
 8000edc:	2938      	cmp	r1, #56	@ 0x38
 8000ede:	dd00      	ble.n	8000ee2 <__aeabi_dmul+0x4aa>
 8000ee0:	e62f      	b.n	8000b42 <__aeabi_dmul+0x10a>
 8000ee2:	291f      	cmp	r1, #31
 8000ee4:	dd56      	ble.n	8000f94 <__aeabi_dmul+0x55c>
 8000ee6:	221f      	movs	r2, #31
 8000ee8:	4654      	mov	r4, sl
 8000eea:	4252      	negs	r2, r2
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	40dc      	lsrs	r4, r3
 8000ef0:	2920      	cmp	r1, #32
 8000ef2:	d007      	beq.n	8000f04 <__aeabi_dmul+0x4cc>
 8000ef4:	4b41      	ldr	r3, [pc, #260]	@ (8000ffc <__aeabi_dmul+0x5c4>)
 8000ef6:	4642      	mov	r2, r8
 8000ef8:	469c      	mov	ip, r3
 8000efa:	4653      	mov	r3, sl
 8000efc:	4460      	add	r0, ip
 8000efe:	4083      	lsls	r3, r0
 8000f00:	431a      	orrs	r2, r3
 8000f02:	4690      	mov	r8, r2
 8000f04:	4642      	mov	r2, r8
 8000f06:	2107      	movs	r1, #7
 8000f08:	1e53      	subs	r3, r2, #1
 8000f0a:	419a      	sbcs	r2, r3
 8000f0c:	000b      	movs	r3, r1
 8000f0e:	4322      	orrs	r2, r4
 8000f10:	4013      	ands	r3, r2
 8000f12:	2400      	movs	r4, #0
 8000f14:	4211      	tst	r1, r2
 8000f16:	d009      	beq.n	8000f2c <__aeabi_dmul+0x4f4>
 8000f18:	230f      	movs	r3, #15
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d05d      	beq.n	8000fdc <__aeabi_dmul+0x5a4>
 8000f20:	1d11      	adds	r1, r2, #4
 8000f22:	4291      	cmp	r1, r2
 8000f24:	419b      	sbcs	r3, r3
 8000f26:	000a      	movs	r2, r1
 8000f28:	425b      	negs	r3, r3
 8000f2a:	075b      	lsls	r3, r3, #29
 8000f2c:	08d2      	lsrs	r2, r2, #3
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	2300      	movs	r3, #0
 8000f32:	e5df      	b.n	8000af4 <__aeabi_dmul+0xbc>
 8000f34:	9b03      	ldr	r3, [sp, #12]
 8000f36:	4699      	mov	r9, r3
 8000f38:	e5fa      	b.n	8000b30 <__aeabi_dmul+0xf8>
 8000f3a:	9801      	ldr	r0, [sp, #4]
 8000f3c:	f000 f8cc 	bl	80010d8 <__clzsi2>
 8000f40:	0002      	movs	r2, r0
 8000f42:	0003      	movs	r3, r0
 8000f44:	3215      	adds	r2, #21
 8000f46:	3320      	adds	r3, #32
 8000f48:	2a1c      	cmp	r2, #28
 8000f4a:	dc00      	bgt.n	8000f4e <__aeabi_dmul+0x516>
 8000f4c:	e738      	b.n	8000dc0 <__aeabi_dmul+0x388>
 8000f4e:	9a01      	ldr	r2, [sp, #4]
 8000f50:	3808      	subs	r0, #8
 8000f52:	4082      	lsls	r2, r0
 8000f54:	e73f      	b.n	8000dd6 <__aeabi_dmul+0x39e>
 8000f56:	f000 f8bf 	bl	80010d8 <__clzsi2>
 8000f5a:	2315      	movs	r3, #21
 8000f5c:	469c      	mov	ip, r3
 8000f5e:	4484      	add	ip, r0
 8000f60:	0002      	movs	r2, r0
 8000f62:	4663      	mov	r3, ip
 8000f64:	3220      	adds	r2, #32
 8000f66:	2b1c      	cmp	r3, #28
 8000f68:	dc00      	bgt.n	8000f6c <__aeabi_dmul+0x534>
 8000f6a:	e758      	b.n	8000e1e <__aeabi_dmul+0x3e6>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4698      	mov	r8, r3
 8000f70:	0023      	movs	r3, r4
 8000f72:	3808      	subs	r0, #8
 8000f74:	4083      	lsls	r3, r0
 8000f76:	469a      	mov	sl, r3
 8000f78:	e762      	b.n	8000e40 <__aeabi_dmul+0x408>
 8000f7a:	001d      	movs	r5, r3
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2400      	movs	r4, #0
 8000f80:	2002      	movs	r0, #2
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	e5a2      	b.n	8000acc <__aeabi_dmul+0x94>
 8000f86:	9002      	str	r0, [sp, #8]
 8000f88:	e632      	b.n	8000bf0 <__aeabi_dmul+0x1b8>
 8000f8a:	431c      	orrs	r4, r3
 8000f8c:	9b00      	ldr	r3, [sp, #0]
 8000f8e:	9a01      	ldr	r2, [sp, #4]
 8000f90:	4699      	mov	r9, r3
 8000f92:	e5ae      	b.n	8000af2 <__aeabi_dmul+0xba>
 8000f94:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <__aeabi_dmul+0x5c8>)
 8000f96:	4652      	mov	r2, sl
 8000f98:	18c3      	adds	r3, r0, r3
 8000f9a:	4640      	mov	r0, r8
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	40c8      	lsrs	r0, r1
 8000fa0:	4302      	orrs	r2, r0
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	4098      	lsls	r0, r3
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	1e58      	subs	r0, r3, #1
 8000faa:	4183      	sbcs	r3, r0
 8000fac:	4654      	mov	r4, sl
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	40cc      	lsrs	r4, r1
 8000fb2:	0753      	lsls	r3, r2, #29
 8000fb4:	d009      	beq.n	8000fca <__aeabi_dmul+0x592>
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d005      	beq.n	8000fca <__aeabi_dmul+0x592>
 8000fbe:	1d13      	adds	r3, r2, #4
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	4192      	sbcs	r2, r2
 8000fc4:	4252      	negs	r2, r2
 8000fc6:	18a4      	adds	r4, r4, r2
 8000fc8:	001a      	movs	r2, r3
 8000fca:	0223      	lsls	r3, r4, #8
 8000fcc:	d508      	bpl.n	8000fe0 <__aeabi_dmul+0x5a8>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2400      	movs	r4, #0
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	e58e      	b.n	8000af4 <__aeabi_dmul+0xbc>
 8000fd6:	4689      	mov	r9, r1
 8000fd8:	2400      	movs	r4, #0
 8000fda:	e58b      	b.n	8000af4 <__aeabi_dmul+0xbc>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e7a5      	b.n	8000f2c <__aeabi_dmul+0x4f4>
 8000fe0:	0763      	lsls	r3, r4, #29
 8000fe2:	0264      	lsls	r4, r4, #9
 8000fe4:	0b24      	lsrs	r4, r4, #12
 8000fe6:	e7a1      	b.n	8000f2c <__aeabi_dmul+0x4f4>
 8000fe8:	9b00      	ldr	r3, [sp, #0]
 8000fea:	46a2      	mov	sl, r4
 8000fec:	4699      	mov	r9, r3
 8000fee:	9b01      	ldr	r3, [sp, #4]
 8000ff0:	4698      	mov	r8, r3
 8000ff2:	e737      	b.n	8000e64 <__aeabi_dmul+0x42c>
 8000ff4:	fffffc0d 	.word	0xfffffc0d
 8000ff8:	000007ff 	.word	0x000007ff
 8000ffc:	0000043e 	.word	0x0000043e
 8001000:	0000041e 	.word	0x0000041e

08001004 <__aeabi_d2iz>:
 8001004:	000b      	movs	r3, r1
 8001006:	0002      	movs	r2, r0
 8001008:	b570      	push	{r4, r5, r6, lr}
 800100a:	4d16      	ldr	r5, [pc, #88]	@ (8001064 <__aeabi_d2iz+0x60>)
 800100c:	030c      	lsls	r4, r1, #12
 800100e:	b082      	sub	sp, #8
 8001010:	0049      	lsls	r1, r1, #1
 8001012:	2000      	movs	r0, #0
 8001014:	9200      	str	r2, [sp, #0]
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	0b24      	lsrs	r4, r4, #12
 800101a:	0d49      	lsrs	r1, r1, #21
 800101c:	0fde      	lsrs	r6, r3, #31
 800101e:	42a9      	cmp	r1, r5
 8001020:	dd04      	ble.n	800102c <__aeabi_d2iz+0x28>
 8001022:	4811      	ldr	r0, [pc, #68]	@ (8001068 <__aeabi_d2iz+0x64>)
 8001024:	4281      	cmp	r1, r0
 8001026:	dd03      	ble.n	8001030 <__aeabi_d2iz+0x2c>
 8001028:	4b10      	ldr	r3, [pc, #64]	@ (800106c <__aeabi_d2iz+0x68>)
 800102a:	18f0      	adds	r0, r6, r3
 800102c:	b002      	add	sp, #8
 800102e:	bd70      	pop	{r4, r5, r6, pc}
 8001030:	2080      	movs	r0, #128	@ 0x80
 8001032:	0340      	lsls	r0, r0, #13
 8001034:	4320      	orrs	r0, r4
 8001036:	4c0e      	ldr	r4, [pc, #56]	@ (8001070 <__aeabi_d2iz+0x6c>)
 8001038:	1a64      	subs	r4, r4, r1
 800103a:	2c1f      	cmp	r4, #31
 800103c:	dd08      	ble.n	8001050 <__aeabi_d2iz+0x4c>
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <__aeabi_d2iz+0x70>)
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	40d8      	lsrs	r0, r3
 8001044:	0003      	movs	r3, r0
 8001046:	4258      	negs	r0, r3
 8001048:	2e00      	cmp	r6, #0
 800104a:	d1ef      	bne.n	800102c <__aeabi_d2iz+0x28>
 800104c:	0018      	movs	r0, r3
 800104e:	e7ed      	b.n	800102c <__aeabi_d2iz+0x28>
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <__aeabi_d2iz+0x74>)
 8001052:	9a00      	ldr	r2, [sp, #0]
 8001054:	469c      	mov	ip, r3
 8001056:	0003      	movs	r3, r0
 8001058:	4461      	add	r1, ip
 800105a:	408b      	lsls	r3, r1
 800105c:	40e2      	lsrs	r2, r4
 800105e:	4313      	orrs	r3, r2
 8001060:	e7f1      	b.n	8001046 <__aeabi_d2iz+0x42>
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	000003fe 	.word	0x000003fe
 8001068:	0000041d 	.word	0x0000041d
 800106c:	7fffffff 	.word	0x7fffffff
 8001070:	00000433 	.word	0x00000433
 8001074:	00000413 	.word	0x00000413
 8001078:	fffffbed 	.word	0xfffffbed

0800107c <__aeabi_i2d>:
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	2800      	cmp	r0, #0
 8001080:	d016      	beq.n	80010b0 <__aeabi_i2d+0x34>
 8001082:	17c3      	asrs	r3, r0, #31
 8001084:	18c5      	adds	r5, r0, r3
 8001086:	405d      	eors	r5, r3
 8001088:	0fc4      	lsrs	r4, r0, #31
 800108a:	0028      	movs	r0, r5
 800108c:	f000 f824 	bl	80010d8 <__clzsi2>
 8001090:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <__aeabi_i2d+0x58>)
 8001092:	1a1b      	subs	r3, r3, r0
 8001094:	055b      	lsls	r3, r3, #21
 8001096:	0d5b      	lsrs	r3, r3, #21
 8001098:	280a      	cmp	r0, #10
 800109a:	dc14      	bgt.n	80010c6 <__aeabi_i2d+0x4a>
 800109c:	0002      	movs	r2, r0
 800109e:	002e      	movs	r6, r5
 80010a0:	3215      	adds	r2, #21
 80010a2:	4096      	lsls	r6, r2
 80010a4:	220b      	movs	r2, #11
 80010a6:	1a12      	subs	r2, r2, r0
 80010a8:	40d5      	lsrs	r5, r2
 80010aa:	032d      	lsls	r5, r5, #12
 80010ac:	0b2d      	lsrs	r5, r5, #12
 80010ae:	e003      	b.n	80010b8 <__aeabi_i2d+0x3c>
 80010b0:	2400      	movs	r4, #0
 80010b2:	2300      	movs	r3, #0
 80010b4:	2500      	movs	r5, #0
 80010b6:	2600      	movs	r6, #0
 80010b8:	051b      	lsls	r3, r3, #20
 80010ba:	432b      	orrs	r3, r5
 80010bc:	07e4      	lsls	r4, r4, #31
 80010be:	4323      	orrs	r3, r4
 80010c0:	0030      	movs	r0, r6
 80010c2:	0019      	movs	r1, r3
 80010c4:	bd70      	pop	{r4, r5, r6, pc}
 80010c6:	380b      	subs	r0, #11
 80010c8:	4085      	lsls	r5, r0
 80010ca:	032d      	lsls	r5, r5, #12
 80010cc:	2600      	movs	r6, #0
 80010ce:	0b2d      	lsrs	r5, r5, #12
 80010d0:	e7f2      	b.n	80010b8 <__aeabi_i2d+0x3c>
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	0000041e 	.word	0x0000041e

080010d8 <__clzsi2>:
 80010d8:	211c      	movs	r1, #28
 80010da:	2301      	movs	r3, #1
 80010dc:	041b      	lsls	r3, r3, #16
 80010de:	4298      	cmp	r0, r3
 80010e0:	d301      	bcc.n	80010e6 <__clzsi2+0xe>
 80010e2:	0c00      	lsrs	r0, r0, #16
 80010e4:	3910      	subs	r1, #16
 80010e6:	0a1b      	lsrs	r3, r3, #8
 80010e8:	4298      	cmp	r0, r3
 80010ea:	d301      	bcc.n	80010f0 <__clzsi2+0x18>
 80010ec:	0a00      	lsrs	r0, r0, #8
 80010ee:	3908      	subs	r1, #8
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	4298      	cmp	r0, r3
 80010f4:	d301      	bcc.n	80010fa <__clzsi2+0x22>
 80010f6:	0900      	lsrs	r0, r0, #4
 80010f8:	3904      	subs	r1, #4
 80010fa:	a202      	add	r2, pc, #8	@ (adr r2, 8001104 <__clzsi2+0x2c>)
 80010fc:	5c10      	ldrb	r0, [r2, r0]
 80010fe:	1840      	adds	r0, r0, r1
 8001100:	4770      	bx	lr
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	02020304 	.word	0x02020304
 8001108:	01010101 	.word	0x01010101
	...

08001114 <update_display>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void update_display() {
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af02      	add	r7, sp, #8
    char buf[32];
    ssd1306_Fill(Black);
 800111a:	2000      	movs	r0, #0
 800111c:	f000 fc76 	bl	8001a0c <ssd1306_Fill>

    // Текущая частота
    ssd1306_SetCursor(5, 5);
 8001120:	2105      	movs	r1, #5
 8001122:	2005      	movs	r0, #5
 8001124:	f000 fdf2 	bl	8001d0c <ssd1306_SetCursor>
    snprintf(buf, sizeof(buf), "Current: %lu Hz", current_freq);
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <update_display+0x94>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <update_display+0x98>)
 800112e:	0038      	movs	r0, r7
 8001130:	2120      	movs	r1, #32
 8001132:	f003 fbe3 	bl	80048fc <sniprintf>
    ssd1306_WriteString(buf, Font_7x10, White);
 8001136:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <update_display+0x9c>)
 8001138:	0038      	movs	r0, r7
 800113a:	2201      	movs	r2, #1
 800113c:	9200      	str	r2, [sp, #0]
 800113e:	6819      	ldr	r1, [r3, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f000 fdb6 	bl	8001cb4 <ssd1306_WriteString>

    // Новая частота
    ssd1306_SetCursor(5, 15);
 8001148:	210f      	movs	r1, #15
 800114a:	2005      	movs	r0, #5
 800114c:	f000 fdde 	bl	8001d0c <ssd1306_SetCursor>
    if(freq_changed) {
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <update_display+0xa0>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d007      	beq.n	8001168 <update_display+0x54>
        snprintf(buf, sizeof(buf), "New: %lu Hz", new_freq);
 8001158:	4b17      	ldr	r3, [pc, #92]	@ (80011b8 <update_display+0xa4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a17      	ldr	r2, [pc, #92]	@ (80011bc <update_display+0xa8>)
 800115e:	0038      	movs	r0, r7
 8001160:	2120      	movs	r1, #32
 8001162:	f003 fbcb 	bl	80048fc <sniprintf>
 8001166:	e003      	b.n	8001170 <update_display+0x5c>
    } else {
        strcpy(buf, "New: --");
 8001168:	003b      	movs	r3, r7
 800116a:	4a15      	ldr	r2, [pc, #84]	@ (80011c0 <update_display+0xac>)
 800116c:	ca03      	ldmia	r2!, {r0, r1}
 800116e:	c303      	stmia	r3!, {r0, r1}
    }
    ssd1306_WriteString(buf, Font_7x10, White);
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <update_display+0x9c>)
 8001172:	0038      	movs	r0, r7
 8001174:	2201      	movs	r2, #1
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	6819      	ldr	r1, [r3, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f000 fd99 	bl	8001cb4 <ssd1306_WriteString>

    // Инструкция
    ssd1306_SetCursor(5, 25);
 8001182:	2119      	movs	r1, #25
 8001184:	2005      	movs	r0, #5
 8001186:	f000 fdc1 	bl	8001d0c <ssd1306_SetCursor>
    ssd1306_WriteString("UP/DOWN-Change OK-Set", Font_7x10, White);
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <update_display+0x9c>)
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <update_display+0xb0>)
 800118e:	2201      	movs	r2, #1
 8001190:	9200      	str	r2, [sp, #0]
 8001192:	6819      	ldr	r1, [r3, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f000 fd8c 	bl	8001cb4 <ssd1306_WriteString>

    ssd1306_UpdateScreen();
 800119c:	f000 fc50 	bl	8001a40 <ssd1306_UpdateScreen>
}
 80011a0:	46c0      	nop			@ (mov r8, r8)
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b008      	add	sp, #32
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	08005278 	.word	0x08005278
 80011b0:	08005a88 	.word	0x08005a88
 80011b4:	2000015c 	.word	0x2000015c
 80011b8:	20000004 	.word	0x20000004
 80011bc:	08005288 	.word	0x08005288
 80011c0:	08005294 	.word	0x08005294
 80011c4:	0800529c 	.word	0x0800529c

080011c8 <apply_frequency>:

void apply_frequency() {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
    si5351_SetupCLK0(new_freq, SI5351_DRIVE_STRENGTH_8MA);
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <apply_frequency+0x28>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2103      	movs	r1, #3
 80011d2:	0018      	movs	r0, r3
 80011d4:	f001 f8c6 	bl	8002364 <si5351_SetupCLK0>
    current_freq = new_freq;
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <apply_frequency+0x28>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <apply_frequency+0x2c>)
 80011de:	601a      	str	r2, [r3, #0]
    freq_changed = 0;
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <apply_frequency+0x30>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
    update_display();
 80011e6:	f7ff ff95 	bl	8001114 <update_display>
}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000004 	.word	0x20000004
 80011f4:	20000000 	.word	0x20000000
 80011f8:	2000015c 	.word	0x2000015c

080011fc <handle_buttons>:

void handle_buttons() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
    static uint32_t last_press = 0;
    uint32_t now = HAL_GetTick();
 8001202:	f001 f9ed 	bl	80025e0 <HAL_GetTick>
 8001206:	0003      	movs	r3, r0
 8001208:	607b      	str	r3, [r7, #4]

    // Обработка кнопки UP
    if(HAL_GPIO_ReadPin(GPIOA, BTN_UP_PIN) == GPIO_PIN_RESET) {
 800120a:	2390      	movs	r3, #144	@ 0x90
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	2101      	movs	r1, #1
 8001210:	0018      	movs	r0, r3
 8001212:	f001 fc37 	bl	8002a84 <HAL_GPIO_ReadPin>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d11c      	bne.n	8001254 <handle_buttons+0x58>
        if(now - last_press > 200) { // Задержка 200 мс
 800121a:	4b32      	ldr	r3, [pc, #200]	@ (80012e4 <handle_buttons+0xe8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2bc8      	cmp	r3, #200	@ 0xc8
 8001224:	d916      	bls.n	8001254 <handle_buttons+0x58>
            new_freq += FREQ_STEP;
 8001226:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <handle_buttons+0xec>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	22fa      	movs	r2, #250	@ 0xfa
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	189a      	adds	r2, r3, r2
 8001230:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <handle_buttons+0xec>)
 8001232:	601a      	str	r2, [r3, #0]
            if(new_freq > 160000000) new_freq = 160000000;
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <handle_buttons+0xec>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a2c      	ldr	r2, [pc, #176]	@ (80012ec <handle_buttons+0xf0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d902      	bls.n	8001244 <handle_buttons+0x48>
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <handle_buttons+0xec>)
 8001240:	4a2a      	ldr	r2, [pc, #168]	@ (80012ec <handle_buttons+0xf0>)
 8001242:	601a      	str	r2, [r3, #0]
            freq_changed = 1;
 8001244:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <handle_buttons+0xf4>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
            last_press = now;
 800124a:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <handle_buttons+0xe8>)
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	601a      	str	r2, [r3, #0]
            update_display();
 8001250:	f7ff ff60 	bl	8001114 <update_display>
        }
    }

    // Обработка кнопки DOWN
    if(HAL_GPIO_ReadPin(GPIOA, BTN_DOWN_PIN) == GPIO_PIN_RESET) {
 8001254:	2390      	movs	r3, #144	@ 0x90
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	2102      	movs	r1, #2
 800125a:	0018      	movs	r0, r3
 800125c:	f001 fc12 	bl	8002a84 <HAL_GPIO_ReadPin>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d11d      	bne.n	80012a0 <handle_buttons+0xa4>
        if(now - last_press > 200) {
 8001264:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <handle_buttons+0xe8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2bc8      	cmp	r3, #200	@ 0xc8
 800126e:	d917      	bls.n	80012a0 <handle_buttons+0xa4>
            new_freq -= FREQ_STEP;
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <handle_buttons+0xec>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1f      	ldr	r2, [pc, #124]	@ (80012f4 <handle_buttons+0xf8>)
 8001276:	189a      	adds	r2, r3, r2
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <handle_buttons+0xec>)
 800127a:	601a      	str	r2, [r3, #0]
            if(new_freq < 8000) new_freq = 8000;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <handle_buttons+0xec>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	23fa      	movs	r3, #250	@ 0xfa
 8001282:	015b      	lsls	r3, r3, #5
 8001284:	429a      	cmp	r2, r3
 8001286:	d203      	bcs.n	8001290 <handle_buttons+0x94>
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <handle_buttons+0xec>)
 800128a:	22fa      	movs	r2, #250	@ 0xfa
 800128c:	0152      	lsls	r2, r2, #5
 800128e:	601a      	str	r2, [r3, #0]
            freq_changed = 1;
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <handle_buttons+0xf4>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
            last_press = now;
 8001296:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <handle_buttons+0xe8>)
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	601a      	str	r2, [r3, #0]
            update_display();
 800129c:	f7ff ff3a 	bl	8001114 <update_display>
        }
    }

    // Обработка кнопки OK
    if(HAL_GPIO_ReadPin(GPIOA, BTN_OK_PIN) == GPIO_PIN_RESET) {
 80012a0:	2390      	movs	r3, #144	@ 0x90
 80012a2:	05db      	lsls	r3, r3, #23
 80012a4:	2104      	movs	r1, #4
 80012a6:	0018      	movs	r0, r3
 80012a8:	f001 fbec 	bl	8002a84 <HAL_GPIO_ReadPin>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d115      	bne.n	80012dc <handle_buttons+0xe0>
        HAL_Delay(50); // Антидребезг
 80012b0:	2032      	movs	r0, #50	@ 0x32
 80012b2:	f001 f99f 	bl	80025f4 <HAL_Delay>
        if(HAL_GPIO_ReadPin(GPIOA, BTN_OK_PIN) == GPIO_PIN_RESET) {
 80012b6:	2390      	movs	r3, #144	@ 0x90
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	2104      	movs	r1, #4
 80012bc:	0018      	movs	r0, r3
 80012be:	f001 fbe1 	bl	8002a84 <HAL_GPIO_ReadPin>
 80012c2:	1e03      	subs	r3, r0, #0
 80012c4:	d10a      	bne.n	80012dc <handle_buttons+0xe0>
            apply_frequency();
 80012c6:	f7ff ff7f 	bl	80011c8 <apply_frequency>
            while(HAL_GPIO_ReadPin(GPIOA, BTN_OK_PIN) == GPIO_PIN_RESET);
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	2390      	movs	r3, #144	@ 0x90
 80012ce:	05db      	lsls	r3, r3, #23
 80012d0:	2104      	movs	r1, #4
 80012d2:	0018      	movs	r0, r3
 80012d4:	f001 fbd6 	bl	8002a84 <HAL_GPIO_ReadPin>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d0f7      	beq.n	80012cc <handle_buttons+0xd0>
        }
    }
}
 80012dc:	46c0      	nop			@ (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b002      	add	sp, #8
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000160 	.word	0x20000160
 80012e8:	20000004 	.word	0x20000004
 80012ec:	09896800 	.word	0x09896800
 80012f0:	2000015c 	.word	0x2000015c
 80012f4:	fffffc18 	.word	0xfffffc18

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b09d      	sub	sp, #116	@ 0x74
 80012fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f001 f915 	bl	800252c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f84b 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 f91d 	bl	8001544 <MX_GPIO_Init>
  MX_I2C1_Init();
 800130a:	f000 f8ab 	bl	8001464 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800130e:	f000 f8e9 	bl	80014e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */




  ssd1306_Init();
 8001312:	f000 fb0f 	bl	8001934 <ssd1306_Init>
  ssd1306_SetContrast(255);
 8001316:	20ff      	movs	r0, #255	@ 0xff
 8001318:	f000 fdad 	bl	8001e76 <ssd1306_SetContrast>
  ssd1306_SetCursor(5,5);
 800131c:	2105      	movs	r1, #5
 800131e:	2005      	movs	r0, #5
 8001320:	f000 fcf4 	bl	8001d0c <ssd1306_SetCursor>
  char Text[100] = "Alle Normale";
 8001324:	1d3c      	adds	r4, r7, #4
 8001326:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <main+0x9c>)
 8001328:	0020      	movs	r0, r4
 800132a:	0019      	movs	r1, r3
 800132c:	230d      	movs	r3, #13
 800132e:	001a      	movs	r2, r3
 8001330:	f003 fb4e 	bl	80049d0 <memcpy>
 8001334:	230d      	movs	r3, #13
 8001336:	18e3      	adds	r3, r4, r3
 8001338:	2257      	movs	r2, #87	@ 0x57
 800133a:	2100      	movs	r1, #0
 800133c:	0018      	movs	r0, r3
 800133e:	f003 fb13 	bl	8004968 <memset>
  ssd1306_WriteString(Text, Font_7x10, White);
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <main+0xa0>)
 8001344:	1d38      	adds	r0, r7, #4
 8001346:	2201      	movs	r2, #1
 8001348:	9200      	str	r2, [sp, #0]
 800134a:	6819      	ldr	r1, [r3, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f000 fcb0 	bl	8001cb4 <ssd1306_WriteString>
  ssd1306_DrawCircle(100, 8, 5, White);
 8001354:	2301      	movs	r3, #1
 8001356:	2205      	movs	r2, #5
 8001358:	2108      	movs	r1, #8
 800135a:	2064      	movs	r0, #100	@ 0x64
 800135c:	f000 fcf0 	bl	8001d40 <ssd1306_DrawCircle>

  ssd1306_UpdateScreen();
 8001360:	f000 fb6e 	bl	8001a40 <ssd1306_UpdateScreen>

  HAL_Delay(4000);
 8001364:	23fa      	movs	r3, #250	@ 0xfa
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	0018      	movs	r0, r3
 800136a:	f001 f943 	bl	80025f4 <HAL_Delay>

  // Инициализация дисплея

  ssd1306_SetDisplayOn(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f000 fd9a 	bl	8001ea8 <ssd1306_SetDisplayOn>

  // Инициализация Si5351
  si5351_Init(0); // Введите калибровочное значение
 8001374:	2000      	movs	r0, #0
 8001376:	f000 fdbd 	bl	8001ef4 <si5351_Init>
  si5351_EnableOutputs(1 << 0);
 800137a:	2001      	movs	r0, #1
 800137c:	f001 f814 	bl	80023a8 <si5351_EnableOutputs>

  update_display();
 8001380:	f7ff fec8 	bl	8001114 <update_display>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      handle_buttons();
 8001384:	f7ff ff3a 	bl	80011fc <handle_buttons>
      HAL_Delay(10);
 8001388:	200a      	movs	r0, #10
 800138a:	f001 f933 	bl	80025f4 <HAL_Delay>
      handle_buttons();
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	e7f8      	b.n	8001384 <main+0x8c>
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	080052b4 	.word	0x080052b4
 8001398:	08005a88 	.word	0x08005a88

0800139c <SystemClock_Config>:




void SystemClock_Config(void)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b097      	sub	sp, #92	@ 0x5c
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	2428      	movs	r4, #40	@ 0x28
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	0018      	movs	r0, r3
 80013a8:	2330      	movs	r3, #48	@ 0x30
 80013aa:	001a      	movs	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	f003 fadb 	bl	8004968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b2:	2318      	movs	r3, #24
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	0018      	movs	r0, r3
 80013b8:	2310      	movs	r3, #16
 80013ba:	001a      	movs	r2, r3
 80013bc:	2100      	movs	r1, #0
 80013be:	f003 fad3 	bl	8004968 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	0018      	movs	r0, r3
 80013c6:	2314      	movs	r3, #20
 80013c8:	001a      	movs	r2, r3
 80013ca:	2100      	movs	r1, #0
 80013cc:	f003 facc 	bl	8004968 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d0:	0021      	movs	r1, r4
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2202      	movs	r2, #2
 80013d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2201      	movs	r2, #1
 80013dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	2210      	movs	r2, #16
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2202      	movs	r2, #2
 80013e8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	22a0      	movs	r2, #160	@ 0xa0
 80013f4:	0392      	lsls	r2, r2, #14
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2200      	movs	r2, #0
 80013fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	0018      	movs	r0, r3
 8001402:	f002 f97b 	bl	80036fc <HAL_RCC_OscConfig>
 8001406:	1e03      	subs	r3, r0, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800140a:	f000 f915 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140e:	2118      	movs	r1, #24
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2207      	movs	r2, #7
 8001414:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2202      	movs	r2, #2
 800141a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	187b      	adds	r3, r7, r1
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001422:	187b      	adds	r3, r7, r1
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001428:	187b      	adds	r3, r7, r1
 800142a:	2101      	movs	r1, #1
 800142c:	0018      	movs	r0, r3
 800142e:	f002 fc7f 	bl	8003d30 <HAL_RCC_ClockConfig>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001436:	f000 f8ff 	bl	8001638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2221      	movs	r2, #33	@ 0x21
 800143e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2210      	movs	r2, #16
 800144a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	0018      	movs	r0, r3
 8001450:	f002 fdb2 	bl	8003fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001458:	f000 f8ee 	bl	8001638 <Error_Handler>
  }
}
 800145c:	46c0      	nop			@ (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b017      	add	sp, #92	@ 0x5c
 8001462:	bd90      	pop	{r4, r7, pc}

08001464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_I2C1_Init+0x74>)
 800146a:	4a1c      	ldr	r2, [pc, #112]	@ (80014dc <MX_I2C1_Init+0x78>)
 800146c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_I2C1_Init+0x74>)
 8001470:	4a1b      	ldr	r2, [pc, #108]	@ (80014e0 <MX_I2C1_Init+0x7c>)
 8001472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_I2C1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147a:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <MX_I2C1_Init+0x74>)
 800147c:	2201      	movs	r2, #1
 800147e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_I2C1_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <MX_I2C1_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_I2C1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_I2C1_Init+0x74>)
 8001494:	2200      	movs	r2, #0
 8001496:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_I2C1_Init+0x74>)
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 fb29 	bl	8002af8 <HAL_I2C_Init>
 80014a6:	1e03      	subs	r3, r0, #0
 80014a8:	d001      	beq.n	80014ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014aa:	f000 f8c5 	bl	8001638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <MX_I2C1_Init+0x74>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	0018      	movs	r0, r3
 80014b4:	f002 f88a 	bl	80035cc <HAL_I2CEx_ConfigAnalogFilter>
 80014b8:	1e03      	subs	r3, r0, #0
 80014ba:	d001      	beq.n	80014c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014bc:	f000 f8bc 	bl	8001638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <MX_I2C1_Init+0x74>)
 80014c2:	2100      	movs	r1, #0
 80014c4:	0018      	movs	r0, r3
 80014c6:	f002 f8cd 	bl	8003664 <HAL_I2CEx_ConfigDigitalFilter>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014ce:	f000 f8b3 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000080 	.word	0x20000080
 80014dc:	40005400 	.word	0x40005400
 80014e0:	10805d88 	.word	0x10805d88

080014e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e8:	4b14      	ldr	r3, [pc, #80]	@ (800153c <MX_USART1_UART_Init+0x58>)
 80014ea:	4a15      	ldr	r2, [pc, #84]	@ (8001540 <MX_USART1_UART_Init+0x5c>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <MX_USART1_UART_Init+0x58>)
 80014f0:	2296      	movs	r2, #150	@ 0x96
 80014f2:	0212      	lsls	r2, r2, #8
 80014f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_USART1_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <MX_USART1_UART_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_USART1_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_USART1_UART_Init+0x58>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <MX_USART1_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_USART1_UART_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151a:	4b08      	ldr	r3, [pc, #32]	@ (800153c <MX_USART1_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_USART1_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001526:	4b05      	ldr	r3, [pc, #20]	@ (800153c <MX_USART1_UART_Init+0x58>)
 8001528:	0018      	movs	r0, r3
 800152a:	f002 fe23 	bl	8004174 <HAL_UART_Init>
 800152e:	1e03      	subs	r3, r0, #0
 8001530:	d001      	beq.n	8001536 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001532:	f000 f881 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000d4 	.word	0x200000d4
 8001540:	40013800 	.word	0x40013800

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b089      	sub	sp, #36	@ 0x24
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	240c      	movs	r4, #12
 800154c:	193b      	adds	r3, r7, r4
 800154e:	0018      	movs	r0, r3
 8001550:	2314      	movs	r3, #20
 8001552:	001a      	movs	r2, r3
 8001554:	2100      	movs	r1, #0
 8001556:	f003 fa07 	bl	8004968 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b35      	ldr	r3, [pc, #212]	@ (8001630 <MX_GPIO_Init+0xec>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	4b34      	ldr	r3, [pc, #208]	@ (8001630 <MX_GPIO_Init+0xec>)
 8001560:	2180      	movs	r1, #128	@ 0x80
 8001562:	0289      	lsls	r1, r1, #10
 8001564:	430a      	orrs	r2, r1
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	4b31      	ldr	r3, [pc, #196]	@ (8001630 <MX_GPIO_Init+0xec>)
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	029b      	lsls	r3, r3, #10
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <MX_GPIO_Init+0xec>)
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	4b2d      	ldr	r3, [pc, #180]	@ (8001630 <MX_GPIO_Init+0xec>)
 800157c:	2180      	movs	r1, #128	@ 0x80
 800157e:	0309      	lsls	r1, r1, #12
 8001580:	430a      	orrs	r2, r1
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	4b2a      	ldr	r3, [pc, #168]	@ (8001630 <MX_GPIO_Init+0xec>)
 8001586:	695a      	ldr	r2, [r3, #20]
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	031b      	lsls	r3, r3, #12
 800158c:	4013      	ands	r3, r2
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b27      	ldr	r3, [pc, #156]	@ (8001630 <MX_GPIO_Init+0xec>)
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	4b26      	ldr	r3, [pc, #152]	@ (8001630 <MX_GPIO_Init+0xec>)
 8001598:	2180      	movs	r1, #128	@ 0x80
 800159a:	02c9      	lsls	r1, r1, #11
 800159c:	430a      	orrs	r2, r1
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <MX_GPIO_Init+0xec>)
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	2380      	movs	r3, #128	@ 0x80
 80015a6:	02db      	lsls	r3, r3, #11
 80015a8:	4013      	ands	r3, r2
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80015ae:	23c0      	movs	r3, #192	@ 0xc0
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4820      	ldr	r0, [pc, #128]	@ (8001634 <MX_GPIO_Init+0xf0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	0019      	movs	r1, r3
 80015b8:	f001 fa81 	bl	8002abe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015bc:	193b      	adds	r3, r7, r4
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	2290      	movs	r2, #144	@ 0x90
 80015c6:	0352      	lsls	r2, r2, #13
 80015c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d0:	193a      	adds	r2, r7, r4
 80015d2:	2390      	movs	r3, #144	@ 0x90
 80015d4:	05db      	lsls	r3, r3, #23
 80015d6:	0011      	movs	r1, r2
 80015d8:	0018      	movs	r0, r3
 80015da:	f001 f8e3 	bl	80027a4 <HAL_GPIO_Init>
  /*Configure GPIO pins : PA1 PA2 PA3 */
  //GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  //GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  //GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  //HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = BTN_UP_PIN | BTN_DOWN_PIN | BTN_OK_PIN;
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	193b      	adds	r3, r7, r4
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	193b      	adds	r3, r7, r4
 80015ec:	2201      	movs	r2, #1
 80015ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	193a      	adds	r2, r7, r4
 80015f2:	2390      	movs	r3, #144	@ 0x90
 80015f4:	05db      	lsls	r3, r3, #23
 80015f6:	0011      	movs	r1, r2
 80015f8:	0018      	movs	r0, r3
 80015fa:	f001 f8d3 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80015fe:	0021      	movs	r1, r4
 8001600:	187b      	adds	r3, r7, r1
 8001602:	22c0      	movs	r2, #192	@ 0xc0
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2201      	movs	r2, #1
 800160c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	187b      	adds	r3, r7, r1
 800161c:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <MX_GPIO_Init+0xf0>)
 800161e:	0019      	movs	r1, r3
 8001620:	0010      	movs	r0, r2
 8001622:	f001 f8bf 	bl	80027a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b009      	add	sp, #36	@ 0x24
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	40021000 	.word	0x40021000
 8001634:	48000800 	.word	0x48000800

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	e7fd      	b.n	8001640 <Error_Handler+0x8>

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <HAL_MspInit+0x44>)
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_MspInit+0x44>)
 8001650:	2101      	movs	r1, #1
 8001652:	430a      	orrs	r2, r1
 8001654:	619a      	str	r2, [r3, #24]
 8001656:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <HAL_MspInit+0x44>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2201      	movs	r2, #1
 800165c:	4013      	ands	r3, r2
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <HAL_MspInit+0x44>)
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	4b08      	ldr	r3, [pc, #32]	@ (8001688 <HAL_MspInit+0x44>)
 8001668:	2180      	movs	r1, #128	@ 0x80
 800166a:	0549      	lsls	r1, r1, #21
 800166c:	430a      	orrs	r2, r1
 800166e:	61da      	str	r2, [r3, #28]
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <HAL_MspInit+0x44>)
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	055b      	lsls	r3, r3, #21
 8001678:	4013      	ands	r3, r2
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	40021000 	.word	0x40021000

0800168c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b08b      	sub	sp, #44	@ 0x2c
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	2414      	movs	r4, #20
 8001696:	193b      	adds	r3, r7, r4
 8001698:	0018      	movs	r0, r3
 800169a:	2314      	movs	r3, #20
 800169c:	001a      	movs	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	f003 f962 	bl	8004968 <memset>
  if(hi2c->Instance==I2C1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1c      	ldr	r2, [pc, #112]	@ (800171c <HAL_I2C_MspInit+0x90>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d131      	bne.n	8001712 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <HAL_I2C_MspInit+0x94>)
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_I2C_MspInit+0x94>)
 80016b4:	2180      	movs	r1, #128	@ 0x80
 80016b6:	02c9      	lsls	r1, r1, #11
 80016b8:	430a      	orrs	r2, r1
 80016ba:	615a      	str	r2, [r3, #20]
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_I2C_MspInit+0x94>)
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	2380      	movs	r3, #128	@ 0x80
 80016c2:	02db      	lsls	r3, r3, #11
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ca:	0021      	movs	r1, r4
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	22c0      	movs	r2, #192	@ 0xc0
 80016d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	2212      	movs	r2, #18
 80016d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2201      	movs	r2, #1
 80016dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	2203      	movs	r2, #3
 80016e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	2201      	movs	r2, #1
 80016e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <HAL_I2C_MspInit+0x98>)
 80016ee:	0019      	movs	r1, r3
 80016f0:	0010      	movs	r0, r2
 80016f2:	f001 f857 	bl	80027a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_I2C_MspInit+0x94>)
 80016f8:	69da      	ldr	r2, [r3, #28]
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_I2C_MspInit+0x94>)
 80016fc:	2180      	movs	r1, #128	@ 0x80
 80016fe:	0389      	lsls	r1, r1, #14
 8001700:	430a      	orrs	r2, r1
 8001702:	61da      	str	r2, [r3, #28]
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_I2C_MspInit+0x94>)
 8001706:	69da      	ldr	r2, [r3, #28]
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	039b      	lsls	r3, r3, #14
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b00b      	add	sp, #44	@ 0x2c
 8001718:	bd90      	pop	{r4, r7, pc}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	40005400 	.word	0x40005400
 8001720:	40021000 	.word	0x40021000
 8001724:	48000400 	.word	0x48000400

08001728 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b08b      	sub	sp, #44	@ 0x2c
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	2414      	movs	r4, #20
 8001732:	193b      	adds	r3, r7, r4
 8001734:	0018      	movs	r0, r3
 8001736:	2314      	movs	r3, #20
 8001738:	001a      	movs	r2, r3
 800173a:	2100      	movs	r1, #0
 800173c:	f003 f914 	bl	8004968 <memset>
  if(huart->Instance==USART1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1d      	ldr	r2, [pc, #116]	@ (80017bc <HAL_UART_MspInit+0x94>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d133      	bne.n	80017b2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800174a:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <HAL_UART_MspInit+0x98>)
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <HAL_UART_MspInit+0x98>)
 8001750:	2180      	movs	r1, #128	@ 0x80
 8001752:	01c9      	lsls	r1, r1, #7
 8001754:	430a      	orrs	r2, r1
 8001756:	619a      	str	r2, [r3, #24]
 8001758:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_UART_MspInit+0x98>)
 800175a:	699a      	ldr	r2, [r3, #24]
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	01db      	lsls	r3, r3, #7
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_UART_MspInit+0x98>)
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_UART_MspInit+0x98>)
 800176c:	2180      	movs	r1, #128	@ 0x80
 800176e:	0289      	lsls	r1, r1, #10
 8001770:	430a      	orrs	r2, r1
 8001772:	615a      	str	r2, [r3, #20]
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_UART_MspInit+0x98>)
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	029b      	lsls	r3, r3, #10
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001782:	193b      	adds	r3, r7, r4
 8001784:	22c0      	movs	r2, #192	@ 0xc0
 8001786:	00d2      	lsls	r2, r2, #3
 8001788:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	0021      	movs	r1, r4
 800178c:	187b      	adds	r3, r7, r1
 800178e:	2202      	movs	r2, #2
 8001790:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	187b      	adds	r3, r7, r1
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001798:	187b      	adds	r3, r7, r1
 800179a:	2203      	movs	r2, #3
 800179c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	2201      	movs	r2, #1
 80017a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	187a      	adds	r2, r7, r1
 80017a6:	2390      	movs	r3, #144	@ 0x90
 80017a8:	05db      	lsls	r3, r3, #23
 80017aa:	0011      	movs	r1, r2
 80017ac:	0018      	movs	r0, r3
 80017ae:	f000 fff9 	bl	80027a4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b00b      	add	sp, #44	@ 0x2c
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40021000 	.word	0x40021000

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c8:	46c0      	nop			@ (mov r8, r8)
 80017ca:	e7fd      	b.n	80017c8 <NMI_Handler+0x4>

080017cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	e7fd      	b.n	80017d0 <HardFault_Handler+0x4>

080017d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017d8:	46c0      	nop			@ (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 fee6 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	@ (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	18d3      	adds	r3, r2, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f003 f8a6 	bl	8004978 <__errno>
 800182c:	0003      	movs	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	2301      	movs	r3, #1
 8001834:	425b      	negs	r3, r3
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	@ (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	@ (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	18d2      	adds	r2, r2, r3
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <_sbrk+0x64>)
 8001848:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b006      	add	sp, #24
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20002000 	.word	0x20002000
 8001858:	00000400 	.word	0x00000400
 800185c:	20000164 	.word	0x20000164
 8001860:	200004c0 	.word	0x200004c0

08001864 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001868:	46c0      	nop			@ (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001870:	480d      	ldr	r0, [pc, #52]	@ (80018a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001872:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8001874:	f7ff fff6 	bl	8001864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <LoopForever+0x6>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	@ (80018b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <LoopForever+0xe>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	@ (80018bc <LoopForever+0x16>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800189e:	f003 f871 	bl	8004984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018a2:	f7ff fd29 	bl	80012f8 <main>

080018a6 <LoopForever>:

LoopForever:
    b LoopForever
 80018a6:	e7fe      	b.n	80018a6 <LoopForever>
  ldr   r0, =_estack
 80018a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80018b4:	08005af0 	.word	0x08005af0
  ldr r2, =_sbss
 80018b8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80018bc:	200004c0 	.word	0x200004c0

080018c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC1_COMP_IRQHandler>

080018c2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af04      	add	r7, sp, #16
 80018d2:	0002      	movs	r2, r0
 80018d4:	1dfb      	adds	r3, r7, #7
 80018d6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80018d8:	4808      	ldr	r0, [pc, #32]	@ (80018fc <ssd1306_WriteCommand+0x30>)
 80018da:	2301      	movs	r3, #1
 80018dc:	425b      	negs	r3, r3
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	2301      	movs	r3, #1
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	1dfb      	adds	r3, r7, #7
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2301      	movs	r3, #1
 80018ea:	2200      	movs	r2, #0
 80018ec:	2178      	movs	r1, #120	@ 0x78
 80018ee:	f001 f9a9 	bl	8002c44 <HAL_I2C_Mem_Write>
}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b002      	add	sp, #8
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	20000080 	.word	0x20000080

08001900 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af04      	add	r7, sp, #16
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4808      	ldr	r0, [pc, #32]	@ (8001930 <ssd1306_WriteData+0x30>)
 8001910:	2201      	movs	r2, #1
 8001912:	4252      	negs	r2, r2
 8001914:	9202      	str	r2, [sp, #8]
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2301      	movs	r3, #1
 800191e:	2240      	movs	r2, #64	@ 0x40
 8001920:	2178      	movs	r1, #120	@ 0x78
 8001922:	f001 f98f 	bl	8002c44 <HAL_I2C_Mem_Write>
}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b002      	add	sp, #8
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	20000080 	.word	0x20000080

08001934 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001938:	f7ff ffc3 	bl	80018c2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800193c:	2064      	movs	r0, #100	@ 0x64
 800193e:	f000 fe59 	bl	80025f4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001942:	2000      	movs	r0, #0
 8001944:	f000 fab0 	bl	8001ea8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001948:	2020      	movs	r0, #32
 800194a:	f7ff ffbf 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff ffbc 	bl	80018cc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001954:	20b0      	movs	r0, #176	@ 0xb0
 8001956:	f7ff ffb9 	bl	80018cc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800195a:	20c8      	movs	r0, #200	@ 0xc8
 800195c:	f7ff ffb6 	bl	80018cc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff ffb3 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001966:	2010      	movs	r0, #16
 8001968:	f7ff ffb0 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800196c:	2040      	movs	r0, #64	@ 0x40
 800196e:	f7ff ffad 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001972:	20ff      	movs	r0, #255	@ 0xff
 8001974:	f000 fa7f 	bl	8001e76 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001978:	20a1      	movs	r0, #161	@ 0xa1
 800197a:	f7ff ffa7 	bl	80018cc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800197e:	20a6      	movs	r0, #166	@ 0xa6
 8001980:	f7ff ffa4 	bl	80018cc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001984:	20a8      	movs	r0, #168	@ 0xa8
 8001986:	f7ff ffa1 	bl	80018cc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800198a:	201f      	movs	r0, #31
 800198c:	f7ff ff9e 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001990:	20a4      	movs	r0, #164	@ 0xa4
 8001992:	f7ff ff9b 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001996:	20d3      	movs	r0, #211	@ 0xd3
 8001998:	f7ff ff98 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff ff95 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80019a2:	20d5      	movs	r0, #213	@ 0xd5
 80019a4:	f7ff ff92 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019a8:	20f0      	movs	r0, #240	@ 0xf0
 80019aa:	f7ff ff8f 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019ae:	20d9      	movs	r0, #217	@ 0xd9
 80019b0:	f7ff ff8c 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019b4:	2022      	movs	r0, #34	@ 0x22
 80019b6:	f7ff ff89 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019ba:	20da      	movs	r0, #218	@ 0xda
 80019bc:	f7ff ff86 	bl	80018cc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80019c0:	2002      	movs	r0, #2
 80019c2:	f7ff ff83 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80019c6:	20db      	movs	r0, #219	@ 0xdb
 80019c8:	f7ff ff80 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80019cc:	2020      	movs	r0, #32
 80019ce:	f7ff ff7d 	bl	80018cc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80019d2:	208d      	movs	r0, #141	@ 0x8d
 80019d4:	f7ff ff7a 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80019d8:	2014      	movs	r0, #20
 80019da:	f7ff ff77 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 fa62 	bl	8001ea8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f000 f811 	bl	8001a0c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80019ea:	f000 f829 	bl	8001a40 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <ssd1306_Init+0xd4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80019f4:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <ssd1306_Init+0xd4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80019fa:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <ssd1306_Init+0xd4>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	711a      	strb	r2, [r3, #4]
}
 8001a00:	46c0      	nop			@ (mov r8, r8)
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	20000368 	.word	0x20000368

08001a0c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	0002      	movs	r2, r0
 8001a14:	1dfb      	adds	r3, r7, #7
 8001a16:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <ssd1306_Fill+0x18>
 8001a20:	2300      	movs	r3, #0
 8001a22:	e000      	b.n	8001a26 <ssd1306_Fill+0x1a>
 8001a24:	23ff      	movs	r3, #255	@ 0xff
 8001a26:	2280      	movs	r2, #128	@ 0x80
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4804      	ldr	r0, [pc, #16]	@ (8001a3c <ssd1306_Fill+0x30>)
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	f002 ff9b 	bl	8004968 <memset>
}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	20000168 	.word	0x20000168

08001a40 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a46:	1dfb      	adds	r3, r7, #7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e01a      	b.n	8001a84 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	3b50      	subs	r3, #80	@ 0x50
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7ff ff38 	bl	80018cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff ff35 	bl	80018cc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a62:	2010      	movs	r0, #16
 8001a64:	f7ff ff32 	bl	80018cc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	01da      	lsls	r2, r3, #7
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <ssd1306_UpdateScreen+0x58>)
 8001a70:	18d3      	adds	r3, r2, r3
 8001a72:	2180      	movs	r1, #128	@ 0x80
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff ff43 	bl	8001900 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	3201      	adds	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	1dfb      	adds	r3, r7, #7
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d9e0      	bls.n	8001a4e <ssd1306_UpdateScreen+0xe>
    }
}
 8001a8c:	46c0      	nop			@ (mov r8, r8)
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b002      	add	sp, #8
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	20000168 	.word	0x20000168

08001a9c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	0004      	movs	r4, r0
 8001aa4:	0008      	movs	r0, r1
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	1dfb      	adds	r3, r7, #7
 8001aaa:	1c22      	adds	r2, r4, #0
 8001aac:	701a      	strb	r2, [r3, #0]
 8001aae:	1dbb      	adds	r3, r7, #6
 8001ab0:	1c02      	adds	r2, r0, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	1d7b      	adds	r3, r7, #5
 8001ab6:	1c0a      	adds	r2, r1, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001aba:	1dfb      	adds	r3, r7, #7
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db47      	blt.n	8001b54 <ssd1306_DrawPixel+0xb8>
 8001ac4:	1dbb      	adds	r3, r7, #6
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b1f      	cmp	r3, #31
 8001aca:	d843      	bhi.n	8001b54 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001acc:	1d7b      	adds	r3, r7, #5
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d11e      	bne.n	8001b12 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	1dbb      	adds	r3, r7, #6
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	08db      	lsrs	r3, r3, #3
 8001ade:	b2d8      	uxtb	r0, r3
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	01db      	lsls	r3, r3, #7
 8001ae4:	18d3      	adds	r3, r2, r3
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <ssd1306_DrawPixel+0xc0>)
 8001ae8:	5cd3      	ldrb	r3, [r2, r3]
 8001aea:	b25a      	sxtb	r2, r3
 8001aec:	1dbb      	adds	r3, r7, #6
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2107      	movs	r1, #7
 8001af2:	400b      	ands	r3, r1
 8001af4:	2101      	movs	r1, #1
 8001af6:	4099      	lsls	r1, r3
 8001af8:	000b      	movs	r3, r1
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b259      	sxtb	r1, r3
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	781a      	ldrb	r2, [r3, #0]
 8001b04:	0003      	movs	r3, r0
 8001b06:	01db      	lsls	r3, r3, #7
 8001b08:	18d3      	adds	r3, r2, r3
 8001b0a:	b2c9      	uxtb	r1, r1
 8001b0c:	4a13      	ldr	r2, [pc, #76]	@ (8001b5c <ssd1306_DrawPixel+0xc0>)
 8001b0e:	54d1      	strb	r1, [r2, r3]
 8001b10:	e021      	b.n	8001b56 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781a      	ldrb	r2, [r3, #0]
 8001b16:	1dbb      	adds	r3, r7, #6
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	08db      	lsrs	r3, r3, #3
 8001b1c:	b2d8      	uxtb	r0, r3
 8001b1e:	0003      	movs	r3, r0
 8001b20:	01db      	lsls	r3, r3, #7
 8001b22:	18d3      	adds	r3, r2, r3
 8001b24:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <ssd1306_DrawPixel+0xc0>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	b25b      	sxtb	r3, r3
 8001b2a:	1dba      	adds	r2, r7, #6
 8001b2c:	7812      	ldrb	r2, [r2, #0]
 8001b2e:	2107      	movs	r1, #7
 8001b30:	400a      	ands	r2, r1
 8001b32:	2101      	movs	r1, #1
 8001b34:	4091      	lsls	r1, r2
 8001b36:	000a      	movs	r2, r1
 8001b38:	b252      	sxtb	r2, r2
 8001b3a:	43d2      	mvns	r2, r2
 8001b3c:	b252      	sxtb	r2, r2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	b259      	sxtb	r1, r3
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	0003      	movs	r3, r0
 8001b48:	01db      	lsls	r3, r3, #7
 8001b4a:	18d3      	adds	r3, r2, r3
 8001b4c:	b2c9      	uxtb	r1, r1
 8001b4e:	4a03      	ldr	r2, [pc, #12]	@ (8001b5c <ssd1306_DrawPixel+0xc0>)
 8001b50:	54d1      	strb	r1, [r2, r3]
 8001b52:	e000      	b.n	8001b56 <ssd1306_DrawPixel+0xba>
        return;
 8001b54:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b003      	add	sp, #12
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	20000168 	.word	0x20000168

08001b60 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b089      	sub	sp, #36	@ 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	0004      	movs	r4, r0
 8001b68:	0038      	movs	r0, r7
 8001b6a:	6001      	str	r1, [r0, #0]
 8001b6c:	6042      	str	r2, [r0, #4]
 8001b6e:	6083      	str	r3, [r0, #8]
 8001b70:	210f      	movs	r1, #15
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	1c22      	adds	r2, r4, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b78:	000a      	movs	r2, r1
 8001b7a:	18bb      	adds	r3, r7, r2
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b1f      	cmp	r3, #31
 8001b80:	d903      	bls.n	8001b8a <ssd1306_WriteChar+0x2a>
 8001b82:	18bb      	adds	r3, r7, r2
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b88:	d901      	bls.n	8001b8e <ssd1306_WriteChar+0x2e>
        return 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e08b      	b.n	8001ca6 <ssd1306_WriteChar+0x146>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001b8e:	003b      	movs	r3, r7
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <ssd1306_WriteChar+0x48>
 8001b96:	003b      	movs	r3, r7
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	3b20      	subs	r3, #32
 8001ba2:	18d3      	adds	r3, r2, r3
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	e001      	b.n	8001bac <ssd1306_WriteChar+0x4c>
 8001ba8:	003b      	movs	r3, r7
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2117      	movs	r1, #23
 8001bae:	187a      	adds	r2, r7, r1
 8001bb0:	7013      	strb	r3, [r2, #0]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8001cb0 <ssd1306_WriteChar+0x150>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	001a      	movs	r2, r3
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	2b80      	cmp	r3, #128	@ 0x80
 8001bc0:	dc07      	bgt.n	8001bd2 <ssd1306_WriteChar+0x72>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb0 <ssd1306_WriteChar+0x150>)
 8001bc4:	885b      	ldrh	r3, [r3, #2]
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	003b      	movs	r3, r7
 8001bca:	785b      	ldrb	r3, [r3, #1]
 8001bcc:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	dd01      	ble.n	8001bd6 <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        return 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e067      	b.n	8001ca6 <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e051      	b.n	8001c80 <ssd1306_WriteChar+0x120>
        b = Font.data[(ch - 32) * Font.height + i];
 8001bdc:	003b      	movs	r3, r7
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	230f      	movs	r3, #15
 8001be2:	18fb      	adds	r3, r7, r3
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	3b20      	subs	r3, #32
 8001be8:	0039      	movs	r1, r7
 8001bea:	7849      	ldrb	r1, [r1, #1]
 8001bec:	434b      	muls	r3, r1
 8001bee:	0019      	movs	r1, r3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	18cb      	adds	r3, r1, r3
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	18d3      	adds	r3, r2, r3
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	e035      	b.n	8001c6e <ssd1306_WriteChar+0x10e>
            if((b << j) & 0x8000)  {
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	409a      	lsls	r2, r3
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d014      	beq.n	8001c3a <ssd1306_WriteChar+0xda>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c10:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <ssd1306_WriteChar+0x150>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	18d3      	adds	r3, r2, r3
 8001c1c:	b2d8      	uxtb	r0, r3
 8001c1e:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <ssd1306_WriteChar+0x150>)
 8001c20:	885b      	ldrh	r3, [r3, #2]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	18d3      	adds	r3, r2, r3
 8001c2a:	b2d9      	uxtb	r1, r3
 8001c2c:	2330      	movs	r3, #48	@ 0x30
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	001a      	movs	r2, r3
 8001c34:	f7ff ff32 	bl	8001a9c <ssd1306_DrawPixel>
 8001c38:	e016      	b.n	8001c68 <ssd1306_WriteChar+0x108>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <ssd1306_WriteChar+0x150>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	18d3      	adds	r3, r2, r3
 8001c46:	b2d8      	uxtb	r0, r3
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <ssd1306_WriteChar+0x150>)
 8001c4a:	885b      	ldrh	r3, [r3, #2]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	18d3      	adds	r3, r2, r3
 8001c54:	b2d9      	uxtb	r1, r3
 8001c56:	2330      	movs	r3, #48	@ 0x30
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	425a      	negs	r2, r3
 8001c5e:	4153      	adcs	r3, r2
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	001a      	movs	r2, r3
 8001c64:	f7ff ff1a 	bl	8001a9c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	2317      	movs	r3, #23
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d3c3      	bcc.n	8001c02 <ssd1306_WriteChar+0xa2>
    for(i = 0; i < Font.height; i++) {
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	003b      	movs	r3, r7
 8001c82:	785b      	ldrb	r3, [r3, #1]
 8001c84:	001a      	movs	r2, r3
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d3a7      	bcc.n	8001bdc <ssd1306_WriteChar+0x7c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <ssd1306_WriteChar+0x150>)
 8001c8e:	881a      	ldrh	r2, [r3, #0]
 8001c90:	2317      	movs	r3, #23
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	18d3      	adds	r3, r2, r3
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <ssd1306_WriteChar+0x150>)
 8001c9e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	781b      	ldrb	r3, [r3, #0]
}
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b009      	add	sp, #36	@ 0x24
 8001cac:	bd90      	pop	{r4, r7, pc}
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	20000368 	.word	0x20000368

08001cb4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	0038      	movs	r0, r7
 8001cbe:	6001      	str	r1, [r0, #0]
 8001cc0:	6042      	str	r2, [r0, #4]
 8001cc2:	6083      	str	r3, [r0, #8]
    while (*str) {
 8001cc4:	e017      	b.n	8001cf6 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	7818      	ldrb	r0, [r3, #0]
 8001cca:	003b      	movs	r3, r7
 8001ccc:	2218      	movs	r2, #24
 8001cce:	18ba      	adds	r2, r7, r2
 8001cd0:	7812      	ldrb	r2, [r2, #0]
 8001cd2:	9200      	str	r2, [sp, #0]
 8001cd4:	6819      	ldr	r1, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f7ff ff41 	bl	8001b60 <ssd1306_WriteChar>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d002      	beq.n	8001cf0 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	e008      	b.n	8001d02 <ssd1306_WriteString+0x4e>
        }
        str++;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1e3      	bne.n	8001cc6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	781b      	ldrb	r3, [r3, #0]
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b004      	add	sp, #16
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	0002      	movs	r2, r0
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	1c0a      	adds	r2, r1, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <ssd1306_SetCursor+0x30>)
 8001d26:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d28:	1dbb      	adds	r3, r7, #6
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <ssd1306_SetCursor+0x30>)
 8001d30:	805a      	strh	r2, [r3, #2]
}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	20000368 	.word	0x20000368

08001d40 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	0005      	movs	r5, r0
 8001d48:	000c      	movs	r4, r1
 8001d4a:	0010      	movs	r0, r2
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	1c2a      	adds	r2, r5, #0
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	1dbb      	adds	r3, r7, #6
 8001d56:	1c22      	adds	r2, r4, #0
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	1d7b      	adds	r3, r7, #5
 8001d5c:	1c02      	adds	r2, r0, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	1c0a      	adds	r2, r1, #0
 8001d64:	701a      	strb	r2, [r3, #0]
    int32_t x = -par_r;
 8001d66:	1d7b      	adds	r3, r7, #5
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8001d72:	1d7b      	adds	r3, r7, #5
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2201      	movs	r2, #1
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	b25b      	sxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db72      	blt.n	8001e6e <ssd1306_DrawCircle+0x12e>
 8001d88:	1dbb      	adds	r3, r7, #6
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b1f      	cmp	r3, #31
 8001d8e:	d86e      	bhi.n	8001e6e <ssd1306_DrawCircle+0x12e>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	1dfa      	adds	r2, r7, #7
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	b2d8      	uxtb	r0, r3
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	1dbb      	adds	r3, r7, #6
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	18d3      	adds	r3, r2, r3
 8001da6:	b2d9      	uxtb	r1, r3
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	001a      	movs	r2, r3
 8001dae:	f7ff fe75 	bl	8001a9c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	18d3      	adds	r3, r2, r3
 8001dbc:	b2d8      	uxtb	r0, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	1dbb      	adds	r3, r7, #6
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	18d3      	adds	r3, r2, r3
 8001dc8:	b2d9      	uxtb	r1, r3
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	001a      	movs	r2, r3
 8001dd0:	f7ff fe64 	bl	8001a9c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	1dfb      	adds	r3, r7, #7
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	18d3      	adds	r3, r2, r3
 8001dde:	b2d8      	uxtb	r0, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	1dba      	adds	r2, r7, #6
 8001de6:	7812      	ldrb	r2, [r2, #0]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	b2d9      	uxtb	r1, r3
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	001a      	movs	r2, r3
 8001df2:	f7ff fe53 	bl	8001a9c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	1dfa      	adds	r2, r7, #7
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	b2d8      	uxtb	r0, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	1dba      	adds	r2, r7, #6
 8001e08:	7812      	ldrb	r2, [r2, #0]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	001a      	movs	r2, r3
 8001e14:	f7ff fe42 	bl	8001a9c <ssd1306_DrawPixel>
        e2 = err;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dc13      	bgt.n	8001e4c <ssd1306_DrawCircle+0x10c>
            y++;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	3301      	adds	r3, #1
 8001e28:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	3301      	adds	r3, #1
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	18d3      	adds	r3, r2, r3
 8001e34:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	425b      	negs	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d105      	bne.n	8001e4c <ssd1306_DrawCircle+0x10c>
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dc01      	bgt.n	8001e4c <ssd1306_DrawCircle+0x10c>
                e2 = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dd08      	ble.n	8001e66 <ssd1306_DrawCircle+0x126>
            x++;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	3301      	adds	r3, #1
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	18d3      	adds	r3, r2, r3
 8001e64:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	dd91      	ble.n	8001d90 <ssd1306_DrawCircle+0x50>

    return;
 8001e6c:	e000      	b.n	8001e70 <ssd1306_DrawCircle+0x130>
        return;
 8001e6e:	46c0      	nop			@ (mov r8, r8)
}
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b006      	add	sp, #24
 8001e74:	bdb0      	pop	{r4, r5, r7, pc}

08001e76 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	1dfb      	adds	r3, r7, #7
 8001e80:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e82:	210f      	movs	r1, #15
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	2281      	movs	r2, #129	@ 0x81
 8001e88:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e8a:	187b      	adds	r3, r7, r1
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7ff fd1c 	bl	80018cc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff fd17 	bl	80018cc <ssd1306_WriteCommand>
}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	0002      	movs	r2, r0
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001eb4:	1dfb      	adds	r3, r7, #7
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	22af      	movs	r2, #175	@ 0xaf
 8001ec2:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <ssd1306_SetDisplayOn+0x48>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	715a      	strb	r2, [r3, #5]
 8001eca:	e006      	b.n	8001eda <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8001ecc:	230f      	movs	r3, #15
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	22ae      	movs	r2, #174	@ 0xae
 8001ed2:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <ssd1306_SetDisplayOn+0x48>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001eda:	230f      	movs	r3, #15
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fcf3 	bl	80018cc <ssd1306_WriteCommand>
}
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b004      	add	sp, #16
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	20000368 	.word	0x20000368

08001ef4 <si5351_Init>:
 * Initializes Si5351. Call this function before doing anything else.
 * `Correction` is the difference of actual frequency and desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <si5351_Init+0x74>)
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 8001f02:	21ff      	movs	r1, #255	@ 0xff
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 fa61 	bl	80023cc <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 8001f0a:	2180      	movs	r1, #128	@ 0x80
 8001f0c:	2010      	movs	r0, #16
 8001f0e:	f000 fa5d 	bl	80023cc <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 8001f12:	2180      	movs	r1, #128	@ 0x80
 8001f14:	2011      	movs	r0, #17
 8001f16:	f000 fa59 	bl	80023cc <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 8001f1a:	2180      	movs	r1, #128	@ 0x80
 8001f1c:	2012      	movs	r0, #18
 8001f1e:	f000 fa55 	bl	80023cc <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 8001f22:	2180      	movs	r1, #128	@ 0x80
 8001f24:	2013      	movs	r0, #19
 8001f26:	f000 fa51 	bl	80023cc <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 8001f2a:	2180      	movs	r1, #128	@ 0x80
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	f000 fa4d 	bl	80023cc <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 8001f32:	2180      	movs	r1, #128	@ 0x80
 8001f34:	2015      	movs	r0, #21
 8001f36:	f000 fa49 	bl	80023cc <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 8001f3a:	2180      	movs	r1, #128	@ 0x80
 8001f3c:	2016      	movs	r0, #22
 8001f3e:	f000 fa45 	bl	80023cc <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 8001f42:	2180      	movs	r1, #128	@ 0x80
 8001f44:	2017      	movs	r0, #23
 8001f46:	f000 fa41 	bl	80023cc <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	22c0      	movs	r2, #192	@ 0xc0
 8001f50:	701a      	strb	r2, [r3, #0]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 8001f52:	187b      	adds	r3, r7, r1
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	0019      	movs	r1, r3
 8001f58:	20b7      	movs	r0, #183	@ 0xb7
 8001f5a:	f000 fa37 	bl	80023cc <si5351_write>
}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b004      	add	sp, #16
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	20000370 	.word	0x20000370

08001f6c <si5351_SetupPLL>:

// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf) {
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b08d      	sub	sp, #52	@ 0x34
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	0002      	movs	r2, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	701a      	strb	r2, [r3, #0]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t num = conf->num;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num)/denom - 512;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	01dc      	lsls	r4, r3, #7
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	01db      	lsls	r3, r3, #7
 8001f94:	69f9      	ldr	r1, [r7, #28]
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7fe f94a 	bl	8000230 <__divsi3>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	18e3      	adds	r3, r4, r3
 8001fa0:	4a15      	ldr	r2, [pc, #84]	@ (8001ff8 <si5351_SetupPLL+0x8c>)
 8001fa2:	4694      	mov	ip, r2
 8001fa4:	4463      	add	r3, ip
 8001fa6:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	01db      	lsls	r3, r3, #7
 8001fac:	69f9      	ldr	r1, [r7, #28]
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7fe fa24 	bl	80003fc <__aeabi_idivmod>
 8001fb4:	000b      	movs	r3, r1
 8001fb6:	617b      	str	r3, [r7, #20]
    P3 = denom;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <si5351_SetupPLL+0x5c>
 8001fc4:	221a      	movs	r2, #26
 8001fc6:	e000      	b.n	8001fca <si5351_SetupPLL+0x5e>
 8001fc8:	2222      	movs	r2, #34	@ 0x22
 8001fca:	200f      	movs	r0, #15
 8001fcc:	183b      	adds	r3, r7, r0
 8001fce:	701a      	strb	r2, [r3, #0]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 8001fd0:	693c      	ldr	r4, [r7, #16]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	69b9      	ldr	r1, [r7, #24]
 8001fd6:	183b      	adds	r3, r7, r0
 8001fd8:	7818      	ldrb	r0, [r3, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	0023      	movs	r3, r4
 8001fe4:	f000 fa1a 	bl	800241c <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1<<7) | (1<<5) );
 8001fe8:	21a0      	movs	r1, #160	@ 0xa0
 8001fea:	20b1      	movs	r0, #177	@ 0xb1
 8001fec:	f000 f9ee 	bl	80023cc <si5351_write>
}
 8001ff0:	46c0      	nop			@ (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b00b      	add	sp, #44	@ 0x2c
 8001ff6:	bd90      	pop	{r4, r7, pc}
 8001ff8:	fffffe00 	.word	0xfffffe00

08001ffc <si5351_SetupOutput>:

// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset) {
 8001ffc:	b5b0      	push	{r4, r5, r7, lr}
 8001ffe:	b08c      	sub	sp, #48	@ 0x30
 8002000:	af02      	add	r7, sp, #8
 8002002:	0004      	movs	r4, r0
 8002004:	0008      	movs	r0, r1
 8002006:	0011      	movs	r1, r2
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	1c22      	adds	r2, r4, #0
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	1c02      	adds	r2, r0, #0
 8002014:	701a      	strb	r2, [r3, #0]
 8002016:	1d7b      	adds	r3, r7, #5
 8002018:	1c0a      	adds	r2, r1, #0
 800201a:	701a      	strb	r2, [r3, #0]
    int32_t div = conf->div;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 800202e:	2327      	movs	r3, #39	@ 0x27
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
    int32_t P1, P2, P3;

    if(output > 2) {
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <si5351_SetupOutput+0x46>
        return 1;
 800203e:	2301      	movs	r3, #1
 8002040:	e0bc      	b.n	80021bc <si5351_SetupOutput+0x1c0>
    }

    if((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <si5351_SetupOutput+0x64>
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b07      	cmp	r3, #7
 800204e:	dd05      	ble.n	800205c <si5351_SetupOutput+0x60>
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b08      	cmp	r3, #8
 8002054:	d104      	bne.n	8002060 <si5351_SetupOutput+0x64>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <si5351_SetupOutput+0x64>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 800205c:	2302      	movs	r3, #2
 800205e:	e0ad      	b.n	80021bc <si5351_SetupOutput+0x1c0>
    }

    if(div == 4) {
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b04      	cmp	r3, #4
 8002064:	d10a      	bne.n	800207c <si5351_SetupOutput+0x80>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
        P2 = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 8002072:	2327      	movs	r3, #39	@ 0x27
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2203      	movs	r2, #3
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e017      	b.n	80020ac <si5351_SetupOutput+0xb0>
    } else {
        P1 = 128 * div + ((128 * num)/denom) - 512;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	01dc      	lsls	r4, r3, #7
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	01db      	lsls	r3, r3, #7
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	0018      	movs	r0, r3
 8002088:	f7fe f8d2 	bl	8000230 <__divsi3>
 800208c:	0003      	movs	r3, r0
 800208e:	18e3      	adds	r3, r4, r3
 8002090:	4a4c      	ldr	r2, [pc, #304]	@ (80021c4 <si5351_SetupOutput+0x1c8>)
 8002092:	4694      	mov	ip, r2
 8002094:	4463      	add	r3, ip
 8002096:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	01db      	lsls	r3, r3, #7
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	0018      	movs	r0, r3
 80020a0:	f7fe f9ac 	bl	80003fc <__aeabi_idivmod>
 80020a4:	000b      	movs	r3, r1
 80020a6:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 80020ac:	2317      	movs	r3, #23
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
    uint8_t phaseOffsetRegister = 0;
 80020b4:	2316      	movs	r3, #22
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
    uint8_t clkControlRegister = 0;
 80020bc:	2315      	movs	r3, #21
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
    switch (output) {
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d01f      	beq.n	800210c <si5351_SetupOutput+0x110>
 80020cc:	dc2b      	bgt.n	8002126 <si5351_SetupOutput+0x12a>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <si5351_SetupOutput+0xdc>
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d00d      	beq.n	80020f2 <si5351_SetupOutput+0xf6>
 80020d6:	e026      	b.n	8002126 <si5351_SetupOutput+0x12a>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 80020d8:	2317      	movs	r3, #23
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	222a      	movs	r2, #42	@ 0x2a
 80020de:	701a      	strb	r2, [r3, #0]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 80020e0:	2316      	movs	r3, #22
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	22a5      	movs	r2, #165	@ 0xa5
 80020e6:	701a      	strb	r2, [r3, #0]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 80020e8:	2315      	movs	r3, #21
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	2210      	movs	r2, #16
 80020ee:	701a      	strb	r2, [r3, #0]
        break;
 80020f0:	e019      	b.n	8002126 <si5351_SetupOutput+0x12a>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 80020f2:	2317      	movs	r3, #23
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2232      	movs	r2, #50	@ 0x32
 80020f8:	701a      	strb	r2, [r3, #0]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 80020fa:	2316      	movs	r3, #22
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	22a6      	movs	r2, #166	@ 0xa6
 8002100:	701a      	strb	r2, [r3, #0]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 8002102:	2315      	movs	r3, #21
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	2211      	movs	r2, #17
 8002108:	701a      	strb	r2, [r3, #0]
        break;
 800210a:	e00c      	b.n	8002126 <si5351_SetupOutput+0x12a>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 800210c:	2317      	movs	r3, #23
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	223a      	movs	r2, #58	@ 0x3a
 8002112:	701a      	strb	r2, [r3, #0]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 8002114:	2316      	movs	r3, #22
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	22a7      	movs	r2, #167	@ 0xa7
 800211a:	701a      	strb	r2, [r3, #0]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 800211c:	2315      	movs	r3, #21
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2212      	movs	r2, #18
 8002122:	701a      	strb	r2, [r3, #0]
        break;
 8002124:	46c0      	nop			@ (mov r8, r8)
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 8002126:	2014      	movs	r0, #20
 8002128:	183b      	adds	r3, r7, r0
 800212a:	1d7a      	adds	r2, r7, #5
 800212c:	7812      	ldrb	r2, [r2, #0]
 800212e:	210c      	movs	r1, #12
 8002130:	430a      	orrs	r2, r1
 8002132:	701a      	strb	r2, [r3, #0]
    if(pllSource == SI5351_PLL_B) {
 8002134:	1dbb      	adds	r3, r7, #6
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <si5351_SetupOutput+0x14c>
        clkControl |= (1 << 5); // Uses PLLB
 800213c:	183b      	adds	r3, r7, r0
 800213e:	183a      	adds	r2, r7, r0
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	2120      	movs	r1, #32
 8002144:	430a      	orrs	r2, r1
 8002146:	701a      	strb	r2, [r3, #0]
    }

    if((conf->allowIntegerMode) && ((num == 0)||(div == 4))) {
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00c      	beq.n	800216a <si5351_SetupOutput+0x16e>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <si5351_SetupOutput+0x160>
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d106      	bne.n	800216a <si5351_SetupOutput+0x16e>
        // use integer mode
        clkControl |= (1 << 6);
 800215c:	2214      	movs	r2, #20
 800215e:	18bb      	adds	r3, r7, r2
 8002160:	18ba      	adds	r2, r7, r2
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	2140      	movs	r1, #64	@ 0x40
 8002166:	430a      	orrs	r2, r1
 8002168:	701a      	strb	r2, [r3, #0]
    }

    si5351_write(clkControlRegister, clkControl);
 800216a:	2314      	movs	r3, #20
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	2315      	movs	r3, #21
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	0011      	movs	r1, r2
 8002178:	0018      	movs	r0, r3
 800217a:	f000 f927 	bl	80023cc <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	7c1b      	ldrb	r3, [r3, #16]
 8002182:	69bd      	ldr	r5, [r7, #24]
 8002184:	69fc      	ldr	r4, [r7, #28]
 8002186:	6a39      	ldr	r1, [r7, #32]
 8002188:	2217      	movs	r2, #23
 800218a:	18ba      	adds	r2, r7, r2
 800218c:	7810      	ldrb	r0, [r2, #0]
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	2327      	movs	r3, #39	@ 0x27
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	002b      	movs	r3, r5
 800219a:	0022      	movs	r2, r4
 800219c:	f000 f93e 	bl	800241c <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 80021a0:	2338      	movs	r3, #56	@ 0x38
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	227f      	movs	r2, #127	@ 0x7f
 80021a8:	4013      	ands	r3, r2
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	2316      	movs	r3, #22
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	0011      	movs	r1, r2
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f909 	bl	80023cc <si5351_write>

    return 0;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b00a      	add	sp, #40	@ 0x28
 80021c2:	bdb0      	pop	{r4, r5, r7, pc}
 80021c4:	fffffe00 	.word	0xfffffe00

080021c8 <si5351_Calc>:

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf) {
 80021c8:	b5b0      	push	{r4, r5, r7, lr}
 80021ca:	b08e      	sub	sp, #56	@ 0x38
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
    if(Fclk < 8000) Fclk = 8000;
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	23fa      	movs	r3, #250	@ 0xfa
 80021d8:	015b      	lsls	r3, r3, #5
 80021da:	429a      	cmp	r2, r3
 80021dc:	da03      	bge.n	80021e6 <si5351_Calc+0x1e>
 80021de:	23fa      	movs	r3, #250	@ 0xfa
 80021e0:	015b      	lsls	r3, r3, #5
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	e005      	b.n	80021f2 <si5351_Calc+0x2a>
    else if(Fclk > 160000000) Fclk = 160000000;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a55      	ldr	r2, [pc, #340]	@ (8002340 <si5351_Calc+0x178>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	dd01      	ble.n	80021f2 <si5351_Calc+0x2a>
 80021ee:	4b54      	ldr	r3, [pc, #336]	@ (8002340 <si5351_Calc+0x178>)
 80021f0:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]

    if(Fclk < 1000000) {
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4a52      	ldr	r2, [pc, #328]	@ (8002344 <si5351_Calc+0x17c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	dc06      	bgt.n	800220e <si5351_Calc+0x46>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	019b      	lsls	r3, r3, #6
 8002204:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2206      	movs	r2, #6
 800220a:	741a      	strb	r2, [r3, #16]
 800220c:	e002      	b.n	8002214 <si5351_Calc+0x4c>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - (int32_t)((((double)Fclk)/100000000.0)*((double)si5351Correction));
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7fe ff31 	bl	800107c <__aeabi_i2d>
 800221a:	2200      	movs	r2, #0
 800221c:	4b4a      	ldr	r3, [pc, #296]	@ (8002348 <si5351_Calc+0x180>)
 800221e:	f7fe f8f3 	bl	8000408 <__aeabi_ddiv>
 8002222:	0002      	movs	r2, r0
 8002224:	000b      	movs	r3, r1
 8002226:	0014      	movs	r4, r2
 8002228:	001d      	movs	r5, r3
 800222a:	4b48      	ldr	r3, [pc, #288]	@ (800234c <si5351_Calc+0x184>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0018      	movs	r0, r3
 8002230:	f7fe ff24 	bl	800107c <__aeabi_i2d>
 8002234:	0002      	movs	r2, r0
 8002236:	000b      	movs	r3, r1
 8002238:	0020      	movs	r0, r4
 800223a:	0029      	movs	r1, r5
 800223c:	f7fe fbfc 	bl	8000a38 <__aeabi_dmul>
 8002240:	0002      	movs	r2, r0
 8002242:	000b      	movs	r3, r1
 8002244:	0010      	movs	r0, r2
 8002246:	0019      	movs	r1, r3
 8002248:	f7fe fedc 	bl	8001004 <__aeabi_d2iz>
 800224c:	0002      	movs	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1a9b      	subs	r3, r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 8002254:	4b3e      	ldr	r3, [pc, #248]	@ (8002350 <si5351_Calc+0x188>)
 8002256:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if(Fclk < 81000000) {
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4a3e      	ldr	r2, [pc, #248]	@ (8002354 <si5351_Calc+0x18c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	dc24      	bgt.n	80022aa <si5351_Calc+0xe2>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 8002260:	2324      	movs	r3, #36	@ 0x24
 8002262:	637b      	str	r3, [r7, #52]	@ 0x34
        b = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	633b      	str	r3, [r7, #48]	@ 0x30
        c = 1;
 8002268:	2301      	movs	r3, #1
 800226a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int32_t Fpll = 900000000;
 800226c:	4b3a      	ldr	r3, [pc, #232]	@ (8002358 <si5351_Calc+0x190>)
 800226e:	613b      	str	r3, [r7, #16]
        x = Fpll/Fclk;
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	6938      	ldr	r0, [r7, #16]
 8002274:	f7fd ffdc 	bl	8000230 <__divsi3>
 8002278:	0003      	movs	r3, r0
 800227a:	62bb      	str	r3, [r7, #40]	@ 0x28
        t = (Fclk >> 20) + 1;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	151b      	asrs	r3, r3, #20
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	0018      	movs	r0, r3
 800228a:	f7fe f8b7 	bl	80003fc <__aeabi_idivmod>
 800228e:	000b      	movs	r3, r1
 8002290:	6979      	ldr	r1, [r7, #20]
 8002292:	0018      	movs	r0, r3
 8002294:	f7fd ffcc 	bl	8000230 <__divsi3>
 8002298:	0003      	movs	r3, r0
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
        z = Fclk / t;
 800229c:	6979      	ldr	r1, [r7, #20]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f7fd ffc6 	bl	8000230 <__divsi3>
 80022a4:	0003      	movs	r3, r0
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	e033      	b.n	8002312 <si5351_Calc+0x14a>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if(Fclk >= 150000000) {
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4a2b      	ldr	r2, [pc, #172]	@ (800235c <si5351_Calc+0x194>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	dd02      	ble.n	80022b8 <si5351_Calc+0xf0>
            x = 4;
 80022b2:	2304      	movs	r3, #4
 80022b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022b6:	e008      	b.n	80022ca <si5351_Calc+0x102>
        } else if (Fclk >= 100000000) {
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4a29      	ldr	r2, [pc, #164]	@ (8002360 <si5351_Calc+0x198>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	dd02      	ble.n	80022c6 <si5351_Calc+0xfe>
            x = 6;
 80022c0:	2306      	movs	r3, #6
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022c4:	e001      	b.n	80022ca <si5351_Calc+0x102>
        } else {
            x = 8;
 80022c6:	2308      	movs	r3, #8
 80022c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        y = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
        z = 1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	623b      	str	r3, [r7, #32]
        
        int32_t numerator = x*Fclk;
 80022d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4353      	muls	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        a = numerator/Fxtal;
 80022da:	69f9      	ldr	r1, [r7, #28]
 80022dc:	69b8      	ldr	r0, [r7, #24]
 80022de:	f7fd ffa7 	bl	8000230 <__divsi3>
 80022e2:	0003      	movs	r3, r0
 80022e4:	637b      	str	r3, [r7, #52]	@ 0x34
        t = (Fxtal >> 20) + 1;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	151b      	asrs	r3, r3, #20
 80022ea:	3301      	adds	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	69f9      	ldr	r1, [r7, #28]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7fe f882 	bl	80003fc <__aeabi_idivmod>
 80022f8:	000b      	movs	r3, r1
 80022fa:	6979      	ldr	r1, [r7, #20]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7fd ff97 	bl	8000230 <__divsi3>
 8002302:	0003      	movs	r3, r0
 8002304:	633b      	str	r3, [r7, #48]	@ 0x30
        c = Fxtal / t;
 8002306:	6979      	ldr	r1, [r7, #20]
 8002308:	69f8      	ldr	r0, [r7, #28]
 800230a:	f7fd ff91 	bl	8000230 <__divsi3>
 800230e:	0003      	movs	r3, r0
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    pll_conf->mult = a;
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002316:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800231c:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002322:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002328:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800232e:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a3a      	ldr	r2, [r7, #32]
 8002334:	60da      	str	r2, [r3, #12]
}
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b00e      	add	sp, #56	@ 0x38
 800233c:	bdb0      	pop	{r4, r5, r7, pc}
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	09896800 	.word	0x09896800
 8002344:	000f423f 	.word	0x000f423f
 8002348:	4197d784 	.word	0x4197d784
 800234c:	20000370 	.word	0x20000370
 8002350:	017d7840 	.word	0x017d7840
 8002354:	04d3f63f 	.word	0x04d3f63f
 8002358:	35a4e900 	.word	0x35a4e900
 800235c:	08f0d17f 	.word	0x08f0d17f
 8002360:	05f5e0ff 	.word	0x05f5e0ff

08002364 <si5351_SetupCLK0>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}

// Setup CLK0 for given frequency and drive strength. Use PLLA.
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength) {
 8002364:	b5b0      	push	{r4, r5, r7, lr}
 8002366:	b08c      	sub	sp, #48	@ 0x30
 8002368:	af02      	add	r7, sp, #8
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	000a      	movs	r2, r1
 800236e:	1cfb      	adds	r3, r7, #3
 8002370:	701a      	strb	r2, [r3, #0]
	si5351PLLConfig_t pll_conf;
	si5351OutputConfig_t out_conf;

	si5351_Calc(Fclk, &pll_conf, &out_conf);
 8002372:	2408      	movs	r4, #8
 8002374:	193a      	adds	r2, r7, r4
 8002376:	251c      	movs	r5, #28
 8002378:	1979      	adds	r1, r7, r5
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0018      	movs	r0, r3
 800237e:	f7ff ff23 	bl	80021c8 <si5351_Calc>
	si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 8002382:	197b      	adds	r3, r7, r5
 8002384:	0019      	movs	r1, r3
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff fdf0 	bl	8001f6c <si5351_SetupPLL>
	si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 800238c:	1939      	adds	r1, r7, r4
 800238e:	1cfb      	adds	r3, r7, #3
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	2300      	movs	r3, #0
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	000b      	movs	r3, r1
 8002398:	2100      	movs	r1, #0
 800239a:	2000      	movs	r0, #0
 800239c:	f7ff fe2e 	bl	8001ffc <si5351_SetupOutput>
}
 80023a0:	46c0      	nop			@ (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b00a      	add	sp, #40	@ 0x28
 80023a6:	bdb0      	pop	{r4, r5, r7, pc}

080023a8 <si5351_EnableOutputs>:

// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	0002      	movs	r2, r0
 80023b0:	1dfb      	adds	r3, r7, #7
 80023b2:	701a      	strb	r2, [r3, #0]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	0019      	movs	r1, r3
 80023be:	2003      	movs	r0, #3
 80023c0:	f000 f804 	bl	80023cc <si5351_write>
}
 80023c4:	46c0      	nop			@ (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}

080023cc <si5351_write>:

// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af04      	add	r7, sp, #16
 80023d2:	0002      	movs	r2, r0
 80023d4:	1dfb      	adds	r3, r7, #7
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	1dbb      	adds	r3, r7, #6
 80023da:	1c0a      	adds	r2, r1, #0
 80023dc:	701a      	strb	r2, [r3, #0]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS<<1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	2301      	movs	r3, #1
 80023e2:	425b      	negs	r3, r3
 80023e4:	480c      	ldr	r0, [pc, #48]	@ (8002418 <si5351_write+0x4c>)
 80023e6:	2203      	movs	r2, #3
 80023e8:	21c0      	movs	r1, #192	@ 0xc0
 80023ea:	f000 fd59 	bl	8002ea0 <HAL_I2C_IsDeviceReady>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d1f6      	bne.n	80023e0 <si5351_write+0x14>

    HAL_I2C_Mem_Write(&I2C_HANDLE,                  // i2c handle
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4807      	ldr	r0, [pc, #28]	@ (8002418 <si5351_write+0x4c>)
 80023fa:	2301      	movs	r3, #1
 80023fc:	425b      	negs	r3, r3
 80023fe:	9302      	str	r3, [sp, #8]
 8002400:	2301      	movs	r3, #1
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	1dbb      	adds	r3, r7, #6
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2301      	movs	r3, #1
 800240a:	21c0      	movs	r1, #192	@ 0xc0
 800240c:	f000 fc1a 	bl	8002c44 <HAL_I2C_Mem_Write>
                      (uint8_t)reg,                 // register address
                      I2C_MEMADD_SIZE_8BIT,         // si5351 uses 8bit register addresses
                      (uint8_t*)(&value),           // write returned data to this variable
                      1,                            // how many bytes to expect returned
                      HAL_MAX_DELAY);               // timeout
}
 8002410:	46c0      	nop			@ (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b002      	add	sp, #8
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000080 	.word	0x20000080

0800241c <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv) {
 800241c:	b5b0      	push	{r4, r5, r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	240f      	movs	r4, #15
 800242a:	193b      	adds	r3, r7, r4
 800242c:	1c02      	adds	r2, r0, #0
 800242e:	701a      	strb	r2, [r3, #0]
    si5351_write(baseaddr,   (P3 >> 8) & 0xFF);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	121b      	asrs	r3, r3, #8
 8002434:	b2da      	uxtb	r2, r3
 8002436:	193b      	adds	r3, r7, r4
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	0011      	movs	r1, r2
 800243c:	0018      	movs	r0, r3
 800243e:	f7ff ffc5 	bl	80023cc <si5351_write>
    si5351_write(baseaddr+1, P3 & 0xFF);
 8002442:	193b      	adds	r3, r7, r4
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	0011      	movs	r1, r2
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff ffbb 	bl	80023cc <si5351_write>
    si5351_write(baseaddr+2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 8002456:	193b      	adds	r3, r7, r4
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	3302      	adds	r3, #2
 800245c:	b2d8      	uxtb	r0, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	141b      	asrs	r3, r3, #16
 8002462:	b25b      	sxtb	r3, r3
 8002464:	2203      	movs	r2, #3
 8002466:	4013      	ands	r3, r2
 8002468:	b25a      	sxtb	r2, r3
 800246a:	2318      	movs	r3, #24
 800246c:	2508      	movs	r5, #8
 800246e:	195b      	adds	r3, r3, r5
 8002470:	19db      	adds	r3, r3, r7
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b25b      	sxtb	r3, r3
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	b25b      	sxtb	r3, r3
 800247a:	210c      	movs	r1, #12
 800247c:	400b      	ands	r3, r1
 800247e:	b25b      	sxtb	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b25a      	sxtb	r2, r3
 8002484:	231c      	movs	r3, #28
 8002486:	195b      	adds	r3, r3, r5
 8002488:	19db      	adds	r3, r3, r7
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b25b      	sxtb	r3, r3
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	b25b      	sxtb	r3, r3
 8002492:	2170      	movs	r1, #112	@ 0x70
 8002494:	400b      	ands	r3, r1
 8002496:	b25b      	sxtb	r3, r3
 8002498:	4313      	orrs	r3, r2
 800249a:	b25b      	sxtb	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	0019      	movs	r1, r3
 80024a0:	f7ff ff94 	bl	80023cc <si5351_write>
    si5351_write(baseaddr+3, (P1 >> 8) & 0xFF);
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	3303      	adds	r3, #3
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	121b      	asrs	r3, r3, #8
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	0019      	movs	r1, r3
 80024b4:	0010      	movs	r0, r2
 80024b6:	f7ff ff89 	bl	80023cc <si5351_write>
    si5351_write(baseaddr+4, P1 & 0xFF);
 80024ba:	193b      	adds	r3, r7, r4
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	3304      	adds	r3, #4
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	0011      	movs	r1, r2
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff ff7f 	bl	80023cc <si5351_write>
    si5351_write(baseaddr+5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	3305      	adds	r3, #5
 80024d4:	b2d8      	uxtb	r0, r3
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	131b      	asrs	r3, r3, #12
 80024da:	b25b      	sxtb	r3, r3
 80024dc:	220f      	movs	r2, #15
 80024de:	4393      	bics	r3, r2
 80024e0:	b25a      	sxtb	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	141b      	asrs	r3, r3, #16
 80024e6:	b25b      	sxtb	r3, r3
 80024e8:	210f      	movs	r1, #15
 80024ea:	400b      	ands	r3, r1
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	4313      	orrs	r3, r2
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	0019      	movs	r1, r3
 80024f6:	f7ff ff69 	bl	80023cc <si5351_write>
    si5351_write(baseaddr+6, (P2 >> 8) & 0xFF);
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	3306      	adds	r3, #6
 8002500:	b2da      	uxtb	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	121b      	asrs	r3, r3, #8
 8002506:	b2db      	uxtb	r3, r3
 8002508:	0019      	movs	r1, r3
 800250a:	0010      	movs	r0, r2
 800250c:	f7ff ff5e 	bl	80023cc <si5351_write>
    si5351_write(baseaddr+7, P2 & 0xFF);
 8002510:	193b      	adds	r3, r7, r4
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	3307      	adds	r3, #7
 8002516:	b2db      	uxtb	r3, r3
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	0011      	movs	r1, r2
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff ff54 	bl	80023cc <si5351_write>
}
 8002524:	46c0      	nop			@ (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bdb0      	pop	{r4, r5, r7, pc}

0800252c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002530:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <HAL_Init+0x24>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_Init+0x24>)
 8002536:	2110      	movs	r1, #16
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800253c:	2000      	movs	r0, #0
 800253e:	f000 f809 	bl	8002554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002542:	f7ff f87f 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	40022000 	.word	0x40022000

08002554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800255c:	4b14      	ldr	r3, [pc, #80]	@ (80025b0 <HAL_InitTick+0x5c>)
 800255e:	681c      	ldr	r4, [r3, #0]
 8002560:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <HAL_InitTick+0x60>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	0019      	movs	r1, r3
 8002566:	23fa      	movs	r3, #250	@ 0xfa
 8002568:	0098      	lsls	r0, r3, #2
 800256a:	f7fd fdd7 	bl	800011c <__udivsi3>
 800256e:	0003      	movs	r3, r0
 8002570:	0019      	movs	r1, r3
 8002572:	0020      	movs	r0, r4
 8002574:	f7fd fdd2 	bl	800011c <__udivsi3>
 8002578:	0003      	movs	r3, r0
 800257a:	0018      	movs	r0, r3
 800257c:	f000 f905 	bl	800278a <HAL_SYSTICK_Config>
 8002580:	1e03      	subs	r3, r0, #0
 8002582:	d001      	beq.n	8002588 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e00f      	b.n	80025a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d80b      	bhi.n	80025a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	2301      	movs	r3, #1
 8002592:	425b      	negs	r3, r3
 8002594:	2200      	movs	r2, #0
 8002596:	0018      	movs	r0, r3
 8002598:	f000 f8e2 	bl	8002760 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_InitTick+0x64>)
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b003      	add	sp, #12
 80025ae:	bd90      	pop	{r4, r7, pc}
 80025b0:	20000008 	.word	0x20000008
 80025b4:	20000010 	.word	0x20000010
 80025b8:	2000000c 	.word	0x2000000c

080025bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_IncTick+0x1c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	001a      	movs	r2, r3
 80025c6:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <HAL_IncTick+0x20>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	18d2      	adds	r2, r2, r3
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_IncTick+0x20>)
 80025ce:	601a      	str	r2, [r3, #0]
}
 80025d0:	46c0      	nop			@ (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	20000010 	.word	0x20000010
 80025dc:	20000374 	.word	0x20000374

080025e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  return uwTick;
 80025e4:	4b02      	ldr	r3, [pc, #8]	@ (80025f0 <HAL_GetTick+0x10>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	20000374 	.word	0x20000374

080025f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff fff0 	bl	80025e0 <HAL_GetTick>
 8002600:	0003      	movs	r3, r0
 8002602:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3301      	adds	r3, #1
 800260c:	d005      	beq.n	800261a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800260e:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_Delay+0x44>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	001a      	movs	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	189b      	adds	r3, r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	f7ff ffe0 	bl	80025e0 <HAL_GetTick>
 8002620:	0002      	movs	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d8f7      	bhi.n	800261c <HAL_Delay+0x28>
  {
  }
}
 800262c:	46c0      	nop			@ (mov r8, r8)
 800262e:	46c0      	nop			@ (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b004      	add	sp, #16
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	20000010 	.word	0x20000010

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	0002      	movs	r2, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	1dfb      	adds	r3, r7, #7
 8002648:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800264a:	1dfb      	adds	r3, r7, #7
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002650:	d828      	bhi.n	80026a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002652:	4a2f      	ldr	r2, [pc, #188]	@ (8002710 <__NVIC_SetPriority+0xd4>)
 8002654:	1dfb      	adds	r3, r7, #7
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	b25b      	sxtb	r3, r3
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	33c0      	adds	r3, #192	@ 0xc0
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	589b      	ldr	r3, [r3, r2]
 8002662:	1dfa      	adds	r2, r7, #7
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	0011      	movs	r1, r2
 8002668:	2203      	movs	r2, #3
 800266a:	400a      	ands	r2, r1
 800266c:	00d2      	lsls	r2, r2, #3
 800266e:	21ff      	movs	r1, #255	@ 0xff
 8002670:	4091      	lsls	r1, r2
 8002672:	000a      	movs	r2, r1
 8002674:	43d2      	mvns	r2, r2
 8002676:	401a      	ands	r2, r3
 8002678:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	019b      	lsls	r3, r3, #6
 800267e:	22ff      	movs	r2, #255	@ 0xff
 8002680:	401a      	ands	r2, r3
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	0018      	movs	r0, r3
 8002688:	2303      	movs	r3, #3
 800268a:	4003      	ands	r3, r0
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002690:	481f      	ldr	r0, [pc, #124]	@ (8002710 <__NVIC_SetPriority+0xd4>)
 8002692:	1dfb      	adds	r3, r7, #7
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b25b      	sxtb	r3, r3
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	430a      	orrs	r2, r1
 800269c:	33c0      	adds	r3, #192	@ 0xc0
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026a2:	e031      	b.n	8002708 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <__NVIC_SetPriority+0xd8>)
 80026a6:	1dfb      	adds	r3, r7, #7
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	0019      	movs	r1, r3
 80026ac:	230f      	movs	r3, #15
 80026ae:	400b      	ands	r3, r1
 80026b0:	3b08      	subs	r3, #8
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	3306      	adds	r3, #6
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	18d3      	adds	r3, r2, r3
 80026ba:	3304      	adds	r3, #4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	1dfa      	adds	r2, r7, #7
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	0011      	movs	r1, r2
 80026c4:	2203      	movs	r2, #3
 80026c6:	400a      	ands	r2, r1
 80026c8:	00d2      	lsls	r2, r2, #3
 80026ca:	21ff      	movs	r1, #255	@ 0xff
 80026cc:	4091      	lsls	r1, r2
 80026ce:	000a      	movs	r2, r1
 80026d0:	43d2      	mvns	r2, r2
 80026d2:	401a      	ands	r2, r3
 80026d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	22ff      	movs	r2, #255	@ 0xff
 80026dc:	401a      	ands	r2, r3
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	0018      	movs	r0, r3
 80026e4:	2303      	movs	r3, #3
 80026e6:	4003      	ands	r3, r0
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026ec:	4809      	ldr	r0, [pc, #36]	@ (8002714 <__NVIC_SetPriority+0xd8>)
 80026ee:	1dfb      	adds	r3, r7, #7
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	001c      	movs	r4, r3
 80026f4:	230f      	movs	r3, #15
 80026f6:	4023      	ands	r3, r4
 80026f8:	3b08      	subs	r3, #8
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	430a      	orrs	r2, r1
 80026fe:	3306      	adds	r3, #6
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	18c3      	adds	r3, r0, r3
 8002704:	3304      	adds	r3, #4
 8002706:	601a      	str	r2, [r3, #0]
}
 8002708:	46c0      	nop			@ (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b003      	add	sp, #12
 800270e:	bd90      	pop	{r4, r7, pc}
 8002710:	e000e100 	.word	0xe000e100
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1e5a      	subs	r2, r3, #1
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	045b      	lsls	r3, r3, #17
 8002728:	429a      	cmp	r2, r3
 800272a:	d301      	bcc.n	8002730 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800272c:	2301      	movs	r3, #1
 800272e:	e010      	b.n	8002752 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002730:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <SysTick_Config+0x44>)
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	3a01      	subs	r2, #1
 8002736:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002738:	2301      	movs	r3, #1
 800273a:	425b      	negs	r3, r3
 800273c:	2103      	movs	r1, #3
 800273e:	0018      	movs	r0, r3
 8002740:	f7ff ff7c 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002744:	4b05      	ldr	r3, [pc, #20]	@ (800275c <SysTick_Config+0x44>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274a:	4b04      	ldr	r3, [pc, #16]	@ (800275c <SysTick_Config+0x44>)
 800274c:	2207      	movs	r2, #7
 800274e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	e000e010 	.word	0xe000e010

08002760 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	210f      	movs	r1, #15
 800276c:	187b      	adds	r3, r7, r1
 800276e:	1c02      	adds	r2, r0, #0
 8002770:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	187b      	adds	r3, r7, r1
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b25b      	sxtb	r3, r3
 800277a:	0011      	movs	r1, r2
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff ff5d 	bl	800263c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	46bd      	mov	sp, r7
 8002786:	b004      	add	sp, #16
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	0018      	movs	r0, r3
 8002796:	f7ff ffbf 	bl	8002718 <SysTick_Config>
 800279a:	0003      	movs	r3, r0
}
 800279c:	0018      	movs	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	b002      	add	sp, #8
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b2:	e14f      	b.n	8002a54 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2101      	movs	r1, #1
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4091      	lsls	r1, r2
 80027be:	000a      	movs	r2, r1
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d100      	bne.n	80027cc <HAL_GPIO_Init+0x28>
 80027ca:	e140      	b.n	8002a4e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2203      	movs	r2, #3
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d005      	beq.n	80027e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d130      	bne.n	8002846 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	409a      	lsls	r2, r3
 80027f2:	0013      	movs	r3, r2
 80027f4:	43da      	mvns	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	409a      	lsls	r2, r3
 8002806:	0013      	movs	r3, r2
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800281a:	2201      	movs	r2, #1
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
 8002820:	0013      	movs	r3, r2
 8002822:	43da      	mvns	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	2201      	movs	r2, #1
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
 8002838:	0013      	movs	r3, r2
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2203      	movs	r2, #3
 800284c:	4013      	ands	r3, r2
 800284e:	2b03      	cmp	r3, #3
 8002850:	d017      	beq.n	8002882 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	409a      	lsls	r2, r3
 8002860:	0013      	movs	r3, r2
 8002862:	43da      	mvns	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	409a      	lsls	r2, r3
 8002874:	0013      	movs	r3, r2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2203      	movs	r2, #3
 8002888:	4013      	ands	r3, r2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d123      	bne.n	80028d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	08da      	lsrs	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3208      	adds	r2, #8
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	58d3      	ldr	r3, [r2, r3]
 800289a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2207      	movs	r2, #7
 80028a0:	4013      	ands	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	220f      	movs	r2, #15
 80028a6:	409a      	lsls	r2, r3
 80028a8:	0013      	movs	r3, r2
 80028aa:	43da      	mvns	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2107      	movs	r1, #7
 80028ba:	400b      	ands	r3, r1
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	409a      	lsls	r2, r3
 80028c0:	0013      	movs	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	0092      	lsls	r2, r2, #2
 80028d2:	6939      	ldr	r1, [r7, #16]
 80028d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	409a      	lsls	r2, r3
 80028e4:	0013      	movs	r3, r2
 80028e6:	43da      	mvns	r2, r3
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2203      	movs	r2, #3
 80028f4:	401a      	ands	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	409a      	lsls	r2, r3
 80028fc:	0013      	movs	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	23c0      	movs	r3, #192	@ 0xc0
 8002910:	029b      	lsls	r3, r3, #10
 8002912:	4013      	ands	r3, r2
 8002914:	d100      	bne.n	8002918 <HAL_GPIO_Init+0x174>
 8002916:	e09a      	b.n	8002a4e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002918:	4b54      	ldr	r3, [pc, #336]	@ (8002a6c <HAL_GPIO_Init+0x2c8>)
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_GPIO_Init+0x2c8>)
 800291e:	2101      	movs	r1, #1
 8002920:	430a      	orrs	r2, r1
 8002922:	619a      	str	r2, [r3, #24]
 8002924:	4b51      	ldr	r3, [pc, #324]	@ (8002a6c <HAL_GPIO_Init+0x2c8>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2201      	movs	r2, #1
 800292a:	4013      	ands	r3, r2
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002930:	4a4f      	ldr	r2, [pc, #316]	@ (8002a70 <HAL_GPIO_Init+0x2cc>)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	589b      	ldr	r3, [r3, r2]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2203      	movs	r2, #3
 8002942:	4013      	ands	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	409a      	lsls	r2, r3
 800294a:	0013      	movs	r3, r2
 800294c:	43da      	mvns	r2, r3
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	2390      	movs	r3, #144	@ 0x90
 8002958:	05db      	lsls	r3, r3, #23
 800295a:	429a      	cmp	r2, r3
 800295c:	d013      	beq.n	8002986 <HAL_GPIO_Init+0x1e2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a44      	ldr	r2, [pc, #272]	@ (8002a74 <HAL_GPIO_Init+0x2d0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00d      	beq.n	8002982 <HAL_GPIO_Init+0x1de>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a43      	ldr	r2, [pc, #268]	@ (8002a78 <HAL_GPIO_Init+0x2d4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <HAL_GPIO_Init+0x1da>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a42      	ldr	r2, [pc, #264]	@ (8002a7c <HAL_GPIO_Init+0x2d8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_GPIO_Init+0x1d6>
 8002976:	2303      	movs	r3, #3
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x1e4>
 800297a:	2305      	movs	r3, #5
 800297c:	e004      	b.n	8002988 <HAL_GPIO_Init+0x1e4>
 800297e:	2302      	movs	r3, #2
 8002980:	e002      	b.n	8002988 <HAL_GPIO_Init+0x1e4>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_GPIO_Init+0x1e4>
 8002986:	2300      	movs	r3, #0
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	2103      	movs	r1, #3
 800298c:	400a      	ands	r2, r1
 800298e:	0092      	lsls	r2, r2, #2
 8002990:	4093      	lsls	r3, r2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002998:	4935      	ldr	r1, [pc, #212]	@ (8002a70 <HAL_GPIO_Init+0x2cc>)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	3302      	adds	r3, #2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a6:	4b36      	ldr	r3, [pc, #216]	@ (8002a80 <HAL_GPIO_Init+0x2dc>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43da      	mvns	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	035b      	lsls	r3, r3, #13
 80029be:	4013      	ands	r3, r2
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <HAL_GPIO_Init+0x2dc>)
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80029d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <HAL_GPIO_Init+0x2dc>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	43da      	mvns	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	039b      	lsls	r3, r3, #14
 80029e8:	4013      	ands	r3, r2
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029f4:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <HAL_GPIO_Init+0x2dc>)
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80029fa:	4b21      	ldr	r3, [pc, #132]	@ (8002a80 <HAL_GPIO_Init+0x2dc>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43da      	mvns	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	029b      	lsls	r3, r3, #10
 8002a12:	4013      	ands	r3, r2
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a1e:	4b18      	ldr	r3, [pc, #96]	@ (8002a80 <HAL_GPIO_Init+0x2dc>)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002a24:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <HAL_GPIO_Init+0x2dc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	025b      	lsls	r3, r3, #9
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a48:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <HAL_GPIO_Init+0x2dc>)
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3301      	adds	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	40da      	lsrs	r2, r3
 8002a5c:	1e13      	subs	r3, r2, #0
 8002a5e:	d000      	beq.n	8002a62 <HAL_GPIO_Init+0x2be>
 8002a60:	e6a8      	b.n	80027b4 <HAL_GPIO_Init+0x10>
  } 
}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	46c0      	nop			@ (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b006      	add	sp, #24
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40010000 	.word	0x40010000
 8002a74:	48000400 	.word	0x48000400
 8002a78:	48000800 	.word	0x48000800
 8002a7c:	48000c00 	.word	0x48000c00
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	000a      	movs	r2, r1
 8002a8e:	1cbb      	adds	r3, r7, #2
 8002a90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	1cba      	adds	r2, r7, #2
 8002a98:	8812      	ldrh	r2, [r2, #0]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002a9e:	230f      	movs	r3, #15
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e003      	b.n	8002ab0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aa8:	230f      	movs	r3, #15
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	781b      	ldrb	r3, [r3, #0]
  }
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	0008      	movs	r0, r1
 8002ac8:	0011      	movs	r1, r2
 8002aca:	1cbb      	adds	r3, r7, #2
 8002acc:	1c02      	adds	r2, r0, #0
 8002ace:	801a      	strh	r2, [r3, #0]
 8002ad0:	1c7b      	adds	r3, r7, #1
 8002ad2:	1c0a      	adds	r2, r1, #0
 8002ad4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ad6:	1c7b      	adds	r3, r7, #1
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ade:	1cbb      	adds	r3, r7, #2
 8002ae0:	881a      	ldrh	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ae6:	e003      	b.n	8002af0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ae8:	1cbb      	adds	r3, r7, #2
 8002aea:	881a      	ldrh	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002af0:	46c0      	nop			@ (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08f      	b.n	8002c2a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2241      	movs	r2, #65	@ 0x41
 8002b0e:	5c9b      	ldrb	r3, [r3, r2]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d107      	bne.n	8002b26 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2240      	movs	r2, #64	@ 0x40
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7fe fdb3 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2241      	movs	r2, #65	@ 0x41
 8002b2a:	2124      	movs	r1, #36	@ 0x24
 8002b2c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	438a      	bics	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	493b      	ldr	r1, [pc, #236]	@ (8002c34 <HAL_I2C_Init+0x13c>)
 8002b48:	400a      	ands	r2, r1
 8002b4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4938      	ldr	r1, [pc, #224]	@ (8002c38 <HAL_I2C_Init+0x140>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d108      	bne.n	8002b76 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2180      	movs	r1, #128	@ 0x80
 8002b6e:	0209      	lsls	r1, r1, #8
 8002b70:	430a      	orrs	r2, r1
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	e007      	b.n	8002b86 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2184      	movs	r1, #132	@ 0x84
 8002b80:	0209      	lsls	r1, r1, #8
 8002b82:	430a      	orrs	r2, r1
 8002b84:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d109      	bne.n	8002ba2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2180      	movs	r1, #128	@ 0x80
 8002b9a:	0109      	lsls	r1, r1, #4
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	e007      	b.n	8002bb2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4923      	ldr	r1, [pc, #140]	@ (8002c3c <HAL_I2C_Init+0x144>)
 8002bae:	400a      	ands	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4920      	ldr	r1, [pc, #128]	@ (8002c40 <HAL_I2C_Init+0x148>)
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	491a      	ldr	r1, [pc, #104]	@ (8002c38 <HAL_I2C_Init+0x140>)
 8002bce:	400a      	ands	r2, r1
 8002bd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69d9      	ldr	r1, [r3, #28]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2101      	movs	r1, #1
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2241      	movs	r2, #65	@ 0x41
 8002c16:	2120      	movs	r1, #32
 8002c18:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2242      	movs	r2, #66	@ 0x42
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			@ (mov r8, r8)
 8002c34:	f0ffffff 	.word	0xf0ffffff
 8002c38:	ffff7fff 	.word	0xffff7fff
 8002c3c:	fffff7ff 	.word	0xfffff7ff
 8002c40:	02008000 	.word	0x02008000

08002c44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	000c      	movs	r4, r1
 8002c4e:	0010      	movs	r0, r2
 8002c50:	0019      	movs	r1, r3
 8002c52:	230a      	movs	r3, #10
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	1c22      	adds	r2, r4, #0
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	1c02      	adds	r2, r0, #0
 8002c60:	801a      	strh	r2, [r3, #0]
 8002c62:	1dbb      	adds	r3, r7, #6
 8002c64:	1c0a      	adds	r2, r1, #0
 8002c66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2241      	movs	r2, #65	@ 0x41
 8002c6c:	5c9b      	ldrb	r3, [r3, r2]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d000      	beq.n	8002c76 <HAL_I2C_Mem_Write+0x32>
 8002c74:	e10c      	b.n	8002e90 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d004      	beq.n	8002c86 <HAL_I2C_Mem_Write+0x42>
 8002c7c:	232c      	movs	r3, #44	@ 0x2c
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2280      	movs	r2, #128	@ 0x80
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0ff      	b.n	8002e92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2240      	movs	r2, #64	@ 0x40
 8002c96:	5c9b      	ldrb	r3, [r3, r2]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_I2C_Mem_Write+0x5c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e0f8      	b.n	8002e92 <HAL_I2C_Mem_Write+0x24e>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2240      	movs	r2, #64	@ 0x40
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ca8:	f7ff fc9a 	bl	80025e0 <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	0219      	lsls	r1, r3, #8
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2319      	movs	r3, #25
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f000 fa71 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 8002cc2:	1e03      	subs	r3, r0, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0e3      	b.n	8002e92 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2241      	movs	r2, #65	@ 0x41
 8002cce:	2121      	movs	r1, #33	@ 0x21
 8002cd0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2242      	movs	r2, #66	@ 0x42
 8002cd6:	2140      	movs	r1, #64	@ 0x40
 8002cd8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	222c      	movs	r2, #44	@ 0x2c
 8002cea:	18ba      	adds	r2, r7, r2
 8002cec:	8812      	ldrh	r2, [r2, #0]
 8002cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cf6:	1dbb      	adds	r3, r7, #6
 8002cf8:	881c      	ldrh	r4, [r3, #0]
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	230a      	movs	r3, #10
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	8819      	ldrh	r1, [r3, #0]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	0023      	movs	r3, r4
 8002d12:	f000 f9c1 	bl	8003098 <I2C_RequestMemoryWrite>
 8002d16:	1e03      	subs	r3, r0, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2240      	movs	r2, #64	@ 0x40
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0b5      	b.n	8002e92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2bff      	cmp	r3, #255	@ 0xff
 8002d2e:	d911      	bls.n	8002d54 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	22ff      	movs	r2, #255	@ 0xff
 8002d34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	2380      	movs	r3, #128	@ 0x80
 8002d3e:	045c      	lsls	r4, r3, #17
 8002d40:	230a      	movs	r3, #10
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	8819      	ldrh	r1, [r3, #0]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	0023      	movs	r3, r4
 8002d4e:	f000 fc03 	bl	8003558 <I2C_TransferConfig>
 8002d52:	e012      	b.n	8002d7a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	049c      	lsls	r4, r3, #18
 8002d68:	230a      	movs	r3, #10
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	8819      	ldrh	r1, [r3, #0]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	2300      	movs	r3, #0
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	0023      	movs	r3, r4
 8002d76:	f000 fbef 	bl	8003558 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 fa67 	bl	8003254 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e081      	b.n	8002e92 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d03a      	beq.n	8002e3e <HAL_I2C_Mem_Write+0x1fa>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d136      	bne.n	8002e3e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	0013      	movs	r3, r2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	2180      	movs	r1, #128	@ 0x80
 8002dde:	f000 f9e1 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 8002de2:	1e03      	subs	r3, r0, #0
 8002de4:	d001      	beq.n	8002dea <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e053      	b.n	8002e92 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2bff      	cmp	r3, #255	@ 0xff
 8002df2:	d911      	bls.n	8002e18 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	22ff      	movs	r2, #255	@ 0xff
 8002df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	045c      	lsls	r4, r3, #17
 8002e04:	230a      	movs	r3, #10
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	8819      	ldrh	r1, [r3, #0]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	0023      	movs	r3, r4
 8002e12:	f000 fba1 	bl	8003558 <I2C_TransferConfig>
 8002e16:	e012      	b.n	8002e3e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	2380      	movs	r3, #128	@ 0x80
 8002e2a:	049c      	lsls	r4, r3, #18
 8002e2c:	230a      	movs	r3, #10
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	8819      	ldrh	r1, [r3, #0]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	2300      	movs	r3, #0
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	0023      	movs	r3, r4
 8002e3a:	f000 fb8d 	bl	8003558 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d198      	bne.n	8002d7a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 fa46 	bl	80032e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e54:	1e03      	subs	r3, r0, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e01a      	b.n	8002e92 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2220      	movs	r2, #32
 8002e62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	490b      	ldr	r1, [pc, #44]	@ (8002e9c <HAL_I2C_Mem_Write+0x258>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2241      	movs	r2, #65	@ 0x41
 8002e78:	2120      	movs	r1, #32
 8002e7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2242      	movs	r2, #66	@ 0x42
 8002e80:	2100      	movs	r1, #0
 8002e82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2240      	movs	r2, #64	@ 0x40
 8002e88:	2100      	movs	r1, #0
 8002e8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
  }
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b007      	add	sp, #28
 8002e98:	bd90      	pop	{r4, r7, pc}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	fe00e800 	.word	0xfe00e800

08002ea0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	@ 0x28
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	230a      	movs	r3, #10
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	1c0a      	adds	r2, r1, #0
 8002eb2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2241      	movs	r2, #65	@ 0x41
 8002ebc:	5c9b      	ldrb	r3, [r3, r2]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b20      	cmp	r3, #32
 8002ec2:	d000      	beq.n	8002ec6 <HAL_I2C_IsDeviceReady+0x26>
 8002ec4:	e0df      	b.n	8003086 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	401a      	ands	r2, r3
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	021b      	lsls	r3, r3, #8
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d101      	bne.n	8002ede <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
 8002edc:	e0d4      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2240      	movs	r2, #64	@ 0x40
 8002ee2:	5c9b      	ldrb	r3, [r3, r2]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_I2C_IsDeviceReady+0x4c>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e0cd      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x1e8>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2240      	movs	r2, #64	@ 0x40
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2241      	movs	r2, #65	@ 0x41
 8002ef8:	2124      	movs	r1, #36	@ 0x24
 8002efa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_I2C_IsDeviceReady+0x7a>
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	059b      	lsls	r3, r3, #22
 8002f12:	0d9b      	lsrs	r3, r3, #22
 8002f14:	4a5e      	ldr	r2, [pc, #376]	@ (8003090 <HAL_I2C_IsDeviceReady+0x1f0>)
 8002f16:	431a      	orrs	r2, r3
 8002f18:	e006      	b.n	8002f28 <HAL_I2C_IsDeviceReady+0x88>
 8002f1a:	230a      	movs	r3, #10
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	059b      	lsls	r3, r3, #22
 8002f22:	0d9b      	lsrs	r3, r3, #22
 8002f24:	4a5b      	ldr	r2, [pc, #364]	@ (8003094 <HAL_I2C_IsDeviceReady+0x1f4>)
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002f2e:	f7ff fb57 	bl	80025e0 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	4013      	ands	r3, r2
 8002f40:	3b20      	subs	r3, #32
 8002f42:	425a      	negs	r2, r3
 8002f44:	4153      	adcs	r3, r2
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	231f      	movs	r3, #31
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2210      	movs	r2, #16
 8002f56:	4013      	ands	r3, r2
 8002f58:	3b10      	subs	r3, #16
 8002f5a:	425a      	negs	r2, r3
 8002f5c:	4153      	adcs	r3, r2
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	231e      	movs	r3, #30
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002f66:	e035      	b.n	8002fd4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	d01a      	beq.n	8002fa4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7ff fb37 	bl	80025e0 <HAL_GetTick>
 8002f72:	0002      	movs	r2, r0
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <HAL_I2C_IsDeviceReady+0xe4>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10f      	bne.n	8002fa4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2241      	movs	r2, #65	@ 0x41
 8002f88:	2120      	movs	r1, #32
 8002f8a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f90:	2220      	movs	r2, #32
 8002f92:	431a      	orrs	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2240      	movs	r2, #64	@ 0x40
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e071      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2220      	movs	r2, #32
 8002fac:	4013      	ands	r3, r2
 8002fae:	3b20      	subs	r3, #32
 8002fb0:	425a      	negs	r2, r3
 8002fb2:	4153      	adcs	r3, r2
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	231f      	movs	r3, #31
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	3b10      	subs	r3, #16
 8002fc8:	425a      	negs	r2, r3
 8002fca:	4153      	adcs	r3, r2
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	231e      	movs	r3, #30
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002fd4:	231f      	movs	r3, #31
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <HAL_I2C_IsDeviceReady+0x148>
 8002fde:	231e      	movs	r3, #30
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0bf      	beq.n	8002f68 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2210      	movs	r2, #16
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d01a      	beq.n	800302c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	0013      	movs	r3, r2
 8003000:	2200      	movs	r2, #0
 8003002:	2120      	movs	r1, #32
 8003004:	f000 f8ce 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d001      	beq.n	8003010 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e03b      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2220      	movs	r2, #32
 8003016:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2241      	movs	r2, #65	@ 0x41
 800301c:	2120      	movs	r1, #32
 800301e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2240      	movs	r2, #64	@ 0x40
 8003024:	2100      	movs	r1, #0
 8003026:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e02d      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	0013      	movs	r3, r2
 8003036:	2200      	movs	r2, #0
 8003038:	2120      	movs	r1, #32
 800303a:	f000 f8b3 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e020      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2210      	movs	r2, #16
 800304c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2220      	movs	r2, #32
 8003054:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3301      	adds	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	429a      	cmp	r2, r3
 8003062:	d900      	bls.n	8003066 <HAL_I2C_IsDeviceReady+0x1c6>
 8003064:	e74d      	b.n	8002f02 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2241      	movs	r2, #65	@ 0x41
 800306a:	2120      	movs	r1, #32
 800306c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003072:	2220      	movs	r2, #32
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2240      	movs	r2, #64	@ 0x40
 800307e:	2100      	movs	r1, #0
 8003080:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
  }
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	b008      	add	sp, #32
 800308e:	bd80      	pop	{r7, pc}
 8003090:	02002000 	.word	0x02002000
 8003094:	02002800 	.word	0x02002800

08003098 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003098:	b5b0      	push	{r4, r5, r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	000c      	movs	r4, r1
 80030a2:	0010      	movs	r0, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	250a      	movs	r5, #10
 80030a8:	197b      	adds	r3, r7, r5
 80030aa:	1c22      	adds	r2, r4, #0
 80030ac:	801a      	strh	r2, [r3, #0]
 80030ae:	2308      	movs	r3, #8
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	1c02      	adds	r2, r0, #0
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	1dbb      	adds	r3, r7, #6
 80030b8:	1c0a      	adds	r2, r1, #0
 80030ba:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030bc:	1dbb      	adds	r3, r7, #6
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	045c      	lsls	r4, r3, #17
 80030c6:	197b      	adds	r3, r7, r5
 80030c8:	8819      	ldrh	r1, [r3, #0]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	4b23      	ldr	r3, [pc, #140]	@ (800315c <I2C_RequestMemoryWrite+0xc4>)
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	0023      	movs	r3, r4
 80030d2:	f000 fa41 	bl	8003558 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d8:	6a39      	ldr	r1, [r7, #32]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	0018      	movs	r0, r3
 80030de:	f000 f8b9 	bl	8003254 <I2C_WaitOnTXISFlagUntilTimeout>
 80030e2:	1e03      	subs	r3, r0, #0
 80030e4:	d001      	beq.n	80030ea <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e033      	b.n	8003152 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ea:	1dbb      	adds	r3, r7, #6
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f2:	2308      	movs	r3, #8
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003100:	e019      	b.n	8003136 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003102:	2308      	movs	r3, #8
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	b29b      	uxth	r3, r3
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003116:	6a39      	ldr	r1, [r7, #32]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	0018      	movs	r0, r3
 800311c:	f000 f89a 	bl	8003254 <I2C_WaitOnTXISFlagUntilTimeout>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d001      	beq.n	8003128 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e014      	b.n	8003152 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003128:	2308      	movs	r3, #8
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003136:	6a3a      	ldr	r2, [r7, #32]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	0013      	movs	r3, r2
 8003140:	2200      	movs	r2, #0
 8003142:	2180      	movs	r1, #128	@ 0x80
 8003144:	f000 f82e 	bl	80031a4 <I2C_WaitOnFlagUntilTimeout>
 8003148:	1e03      	subs	r3, r0, #0
 800314a:	d001      	beq.n	8003150 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b004      	add	sp, #16
 8003158:	bdb0      	pop	{r4, r5, r7, pc}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	80002000 	.word	0x80002000

08003160 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2202      	movs	r2, #2
 8003170:	4013      	ands	r3, r2
 8003172:	2b02      	cmp	r3, #2
 8003174:	d103      	bne.n	800317e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2201      	movs	r2, #1
 8003186:	4013      	ands	r3, r2
 8003188:	2b01      	cmp	r3, #1
 800318a:	d007      	beq.n	800319c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2101      	movs	r1, #1
 8003198:	430a      	orrs	r2, r1
 800319a:	619a      	str	r2, [r3, #24]
  }
}
 800319c:	46c0      	nop			@ (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b002      	add	sp, #8
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b4:	e03a      	b.n	800322c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	6839      	ldr	r1, [r7, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	0018      	movs	r0, r3
 80031be:	f000 f8d3 	bl	8003368 <I2C_IsErrorOccurred>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d001      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e040      	b.n	800324c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	d02d      	beq.n	800322c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031d0:	f7ff fa06 	bl	80025e0 <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d302      	bcc.n	80031e6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d122      	bne.n	800322c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	425a      	negs	r2, r3
 80031f6:	4153      	adcs	r3, r2
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	001a      	movs	r2, r3
 80031fc:	1dfb      	adds	r3, r7, #7
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d113      	bne.n	800322c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003208:	2220      	movs	r2, #32
 800320a:	431a      	orrs	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2241      	movs	r2, #65	@ 0x41
 8003214:	2120      	movs	r1, #32
 8003216:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2242      	movs	r2, #66	@ 0x42
 800321c:	2100      	movs	r1, #0
 800321e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2240      	movs	r2, #64	@ 0x40
 8003224:	2100      	movs	r1, #0
 8003226:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e00f      	b.n	800324c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	425a      	negs	r2, r3
 800323c:	4153      	adcs	r3, r2
 800323e:	b2db      	uxtb	r3, r3
 8003240:	001a      	movs	r2, r3
 8003242:	1dfb      	adds	r3, r7, #7
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d0b5      	beq.n	80031b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b004      	add	sp, #16
 8003252:	bd80      	pop	{r7, pc}

08003254 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003260:	e032      	b.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	0018      	movs	r0, r3
 800326a:	f000 f87d 	bl	8003368 <I2C_IsErrorOccurred>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d001      	beq.n	8003276 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e030      	b.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	3301      	adds	r3, #1
 800327a:	d025      	beq.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327c:	f7ff f9b0 	bl	80025e0 <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d11a      	bne.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	2202      	movs	r2, #2
 800329a:	4013      	ands	r3, r2
 800329c:	2b02      	cmp	r3, #2
 800329e:	d013      	beq.n	80032c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	2220      	movs	r2, #32
 80032a6:	431a      	orrs	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2241      	movs	r2, #65	@ 0x41
 80032b0:	2120      	movs	r1, #32
 80032b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2242      	movs	r2, #66	@ 0x42
 80032b8:	2100      	movs	r1, #0
 80032ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2240      	movs	r2, #64	@ 0x40
 80032c0:	2100      	movs	r1, #0
 80032c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e007      	b.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2202      	movs	r2, #2
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d1c5      	bne.n	8003262 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b004      	add	sp, #16
 80032de:	bd80      	pop	{r7, pc}

080032e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ec:	e02f      	b.n	800334e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f000 f837 	bl	8003368 <I2C_IsErrorOccurred>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d001      	beq.n	8003302 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e02d      	b.n	800335e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7ff f96d 	bl	80025e0 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11a      	bne.n	800334e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2220      	movs	r2, #32
 8003320:	4013      	ands	r3, r2
 8003322:	2b20      	cmp	r3, #32
 8003324:	d013      	beq.n	800334e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332a:	2220      	movs	r2, #32
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2241      	movs	r2, #65	@ 0x41
 8003336:	2120      	movs	r1, #32
 8003338:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2242      	movs	r2, #66	@ 0x42
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2240      	movs	r2, #64	@ 0x40
 8003346:	2100      	movs	r1, #0
 8003348:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e007      	b.n	800335e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2220      	movs	r2, #32
 8003356:	4013      	ands	r3, r2
 8003358:	2b20      	cmp	r3, #32
 800335a:	d1c8      	bne.n	80032ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b004      	add	sp, #16
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	@ 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003374:	2327      	movs	r3, #39	@ 0x27
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2210      	movs	r2, #16
 8003390:	4013      	ands	r3, r2
 8003392:	d100      	bne.n	8003396 <I2C_IsErrorOccurred+0x2e>
 8003394:	e079      	b.n	800348a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2210      	movs	r2, #16
 800339c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800339e:	e057      	b.n	8003450 <I2C_IsErrorOccurred+0xe8>
 80033a0:	2227      	movs	r2, #39	@ 0x27
 80033a2:	18bb      	adds	r3, r7, r2
 80033a4:	18ba      	adds	r2, r7, r2
 80033a6:	7812      	ldrb	r2, [r2, #0]
 80033a8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3301      	adds	r3, #1
 80033ae:	d04f      	beq.n	8003450 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033b0:	f7ff f916 	bl	80025e0 <HAL_GetTick>
 80033b4:	0002      	movs	r2, r0
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d302      	bcc.n	80033c6 <I2C_IsErrorOccurred+0x5e>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d144      	bne.n	8003450 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	01db      	lsls	r3, r3, #7
 80033d0:	4013      	ands	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033d4:	2013      	movs	r0, #19
 80033d6:	183b      	adds	r3, r7, r0
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	2142      	movs	r1, #66	@ 0x42
 80033dc:	5c52      	ldrb	r2, [r2, r1]
 80033de:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	401a      	ands	r2, r3
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d126      	bne.n	8003442 <I2C_IsErrorOccurred+0xda>
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	01db      	lsls	r3, r3, #7
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d021      	beq.n	8003442 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80033fe:	183b      	adds	r3, r7, r0
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b20      	cmp	r3, #32
 8003404:	d01d      	beq.n	8003442 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2180      	movs	r1, #128	@ 0x80
 8003412:	01c9      	lsls	r1, r1, #7
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003418:	f7ff f8e2 	bl	80025e0 <HAL_GetTick>
 800341c:	0003      	movs	r3, r0
 800341e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003420:	e00f      	b.n	8003442 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003422:	f7ff f8dd 	bl	80025e0 <HAL_GetTick>
 8003426:	0002      	movs	r2, r0
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b19      	cmp	r3, #25
 800342e:	d908      	bls.n	8003442 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	2220      	movs	r2, #32
 8003434:	4313      	orrs	r3, r2
 8003436:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003438:	2327      	movs	r3, #39	@ 0x27
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]

              break;
 8003440:	e006      	b.n	8003450 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2220      	movs	r2, #32
 800344a:	4013      	ands	r3, r2
 800344c:	2b20      	cmp	r3, #32
 800344e:	d1e8      	bne.n	8003422 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	2220      	movs	r2, #32
 8003458:	4013      	ands	r3, r2
 800345a:	2b20      	cmp	r3, #32
 800345c:	d004      	beq.n	8003468 <I2C_IsErrorOccurred+0x100>
 800345e:	2327      	movs	r3, #39	@ 0x27
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d09b      	beq.n	80033a0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003468:	2327      	movs	r3, #39	@ 0x27
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2220      	movs	r2, #32
 8003478:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	2204      	movs	r2, #4
 800347e:	4313      	orrs	r3, r2
 8003480:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003482:	2327      	movs	r3, #39	@ 0x27
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4013      	ands	r3, r2
 800349a:	d00c      	beq.n	80034b6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	2201      	movs	r2, #1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2280      	movs	r2, #128	@ 0x80
 80034aa:	0052      	lsls	r2, r2, #1
 80034ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034ae:	2327      	movs	r3, #39	@ 0x27
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	2380      	movs	r3, #128	@ 0x80
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4013      	ands	r3, r2
 80034be:	d00c      	beq.n	80034da <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	2208      	movs	r2, #8
 80034c4:	4313      	orrs	r3, r2
 80034c6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2280      	movs	r2, #128	@ 0x80
 80034ce:	00d2      	lsls	r2, r2, #3
 80034d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034d2:	2327      	movs	r3, #39	@ 0x27
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	2380      	movs	r3, #128	@ 0x80
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4013      	ands	r3, r2
 80034e2:	d00c      	beq.n	80034fe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	2202      	movs	r2, #2
 80034e8:	4313      	orrs	r3, r2
 80034ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2280      	movs	r2, #128	@ 0x80
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034f6:	2327      	movs	r3, #39	@ 0x27
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80034fe:	2327      	movs	r3, #39	@ 0x27
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01d      	beq.n	8003544 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff fe28 	bl	8003160 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	490e      	ldr	r1, [pc, #56]	@ (8003554 <I2C_IsErrorOccurred+0x1ec>)
 800351c:	400a      	ands	r2, r1
 800351e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2241      	movs	r2, #65	@ 0x41
 8003530:	2120      	movs	r1, #32
 8003532:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2242      	movs	r2, #66	@ 0x42
 8003538:	2100      	movs	r1, #0
 800353a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2240      	movs	r2, #64	@ 0x40
 8003540:	2100      	movs	r1, #0
 8003542:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003544:	2327      	movs	r3, #39	@ 0x27
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	781b      	ldrb	r3, [r3, #0]
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b00a      	add	sp, #40	@ 0x28
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	fe00e800 	.word	0xfe00e800

08003558 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	0008      	movs	r0, r1
 8003562:	0011      	movs	r1, r2
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	240a      	movs	r4, #10
 8003568:	193b      	adds	r3, r7, r4
 800356a:	1c02      	adds	r2, r0, #0
 800356c:	801a      	strh	r2, [r3, #0]
 800356e:	2009      	movs	r0, #9
 8003570:	183b      	adds	r3, r7, r0
 8003572:	1c0a      	adds	r2, r1, #0
 8003574:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003576:	193b      	adds	r3, r7, r4
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	059b      	lsls	r3, r3, #22
 800357c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800357e:	183b      	adds	r3, r7, r0
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	0419      	lsls	r1, r3, #16
 8003584:	23ff      	movs	r3, #255	@ 0xff
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800358a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003592:	4313      	orrs	r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	085b      	lsrs	r3, r3, #1
 8003598:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035a2:	0d51      	lsrs	r1, r2, #21
 80035a4:	2280      	movs	r2, #128	@ 0x80
 80035a6:	00d2      	lsls	r2, r2, #3
 80035a8:	400a      	ands	r2, r1
 80035aa:	4907      	ldr	r1, [pc, #28]	@ (80035c8 <I2C_TransferConfig+0x70>)
 80035ac:	430a      	orrs	r2, r1
 80035ae:	43d2      	mvns	r2, r2
 80035b0:	401a      	ands	r2, r3
 80035b2:	0011      	movs	r1, r2
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b007      	add	sp, #28
 80035c4:	bd90      	pop	{r4, r7, pc}
 80035c6:	46c0      	nop			@ (mov r8, r8)
 80035c8:	03ff63ff 	.word	0x03ff63ff

080035cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2241      	movs	r2, #65	@ 0x41
 80035da:	5c9b      	ldrb	r3, [r3, r2]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d138      	bne.n	8003654 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2240      	movs	r2, #64	@ 0x40
 80035e6:	5c9b      	ldrb	r3, [r3, r2]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e032      	b.n	8003656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2240      	movs	r2, #64	@ 0x40
 80035f4:	2101      	movs	r1, #1
 80035f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2241      	movs	r2, #65	@ 0x41
 80035fc:	2124      	movs	r1, #36	@ 0x24
 80035fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2101      	movs	r1, #1
 800360c:	438a      	bics	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4911      	ldr	r1, [pc, #68]	@ (8003660 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800361c:	400a      	ands	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2101      	movs	r1, #1
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2241      	movs	r2, #65	@ 0x41
 8003644:	2120      	movs	r1, #32
 8003646:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2240      	movs	r2, #64	@ 0x40
 800364c:	2100      	movs	r1, #0
 800364e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b002      	add	sp, #8
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			@ (mov r8, r8)
 8003660:	ffffefff 	.word	0xffffefff

08003664 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2241      	movs	r2, #65	@ 0x41
 8003672:	5c9b      	ldrb	r3, [r3, r2]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b20      	cmp	r3, #32
 8003678:	d139      	bne.n	80036ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2240      	movs	r2, #64	@ 0x40
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003684:	2302      	movs	r3, #2
 8003686:	e033      	b.n	80036f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2240      	movs	r2, #64	@ 0x40
 800368c:	2101      	movs	r1, #1
 800368e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2241      	movs	r2, #65	@ 0x41
 8003694:	2124      	movs	r1, #36	@ 0x24
 8003696:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	438a      	bics	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a11      	ldr	r2, [pc, #68]	@ (80036f8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2241      	movs	r2, #65	@ 0x41
 80036de:	2120      	movs	r1, #32
 80036e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2240      	movs	r2, #64	@ 0x40
 80036e6:	2100      	movs	r1, #0
 80036e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e000      	b.n	80036f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
  }
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	fffff0ff 	.word	0xfffff0ff

080036fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e301      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2201      	movs	r2, #1
 8003714:	4013      	ands	r3, r2
 8003716:	d100      	bne.n	800371a <HAL_RCC_OscConfig+0x1e>
 8003718:	e08d      	b.n	8003836 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800371a:	4bc3      	ldr	r3, [pc, #780]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	220c      	movs	r2, #12
 8003720:	4013      	ands	r3, r2
 8003722:	2b04      	cmp	r3, #4
 8003724:	d00e      	beq.n	8003744 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003726:	4bc0      	ldr	r3, [pc, #768]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	220c      	movs	r2, #12
 800372c:	4013      	ands	r3, r2
 800372e:	2b08      	cmp	r3, #8
 8003730:	d116      	bne.n	8003760 <HAL_RCC_OscConfig+0x64>
 8003732:	4bbd      	ldr	r3, [pc, #756]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	025b      	lsls	r3, r3, #9
 800373a:	401a      	ands	r2, r3
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	025b      	lsls	r3, r3, #9
 8003740:	429a      	cmp	r2, r3
 8003742:	d10d      	bne.n	8003760 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	4bb8      	ldr	r3, [pc, #736]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	029b      	lsls	r3, r3, #10
 800374c:	4013      	ands	r3, r2
 800374e:	d100      	bne.n	8003752 <HAL_RCC_OscConfig+0x56>
 8003750:	e070      	b.n	8003834 <HAL_RCC_OscConfig+0x138>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d000      	beq.n	800375c <HAL_RCC_OscConfig+0x60>
 800375a:	e06b      	b.n	8003834 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e2d8      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x7c>
 8003768:	4baf      	ldr	r3, [pc, #700]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4bae      	ldr	r3, [pc, #696]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800376e:	2180      	movs	r1, #128	@ 0x80
 8003770:	0249      	lsls	r1, r1, #9
 8003772:	430a      	orrs	r2, r1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e02f      	b.n	80037d8 <HAL_RCC_OscConfig+0xdc>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10c      	bne.n	800379a <HAL_RCC_OscConfig+0x9e>
 8003780:	4ba9      	ldr	r3, [pc, #676]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4ba8      	ldr	r3, [pc, #672]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003786:	49a9      	ldr	r1, [pc, #676]	@ (8003a2c <HAL_RCC_OscConfig+0x330>)
 8003788:	400a      	ands	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	4ba6      	ldr	r3, [pc, #664]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4ba5      	ldr	r3, [pc, #660]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003792:	49a7      	ldr	r1, [pc, #668]	@ (8003a30 <HAL_RCC_OscConfig+0x334>)
 8003794:	400a      	ands	r2, r1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e01e      	b.n	80037d8 <HAL_RCC_OscConfig+0xdc>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b05      	cmp	r3, #5
 80037a0:	d10e      	bne.n	80037c0 <HAL_RCC_OscConfig+0xc4>
 80037a2:	4ba1      	ldr	r3, [pc, #644]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4ba0      	ldr	r3, [pc, #640]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80037a8:	2180      	movs	r1, #128	@ 0x80
 80037aa:	02c9      	lsls	r1, r1, #11
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b9c      	ldr	r3, [pc, #624]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80037b6:	2180      	movs	r1, #128	@ 0x80
 80037b8:	0249      	lsls	r1, r1, #9
 80037ba:	430a      	orrs	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e00b      	b.n	80037d8 <HAL_RCC_OscConfig+0xdc>
 80037c0:	4b99      	ldr	r3, [pc, #612]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b98      	ldr	r3, [pc, #608]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80037c6:	4999      	ldr	r1, [pc, #612]	@ (8003a2c <HAL_RCC_OscConfig+0x330>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	4b96      	ldr	r3, [pc, #600]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b95      	ldr	r3, [pc, #596]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80037d2:	4997      	ldr	r1, [pc, #604]	@ (8003a30 <HAL_RCC_OscConfig+0x334>)
 80037d4:	400a      	ands	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d014      	beq.n	800380a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fe fefe 	bl	80025e0 <HAL_GetTick>
 80037e4:	0003      	movs	r3, r0
 80037e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ea:	f7fe fef9 	bl	80025e0 <HAL_GetTick>
 80037ee:	0002      	movs	r2, r0
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b64      	cmp	r3, #100	@ 0x64
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e28a      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fc:	4b8a      	ldr	r3, [pc, #552]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	2380      	movs	r3, #128	@ 0x80
 8003802:	029b      	lsls	r3, r3, #10
 8003804:	4013      	ands	r3, r2
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0xee>
 8003808:	e015      	b.n	8003836 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380a:	f7fe fee9 	bl	80025e0 <HAL_GetTick>
 800380e:	0003      	movs	r3, r0
 8003810:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003814:	f7fe fee4 	bl	80025e0 <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	@ 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e275      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b80      	ldr	r3, [pc, #512]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	2380      	movs	r3, #128	@ 0x80
 800382c:	029b      	lsls	r3, r3, #10
 800382e:	4013      	ands	r3, r2
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x118>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2202      	movs	r2, #2
 800383c:	4013      	ands	r3, r2
 800383e:	d100      	bne.n	8003842 <HAL_RCC_OscConfig+0x146>
 8003840:	e069      	b.n	8003916 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003842:	4b79      	ldr	r3, [pc, #484]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	220c      	movs	r2, #12
 8003848:	4013      	ands	r3, r2
 800384a:	d00b      	beq.n	8003864 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800384c:	4b76      	ldr	r3, [pc, #472]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	220c      	movs	r2, #12
 8003852:	4013      	ands	r3, r2
 8003854:	2b08      	cmp	r3, #8
 8003856:	d11c      	bne.n	8003892 <HAL_RCC_OscConfig+0x196>
 8003858:	4b73      	ldr	r3, [pc, #460]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	2380      	movs	r3, #128	@ 0x80
 800385e:	025b      	lsls	r3, r3, #9
 8003860:	4013      	ands	r3, r2
 8003862:	d116      	bne.n	8003892 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003864:	4b70      	ldr	r3, [pc, #448]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2202      	movs	r2, #2
 800386a:	4013      	ands	r3, r2
 800386c:	d005      	beq.n	800387a <HAL_RCC_OscConfig+0x17e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d001      	beq.n	800387a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e24b      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	22f8      	movs	r2, #248	@ 0xf8
 8003880:	4393      	bics	r3, r2
 8003882:	0019      	movs	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00da      	lsls	r2, r3, #3
 800388a:	4b67      	ldr	r3, [pc, #412]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003890:	e041      	b.n	8003916 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d024      	beq.n	80038e4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389a:	4b63      	ldr	r3, [pc, #396]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4b62      	ldr	r3, [pc, #392]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80038a0:	2101      	movs	r1, #1
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fe fe9b 	bl	80025e0 <HAL_GetTick>
 80038aa:	0003      	movs	r3, r0
 80038ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b0:	f7fe fe96 	bl	80025e0 <HAL_GetTick>
 80038b4:	0002      	movs	r2, r0
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e227      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c2:	4b59      	ldr	r3, [pc, #356]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	d0f1      	beq.n	80038b0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038cc:	4b56      	ldr	r3, [pc, #344]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	22f8      	movs	r2, #248	@ 0xf8
 80038d2:	4393      	bics	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00da      	lsls	r2, r3, #3
 80038dc:	4b52      	ldr	r3, [pc, #328]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80038de:	430a      	orrs	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e018      	b.n	8003916 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e4:	4b50      	ldr	r3, [pc, #320]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80038ea:	2101      	movs	r1, #1
 80038ec:	438a      	bics	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe fe76 	bl	80025e0 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fa:	f7fe fe71 	bl	80025e0 <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e202      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390c:	4b46      	ldr	r3, [pc, #280]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2202      	movs	r2, #2
 8003912:	4013      	ands	r3, r2
 8003914:	d1f1      	bne.n	80038fa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2208      	movs	r2, #8
 800391c:	4013      	ands	r3, r2
 800391e:	d036      	beq.n	800398e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d019      	beq.n	800395c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003928:	4b3f      	ldr	r3, [pc, #252]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800392a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800392c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800392e:	2101      	movs	r1, #1
 8003930:	430a      	orrs	r2, r1
 8003932:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003934:	f7fe fe54 	bl	80025e0 <HAL_GetTick>
 8003938:	0003      	movs	r3, r0
 800393a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393e:	f7fe fe4f 	bl	80025e0 <HAL_GetTick>
 8003942:	0002      	movs	r2, r0
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e1e0      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003950:	4b35      	ldr	r3, [pc, #212]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003954:	2202      	movs	r2, #2
 8003956:	4013      	ands	r3, r2
 8003958:	d0f1      	beq.n	800393e <HAL_RCC_OscConfig+0x242>
 800395a:	e018      	b.n	800398e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395c:	4b32      	ldr	r3, [pc, #200]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 800395e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003960:	4b31      	ldr	r3, [pc, #196]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003962:	2101      	movs	r1, #1
 8003964:	438a      	bics	r2, r1
 8003966:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003968:	f7fe fe3a 	bl	80025e0 <HAL_GetTick>
 800396c:	0003      	movs	r3, r0
 800396e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003972:	f7fe fe35 	bl	80025e0 <HAL_GetTick>
 8003976:	0002      	movs	r2, r0
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e1c6      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	4b28      	ldr	r3, [pc, #160]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	2202      	movs	r2, #2
 800398a:	4013      	ands	r3, r2
 800398c:	d1f1      	bne.n	8003972 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2204      	movs	r2, #4
 8003994:	4013      	ands	r3, r2
 8003996:	d100      	bne.n	800399a <HAL_RCC_OscConfig+0x29e>
 8003998:	e0b4      	b.n	8003b04 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399a:	201f      	movs	r0, #31
 800399c:	183b      	adds	r3, r7, r0
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a2:	4b21      	ldr	r3, [pc, #132]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	2380      	movs	r3, #128	@ 0x80
 80039a8:	055b      	lsls	r3, r3, #21
 80039aa:	4013      	ands	r3, r2
 80039ac:	d110      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80039b4:	2180      	movs	r1, #128	@ 0x80
 80039b6:	0549      	lsls	r1, r1, #21
 80039b8:	430a      	orrs	r2, r1
 80039ba:	61da      	str	r2, [r3, #28]
 80039bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	2380      	movs	r3, #128	@ 0x80
 80039c2:	055b      	lsls	r3, r3, #21
 80039c4:	4013      	ands	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039ca:	183b      	adds	r3, r7, r0
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d0:	4b18      	ldr	r3, [pc, #96]	@ (8003a34 <HAL_RCC_OscConfig+0x338>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4013      	ands	r3, r2
 80039da:	d11a      	bne.n	8003a12 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039dc:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <HAL_RCC_OscConfig+0x338>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b14      	ldr	r3, [pc, #80]	@ (8003a34 <HAL_RCC_OscConfig+0x338>)
 80039e2:	2180      	movs	r1, #128	@ 0x80
 80039e4:	0049      	lsls	r1, r1, #1
 80039e6:	430a      	orrs	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ea:	f7fe fdf9 	bl	80025e0 <HAL_GetTick>
 80039ee:	0003      	movs	r3, r0
 80039f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f4:	f7fe fdf4 	bl	80025e0 <HAL_GetTick>
 80039f8:	0002      	movs	r2, r0
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e185      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <HAL_RCC_OscConfig+0x338>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	2380      	movs	r3, #128	@ 0x80
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d10e      	bne.n	8003a38 <HAL_RCC_OscConfig+0x33c>
 8003a1a:	4b03      	ldr	r3, [pc, #12]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003a1c:	6a1a      	ldr	r2, [r3, #32]
 8003a1e:	4b02      	ldr	r3, [pc, #8]	@ (8003a28 <HAL_RCC_OscConfig+0x32c>)
 8003a20:	2101      	movs	r1, #1
 8003a22:	430a      	orrs	r2, r1
 8003a24:	621a      	str	r2, [r3, #32]
 8003a26:	e035      	b.n	8003a94 <HAL_RCC_OscConfig+0x398>
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	fffeffff 	.word	0xfffeffff
 8003a30:	fffbffff 	.word	0xfffbffff
 8003a34:	40007000 	.word	0x40007000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCC_OscConfig+0x35e>
 8003a40:	4bb6      	ldr	r3, [pc, #728]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a42:	6a1a      	ldr	r2, [r3, #32]
 8003a44:	4bb5      	ldr	r3, [pc, #724]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a46:	2101      	movs	r1, #1
 8003a48:	438a      	bics	r2, r1
 8003a4a:	621a      	str	r2, [r3, #32]
 8003a4c:	4bb3      	ldr	r3, [pc, #716]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a4e:	6a1a      	ldr	r2, [r3, #32]
 8003a50:	4bb2      	ldr	r3, [pc, #712]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a52:	2104      	movs	r1, #4
 8003a54:	438a      	bics	r2, r1
 8003a56:	621a      	str	r2, [r3, #32]
 8003a58:	e01c      	b.n	8003a94 <HAL_RCC_OscConfig+0x398>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b05      	cmp	r3, #5
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x380>
 8003a62:	4bae      	ldr	r3, [pc, #696]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a64:	6a1a      	ldr	r2, [r3, #32]
 8003a66:	4bad      	ldr	r3, [pc, #692]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a68:	2104      	movs	r1, #4
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	621a      	str	r2, [r3, #32]
 8003a6e:	4bab      	ldr	r3, [pc, #684]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	4baa      	ldr	r3, [pc, #680]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a74:	2101      	movs	r1, #1
 8003a76:	430a      	orrs	r2, r1
 8003a78:	621a      	str	r2, [r3, #32]
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0x398>
 8003a7c:	4ba7      	ldr	r3, [pc, #668]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	4ba6      	ldr	r3, [pc, #664]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a82:	2101      	movs	r1, #1
 8003a84:	438a      	bics	r2, r1
 8003a86:	621a      	str	r2, [r3, #32]
 8003a88:	4ba4      	ldr	r3, [pc, #656]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a8a:	6a1a      	ldr	r2, [r3, #32]
 8003a8c:	4ba3      	ldr	r3, [pc, #652]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003a8e:	2104      	movs	r1, #4
 8003a90:	438a      	bics	r2, r1
 8003a92:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d014      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9c:	f7fe fda0 	bl	80025e0 <HAL_GetTick>
 8003aa0:	0003      	movs	r3, r0
 8003aa2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	e009      	b.n	8003aba <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa6:	f7fe fd9b 	bl	80025e0 <HAL_GetTick>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	4a9b      	ldr	r2, [pc, #620]	@ (8003d20 <HAL_RCC_OscConfig+0x624>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e12b      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aba:	4b98      	ldr	r3, [pc, #608]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x3aa>
 8003ac4:	e013      	b.n	8003aee <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fe fd8b 	bl	80025e0 <HAL_GetTick>
 8003aca:	0003      	movs	r3, r0
 8003acc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ace:	e009      	b.n	8003ae4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7fe fd86 	bl	80025e0 <HAL_GetTick>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	4a91      	ldr	r2, [pc, #580]	@ (8003d20 <HAL_RCC_OscConfig+0x624>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e116      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	4013      	ands	r3, r2
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003aee:	231f      	movs	r3, #31
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af8:	4b88      	ldr	r3, [pc, #544]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	4b87      	ldr	r3, [pc, #540]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003afe:	4989      	ldr	r1, [pc, #548]	@ (8003d24 <HAL_RCC_OscConfig+0x628>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2210      	movs	r2, #16
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d063      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d12a      	bne.n	8003b6c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b16:	4b81      	ldr	r3, [pc, #516]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b1a:	4b80      	ldr	r3, [pc, #512]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b1c:	2104      	movs	r1, #4
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003b22:	4b7e      	ldr	r3, [pc, #504]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b26:	4b7d      	ldr	r3, [pc, #500]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b28:	2101      	movs	r1, #1
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fe fd57 	bl	80025e0 <HAL_GetTick>
 8003b32:	0003      	movs	r3, r0
 8003b34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b38:	f7fe fd52 	bl	80025e0 <HAL_GetTick>
 8003b3c:	0002      	movs	r2, r0
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0e3      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b4a:	4b74      	ldr	r3, [pc, #464]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4e:	2202      	movs	r2, #2
 8003b50:	4013      	ands	r3, r2
 8003b52:	d0f1      	beq.n	8003b38 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b54:	4b71      	ldr	r3, [pc, #452]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b58:	22f8      	movs	r2, #248	@ 0xf8
 8003b5a:	4393      	bics	r3, r2
 8003b5c:	0019      	movs	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	00da      	lsls	r2, r3, #3
 8003b64:	4b6d      	ldr	r3, [pc, #436]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b66:	430a      	orrs	r2, r1
 8003b68:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b6a:	e034      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	3305      	adds	r3, #5
 8003b72:	d111      	bne.n	8003b98 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003b74:	4b69      	ldr	r3, [pc, #420]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b78:	4b68      	ldr	r3, [pc, #416]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	438a      	bics	r2, r1
 8003b7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b80:	4b66      	ldr	r3, [pc, #408]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b84:	22f8      	movs	r2, #248	@ 0xf8
 8003b86:	4393      	bics	r3, r2
 8003b88:	0019      	movs	r1, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	00da      	lsls	r2, r3, #3
 8003b90:	4b62      	ldr	r3, [pc, #392]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b92:	430a      	orrs	r2, r1
 8003b94:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b96:	e01e      	b.n	8003bd6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b98:	4b60      	ldr	r3, [pc, #384]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003b9e:	2104      	movs	r1, #4
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003ba6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	438a      	bics	r2, r1
 8003bae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb0:	f7fe fd16 	bl	80025e0 <HAL_GetTick>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003bba:	f7fe fd11 	bl	80025e0 <HAL_GetTick>
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0a2      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bcc:	4b53      	ldr	r3, [pc, #332]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d1f1      	bne.n	8003bba <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d100      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4e4>
 8003bde:	e097      	b.n	8003d10 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003be0:	4b4e      	ldr	r3, [pc, #312]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	220c      	movs	r2, #12
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d100      	bne.n	8003bee <HAL_RCC_OscConfig+0x4f2>
 8003bec:	e06b      	b.n	8003cc6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d14c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	4b49      	ldr	r3, [pc, #292]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4b48      	ldr	r3, [pc, #288]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003bfc:	494a      	ldr	r1, [pc, #296]	@ (8003d28 <HAL_RCC_OscConfig+0x62c>)
 8003bfe:	400a      	ands	r2, r1
 8003c00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c02:	f7fe fced 	bl	80025e0 <HAL_GetTick>
 8003c06:	0003      	movs	r3, r0
 8003c08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fe fce8 	bl	80025e0 <HAL_GetTick>
 8003c10:	0002      	movs	r2, r0
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e079      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	049b      	lsls	r3, r3, #18
 8003c26:	4013      	ands	r3, r2
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	220f      	movs	r2, #15
 8003c30:	4393      	bics	r3, r2
 8003c32:	0019      	movs	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c38:	4b38      	ldr	r3, [pc, #224]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c3e:	4b37      	ldr	r3, [pc, #220]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4a3a      	ldr	r2, [pc, #232]	@ (8003d2c <HAL_RCC_OscConfig+0x630>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	431a      	orrs	r2, r3
 8003c52:	4b32      	ldr	r3, [pc, #200]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c58:	4b30      	ldr	r3, [pc, #192]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003c5e:	2180      	movs	r1, #128	@ 0x80
 8003c60:	0449      	lsls	r1, r1, #17
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c66:	f7fe fcbb 	bl	80025e0 <HAL_GetTick>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c70:	f7fe fcb6 	bl	80025e0 <HAL_GetTick>
 8003c74:	0002      	movs	r2, r0
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e047      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c82:	4b26      	ldr	r3, [pc, #152]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	2380      	movs	r3, #128	@ 0x80
 8003c88:	049b      	lsls	r3, r3, #18
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x574>
 8003c8e:	e03f      	b.n	8003d10 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c90:	4b22      	ldr	r3, [pc, #136]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b21      	ldr	r3, [pc, #132]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003c96:	4924      	ldr	r1, [pc, #144]	@ (8003d28 <HAL_RCC_OscConfig+0x62c>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fe fca0 	bl	80025e0 <HAL_GetTick>
 8003ca0:	0003      	movs	r3, r0
 8003ca2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fe fc9b 	bl	80025e0 <HAL_GetTick>
 8003caa:	0002      	movs	r2, r0
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e02c      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb8:	4b18      	ldr	r3, [pc, #96]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2380      	movs	r3, #128	@ 0x80
 8003cbe:	049b      	lsls	r3, r3, #18
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x5aa>
 8003cc4:	e024      	b.n	8003d10 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e01f      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003cd2:	4b12      	ldr	r3, [pc, #72]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003cd8:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <HAL_RCC_OscConfig+0x620>)
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	2380      	movs	r3, #128	@ 0x80
 8003ce2:	025b      	lsls	r3, r3, #9
 8003ce4:	401a      	ands	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d10e      	bne.n	8003d0c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	23f0      	movs	r3, #240	@ 0xf0
 8003d00:	039b      	lsls	r3, r3, #14
 8003d02:	401a      	ands	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b008      	add	sp, #32
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	00001388 	.word	0x00001388
 8003d24:	efffffff 	.word	0xefffffff
 8003d28:	feffffff 	.word	0xfeffffff
 8003d2c:	ffc2ffff 	.word	0xffc2ffff

08003d30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0b3      	b.n	8003eac <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb4 <HAL_RCC_ClockConfig+0x184>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d911      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d52:	4b58      	ldr	r3, [pc, #352]	@ (8003eb4 <HAL_RCC_ClockConfig+0x184>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2201      	movs	r2, #1
 8003d58:	4393      	bics	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	4b55      	ldr	r3, [pc, #340]	@ (8003eb4 <HAL_RCC_ClockConfig+0x184>)
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d64:	4b53      	ldr	r3, [pc, #332]	@ (8003eb4 <HAL_RCC_ClockConfig+0x184>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d001      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e09a      	b.n	8003eac <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d015      	beq.n	8003dac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2204      	movs	r2, #4
 8003d86:	4013      	ands	r3, r2
 8003d88:	d006      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003d90:	21e0      	movs	r1, #224	@ 0xe0
 8003d92:	00c9      	lsls	r1, r1, #3
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b47      	ldr	r3, [pc, #284]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	22f0      	movs	r2, #240	@ 0xf0
 8003d9e:	4393      	bics	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	4b44      	ldr	r3, [pc, #272]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2201      	movs	r2, #1
 8003db2:	4013      	ands	r3, r2
 8003db4:	d040      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	2380      	movs	r3, #128	@ 0x80
 8003dc4:	029b      	lsls	r3, r3, #10
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d114      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e06e      	b.n	8003eac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b38      	ldr	r3, [pc, #224]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	2380      	movs	r3, #128	@ 0x80
 8003ddc:	049b      	lsls	r3, r3, #18
 8003dde:	4013      	ands	r3, r2
 8003de0:	d108      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e062      	b.n	8003eac <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b34      	ldr	r3, [pc, #208]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2202      	movs	r2, #2
 8003dec:	4013      	ands	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e05b      	b.n	8003eac <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df4:	4b30      	ldr	r3, [pc, #192]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2203      	movs	r2, #3
 8003dfa:	4393      	bics	r3, r2
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fe fbea 	bl	80025e0 <HAL_GetTick>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e10:	e009      	b.n	8003e26 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e12:	f7fe fbe5 	bl	80025e0 <HAL_GetTick>
 8003e16:	0002      	movs	r2, r0
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	4a27      	ldr	r2, [pc, #156]	@ (8003ebc <HAL_RCC_ClockConfig+0x18c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e042      	b.n	8003eac <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b24      	ldr	r3, [pc, #144]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	220c      	movs	r2, #12
 8003e2c:	401a      	ands	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1ec      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb4 <HAL_RCC_ClockConfig+0x184>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4013      	ands	r3, r2
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d211      	bcs.n	8003e6a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <HAL_RCC_ClockConfig+0x184>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4393      	bics	r3, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	4b18      	ldr	r3, [pc, #96]	@ (8003eb4 <HAL_RCC_ClockConfig+0x184>)
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e58:	4b16      	ldr	r3, [pc, #88]	@ (8003eb4 <HAL_RCC_ClockConfig+0x184>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	4013      	ands	r3, r2
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e020      	b.n	8003eac <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	4013      	ands	r3, r2
 8003e72:	d009      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	4a11      	ldr	r2, [pc, #68]	@ (8003ec0 <HAL_RCC_ClockConfig+0x190>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e88:	f000 f820 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8003e8c:	0001      	movs	r1, r0
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <HAL_RCC_ClockConfig+0x188>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	220f      	movs	r2, #15
 8003e96:	4013      	ands	r3, r2
 8003e98:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec4 <HAL_RCC_ClockConfig+0x194>)
 8003e9a:	5cd3      	ldrb	r3, [r2, r3]
 8003e9c:	000a      	movs	r2, r1
 8003e9e:	40da      	lsrs	r2, r3
 8003ea0:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <HAL_RCC_ClockConfig+0x198>)
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fe fb55 	bl	8002554 <HAL_InitTick>
  
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	0018      	movs	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b004      	add	sp, #16
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40022000 	.word	0x40022000
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	00001388 	.word	0x00001388
 8003ec0:	fffff8ff 	.word	0xfffff8ff
 8003ec4:	08005304 	.word	0x08005304
 8003ec8:	20000008 	.word	0x20000008

08003ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ee6:	4b20      	ldr	r3, [pc, #128]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	220c      	movs	r2, #12
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d002      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x30>
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0x36>
 8003efa:	e02c      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003efc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003efe:	613b      	str	r3, [r7, #16]
      break;
 8003f00:	e02c      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	0c9b      	lsrs	r3, r3, #18
 8003f06:	220f      	movs	r2, #15
 8003f08:	4013      	ands	r3, r2
 8003f0a:	4a19      	ldr	r2, [pc, #100]	@ (8003f70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f0c:	5cd3      	ldrb	r3, [r2, r3]
 8003f0e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003f10:	4b15      	ldr	r3, [pc, #84]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	220f      	movs	r2, #15
 8003f16:	4013      	ands	r3, r2
 8003f18:	4a16      	ldr	r2, [pc, #88]	@ (8003f74 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003f1a:	5cd3      	ldrb	r3, [r2, r3]
 8003f1c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	025b      	lsls	r3, r3, #9
 8003f24:	4013      	ands	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	4810      	ldr	r0, [pc, #64]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f2c:	f7fc f8f6 	bl	800011c <__udivsi3>
 8003f30:	0003      	movs	r3, r0
 8003f32:	001a      	movs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4353      	muls	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e009      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	000a      	movs	r2, r1
 8003f40:	0152      	lsls	r2, r2, #5
 8003f42:	1a52      	subs	r2, r2, r1
 8003f44:	0193      	lsls	r3, r2, #6
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	185b      	adds	r3, r3, r1
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	613b      	str	r3, [r7, #16]
      break;
 8003f54:	e002      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f56:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f58:	613b      	str	r3, [r7, #16]
      break;
 8003f5a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f5c:	693b      	ldr	r3, [r7, #16]
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b006      	add	sp, #24
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	007a1200 	.word	0x007a1200
 8003f70:	08005a94 	.word	0x08005a94
 8003f74:	08005aa4 	.word	0x08005aa4

08003f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f7c:	4b02      	ldr	r3, [pc, #8]	@ (8003f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
}
 8003f80:	0018      	movs	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	20000008 	.word	0x20000008

08003f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003f90:	f7ff fff2 	bl	8003f78 <HAL_RCC_GetHCLKFreq>
 8003f94:	0001      	movs	r1, r0
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	0a1b      	lsrs	r3, r3, #8
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	4a04      	ldr	r2, [pc, #16]	@ (8003fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	40d9      	lsrs	r1, r3
 8003fa6:	000b      	movs	r3, r1
}    
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	08005314 	.word	0x08005314

08003fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2380      	movs	r3, #128	@ 0x80
 8003fce:	025b      	lsls	r3, r3, #9
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d100      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003fd4:	e08e      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003fd6:	2017      	movs	r0, #23
 8003fd8:	183b      	adds	r3, r7, r0
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fde:	4b5f      	ldr	r3, [pc, #380]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	2380      	movs	r3, #128	@ 0x80
 8003fe4:	055b      	lsls	r3, r3, #21
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d110      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	4b5c      	ldr	r3, [pc, #368]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	4b5b      	ldr	r3, [pc, #364]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ff0:	2180      	movs	r1, #128	@ 0x80
 8003ff2:	0549      	lsls	r1, r1, #21
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	61da      	str	r2, [r3, #28]
 8003ff8:	4b58      	ldr	r3, [pc, #352]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	2380      	movs	r3, #128	@ 0x80
 8003ffe:	055b      	lsls	r3, r3, #21
 8004000:	4013      	ands	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004006:	183b      	adds	r3, r7, r0
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400c:	4b54      	ldr	r3, [pc, #336]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2380      	movs	r3, #128	@ 0x80
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4013      	ands	r3, r2
 8004016:	d11a      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004018:	4b51      	ldr	r3, [pc, #324]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b50      	ldr	r3, [pc, #320]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800401e:	2180      	movs	r1, #128	@ 0x80
 8004020:	0049      	lsls	r1, r1, #1
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004026:	f7fe fadb 	bl	80025e0 <HAL_GetTick>
 800402a:	0003      	movs	r3, r0
 800402c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	e008      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004030:	f7fe fad6 	bl	80025e0 <HAL_GetTick>
 8004034:	0002      	movs	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	@ 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e087      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	4b47      	ldr	r3, [pc, #284]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	2380      	movs	r3, #128	@ 0x80
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4013      	ands	r3, r2
 800404c:	d0f0      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800404e:	4b43      	ldr	r3, [pc, #268]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	23c0      	movs	r3, #192	@ 0xc0
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4013      	ands	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d034      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	23c0      	movs	r3, #192	@ 0xc0
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4013      	ands	r3, r2
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	429a      	cmp	r2, r3
 800406e:	d02c      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004070:	4b3a      	ldr	r3, [pc, #232]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	4a3b      	ldr	r2, [pc, #236]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004076:	4013      	ands	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800407a:	4b38      	ldr	r3, [pc, #224]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800407c:	6a1a      	ldr	r2, [r3, #32]
 800407e:	4b37      	ldr	r3, [pc, #220]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004080:	2180      	movs	r1, #128	@ 0x80
 8004082:	0249      	lsls	r1, r1, #9
 8004084:	430a      	orrs	r2, r1
 8004086:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004088:	4b34      	ldr	r3, [pc, #208]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800408a:	6a1a      	ldr	r2, [r3, #32]
 800408c:	4b33      	ldr	r3, [pc, #204]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800408e:	4936      	ldr	r1, [pc, #216]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004090:	400a      	ands	r2, r1
 8004092:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004094:	4b31      	ldr	r3, [pc, #196]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	4013      	ands	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fe fa9d 	bl	80025e0 <HAL_GetTick>
 80040a6:	0003      	movs	r3, r0
 80040a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040aa:	e009      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fe fa98 	bl	80025e0 <HAL_GetTick>
 80040b0:	0002      	movs	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	4a2d      	ldr	r2, [pc, #180]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e048      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	4b26      	ldr	r3, [pc, #152]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	2202      	movs	r2, #2
 80040c6:	4013      	ands	r3, r2
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ca:	4b24      	ldr	r3, [pc, #144]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4a25      	ldr	r2, [pc, #148]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	0019      	movs	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4b20      	ldr	r3, [pc, #128]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040da:	430a      	orrs	r2, r1
 80040dc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040de:	2317      	movs	r3, #23
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b1c      	ldr	r3, [pc, #112]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	4b1b      	ldr	r3, [pc, #108]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80040ee:	4920      	ldr	r1, [pc, #128]	@ (8004170 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2201      	movs	r2, #1
 80040fa:	4013      	ands	r3, r2
 80040fc:	d009      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040fe:	4b17      	ldr	r3, [pc, #92]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	2203      	movs	r2, #3
 8004104:	4393      	bics	r3, r2
 8004106:	0019      	movs	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	4b13      	ldr	r3, [pc, #76]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800410e:	430a      	orrs	r2, r1
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2220      	movs	r2, #32
 8004118:	4013      	ands	r3, r2
 800411a:	d009      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800411c:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	2210      	movs	r2, #16
 8004122:	4393      	bics	r3, r2
 8004124:	0019      	movs	r1, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800412c:	430a      	orrs	r2, r1
 800412e:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4013      	ands	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800413c:	4b07      	ldr	r3, [pc, #28]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004140:	2240      	movs	r2, #64	@ 0x40
 8004142:	4393      	bics	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	4b04      	ldr	r3, [pc, #16]	@ (800415c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800414c:	430a      	orrs	r2, r1
 800414e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	0018      	movs	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	b006      	add	sp, #24
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			@ (mov r8, r8)
 800415c:	40021000 	.word	0x40021000
 8004160:	40007000 	.word	0x40007000
 8004164:	fffffcff 	.word	0xfffffcff
 8004168:	fffeffff 	.word	0xfffeffff
 800416c:	00001388 	.word	0x00001388
 8004170:	efffffff 	.word	0xefffffff

08004174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e044      	b.n	8004210 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2278      	movs	r2, #120	@ 0x78
 8004192:	2100      	movs	r1, #0
 8004194:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	0018      	movs	r0, r3
 800419a:	f7fd fac5 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2224      	movs	r2, #36	@ 0x24
 80041a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2101      	movs	r1, #1
 80041b0:	438a      	bics	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 f96c 	bl	800449c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	0018      	movs	r0, r3
 80041c8:	f000 f828 	bl	800421c <UART_SetConfig>
 80041cc:	0003      	movs	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e01c      	b.n	8004210 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	490d      	ldr	r1, [pc, #52]	@ (8004218 <HAL_UART_Init+0xa4>)
 80041e2:	400a      	ands	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	212a      	movs	r1, #42	@ 0x2a
 80041f2:	438a      	bics	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2101      	movs	r1, #1
 8004202:	430a      	orrs	r2, r1
 8004204:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f000 f9fb 	bl	8004604 <UART_CheckIdleState>
 800420e:	0003      	movs	r3, r0
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}
 8004218:	ffffb7ff 	.word	0xffffb7ff

0800421c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004224:	231e      	movs	r3, #30
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a8d      	ldr	r2, [pc, #564]	@ (8004480 <UART_SetConfig+0x264>)
 800424c:	4013      	ands	r3, r2
 800424e:	0019      	movs	r1, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	430a      	orrs	r2, r1
 8004258:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4a88      	ldr	r2, [pc, #544]	@ (8004484 <UART_SetConfig+0x268>)
 8004262:	4013      	ands	r3, r2
 8004264:	0019      	movs	r1, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a7f      	ldr	r2, [pc, #508]	@ (8004488 <UART_SetConfig+0x26c>)
 800428a:	4013      	ands	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	430a      	orrs	r2, r1
 8004296:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a7b      	ldr	r2, [pc, #492]	@ (800448c <UART_SetConfig+0x270>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d127      	bne.n	80042f2 <UART_SetConfig+0xd6>
 80042a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004490 <UART_SetConfig+0x274>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	2203      	movs	r2, #3
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d00d      	beq.n	80042ca <UART_SetConfig+0xae>
 80042ae:	d81b      	bhi.n	80042e8 <UART_SetConfig+0xcc>
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d014      	beq.n	80042de <UART_SetConfig+0xc2>
 80042b4:	d818      	bhi.n	80042e8 <UART_SetConfig+0xcc>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <UART_SetConfig+0xa4>
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d00a      	beq.n	80042d4 <UART_SetConfig+0xb8>
 80042be:	e013      	b.n	80042e8 <UART_SetConfig+0xcc>
 80042c0:	231f      	movs	r3, #31
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e021      	b.n	800430e <UART_SetConfig+0xf2>
 80042ca:	231f      	movs	r3, #31
 80042cc:	18fb      	adds	r3, r7, r3
 80042ce:	2202      	movs	r2, #2
 80042d0:	701a      	strb	r2, [r3, #0]
 80042d2:	e01c      	b.n	800430e <UART_SetConfig+0xf2>
 80042d4:	231f      	movs	r3, #31
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	2204      	movs	r2, #4
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	e017      	b.n	800430e <UART_SetConfig+0xf2>
 80042de:	231f      	movs	r3, #31
 80042e0:	18fb      	adds	r3, r7, r3
 80042e2:	2208      	movs	r2, #8
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	e012      	b.n	800430e <UART_SetConfig+0xf2>
 80042e8:	231f      	movs	r3, #31
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	2210      	movs	r2, #16
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	e00d      	b.n	800430e <UART_SetConfig+0xf2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a67      	ldr	r2, [pc, #412]	@ (8004494 <UART_SetConfig+0x278>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d104      	bne.n	8004306 <UART_SetConfig+0xea>
 80042fc:	231f      	movs	r3, #31
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	e003      	b.n	800430e <UART_SetConfig+0xf2>
 8004306:	231f      	movs	r3, #31
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	2210      	movs	r2, #16
 800430c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	2380      	movs	r3, #128	@ 0x80
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	429a      	cmp	r2, r3
 8004318:	d15c      	bne.n	80043d4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800431a:	231f      	movs	r3, #31
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b08      	cmp	r3, #8
 8004322:	d015      	beq.n	8004350 <UART_SetConfig+0x134>
 8004324:	dc18      	bgt.n	8004358 <UART_SetConfig+0x13c>
 8004326:	2b04      	cmp	r3, #4
 8004328:	d00d      	beq.n	8004346 <UART_SetConfig+0x12a>
 800432a:	dc15      	bgt.n	8004358 <UART_SetConfig+0x13c>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <UART_SetConfig+0x11a>
 8004330:	2b02      	cmp	r3, #2
 8004332:	d005      	beq.n	8004340 <UART_SetConfig+0x124>
 8004334:	e010      	b.n	8004358 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004336:	f7ff fe29 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 800433a:	0003      	movs	r3, r0
 800433c:	61bb      	str	r3, [r7, #24]
        break;
 800433e:	e012      	b.n	8004366 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004340:	4b55      	ldr	r3, [pc, #340]	@ (8004498 <UART_SetConfig+0x27c>)
 8004342:	61bb      	str	r3, [r7, #24]
        break;
 8004344:	e00f      	b.n	8004366 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004346:	f7ff fdc1 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 800434a:	0003      	movs	r3, r0
 800434c:	61bb      	str	r3, [r7, #24]
        break;
 800434e:	e00a      	b.n	8004366 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	61bb      	str	r3, [r7, #24]
        break;
 8004356:	e006      	b.n	8004366 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800435c:	231e      	movs	r3, #30
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
        break;
 8004364:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d100      	bne.n	800436e <UART_SetConfig+0x152>
 800436c:	e07a      	b.n	8004464 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	005a      	lsls	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	18d2      	adds	r2, r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	0019      	movs	r1, r3
 8004380:	0010      	movs	r0, r2
 8004382:	f7fb fecb 	bl	800011c <__udivsi3>
 8004386:	0003      	movs	r3, r0
 8004388:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b0f      	cmp	r3, #15
 800438e:	d91c      	bls.n	80043ca <UART_SetConfig+0x1ae>
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	2380      	movs	r3, #128	@ 0x80
 8004394:	025b      	lsls	r3, r3, #9
 8004396:	429a      	cmp	r2, r3
 8004398:	d217      	bcs.n	80043ca <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	b29a      	uxth	r2, r3
 800439e:	200e      	movs	r0, #14
 80043a0:	183b      	adds	r3, r7, r0
 80043a2:	210f      	movs	r1, #15
 80043a4:	438a      	bics	r2, r1
 80043a6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2207      	movs	r2, #7
 80043b0:	4013      	ands	r3, r2
 80043b2:	b299      	uxth	r1, r3
 80043b4:	183b      	adds	r3, r7, r0
 80043b6:	183a      	adds	r2, r7, r0
 80043b8:	8812      	ldrh	r2, [r2, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	183a      	adds	r2, r7, r0
 80043c4:	8812      	ldrh	r2, [r2, #0]
 80043c6:	60da      	str	r2, [r3, #12]
 80043c8:	e04c      	b.n	8004464 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80043ca:	231e      	movs	r3, #30
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
 80043d2:	e047      	b.n	8004464 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043d4:	231f      	movs	r3, #31
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d015      	beq.n	800440a <UART_SetConfig+0x1ee>
 80043de:	dc18      	bgt.n	8004412 <UART_SetConfig+0x1f6>
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d00d      	beq.n	8004400 <UART_SetConfig+0x1e4>
 80043e4:	dc15      	bgt.n	8004412 <UART_SetConfig+0x1f6>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <UART_SetConfig+0x1d4>
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d005      	beq.n	80043fa <UART_SetConfig+0x1de>
 80043ee:	e010      	b.n	8004412 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7ff fdcc 	bl	8003f8c <HAL_RCC_GetPCLK1Freq>
 80043f4:	0003      	movs	r3, r0
 80043f6:	61bb      	str	r3, [r7, #24]
        break;
 80043f8:	e012      	b.n	8004420 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043fa:	4b27      	ldr	r3, [pc, #156]	@ (8004498 <UART_SetConfig+0x27c>)
 80043fc:	61bb      	str	r3, [r7, #24]
        break;
 80043fe:	e00f      	b.n	8004420 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004400:	f7ff fd64 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8004404:	0003      	movs	r3, r0
 8004406:	61bb      	str	r3, [r7, #24]
        break;
 8004408:	e00a      	b.n	8004420 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440a:	2380      	movs	r3, #128	@ 0x80
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	61bb      	str	r3, [r7, #24]
        break;
 8004410:	e006      	b.n	8004420 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004416:	231e      	movs	r3, #30
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]
        break;
 800441e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01e      	beq.n	8004464 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	085a      	lsrs	r2, r3, #1
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	18d2      	adds	r2, r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	0019      	movs	r1, r3
 8004436:	0010      	movs	r0, r2
 8004438:	f7fb fe70 	bl	800011c <__udivsi3>
 800443c:	0003      	movs	r3, r0
 800443e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	2b0f      	cmp	r3, #15
 8004444:	d90a      	bls.n	800445c <UART_SetConfig+0x240>
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	2380      	movs	r3, #128	@ 0x80
 800444a:	025b      	lsls	r3, r3, #9
 800444c:	429a      	cmp	r2, r3
 800444e:	d205      	bcs.n	800445c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e003      	b.n	8004464 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800445c:	231e      	movs	r3, #30
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004470:	231e      	movs	r3, #30
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	781b      	ldrb	r3, [r3, #0]
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b008      	add	sp, #32
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	ffff69f3 	.word	0xffff69f3
 8004484:	ffffcfff 	.word	0xffffcfff
 8004488:	fffff4ff 	.word	0xfffff4ff
 800448c:	40013800 	.word	0x40013800
 8004490:	40021000 	.word	0x40021000
 8004494:	40004400 	.word	0x40004400
 8004498:	007a1200 	.word	0x007a1200

0800449c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	2208      	movs	r2, #8
 80044aa:	4013      	ands	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4a4a      	ldr	r2, [pc, #296]	@ (80045e0 <UART_AdvFeatureConfig+0x144>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	0019      	movs	r1, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	2201      	movs	r2, #1
 80044cc:	4013      	ands	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4a43      	ldr	r2, [pc, #268]	@ (80045e4 <UART_AdvFeatureConfig+0x148>)
 80044d8:	4013      	ands	r3, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	2202      	movs	r2, #2
 80044ee:	4013      	ands	r3, r2
 80044f0:	d00b      	beq.n	800450a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4a3b      	ldr	r2, [pc, #236]	@ (80045e8 <UART_AdvFeatureConfig+0x14c>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	0019      	movs	r1, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	2204      	movs	r2, #4
 8004510:	4013      	ands	r3, r2
 8004512:	d00b      	beq.n	800452c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4a34      	ldr	r2, [pc, #208]	@ (80045ec <UART_AdvFeatureConfig+0x150>)
 800451c:	4013      	ands	r3, r2
 800451e:	0019      	movs	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	2210      	movs	r2, #16
 8004532:	4013      	ands	r3, r2
 8004534:	d00b      	beq.n	800454e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	4a2c      	ldr	r2, [pc, #176]	@ (80045f0 <UART_AdvFeatureConfig+0x154>)
 800453e:	4013      	ands	r3, r2
 8004540:	0019      	movs	r1, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	2220      	movs	r2, #32
 8004554:	4013      	ands	r3, r2
 8004556:	d00b      	beq.n	8004570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4a25      	ldr	r2, [pc, #148]	@ (80045f4 <UART_AdvFeatureConfig+0x158>)
 8004560:	4013      	ands	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	2240      	movs	r2, #64	@ 0x40
 8004576:	4013      	ands	r3, r2
 8004578:	d01d      	beq.n	80045b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	4a1d      	ldr	r2, [pc, #116]	@ (80045f8 <UART_AdvFeatureConfig+0x15c>)
 8004582:	4013      	ands	r3, r2
 8004584:	0019      	movs	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004596:	2380      	movs	r3, #128	@ 0x80
 8004598:	035b      	lsls	r3, r3, #13
 800459a:	429a      	cmp	r2, r3
 800459c:	d10b      	bne.n	80045b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a15      	ldr	r2, [pc, #84]	@ (80045fc <UART_AdvFeatureConfig+0x160>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	0019      	movs	r1, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	2280      	movs	r2, #128	@ 0x80
 80045bc:	4013      	ands	r3, r2
 80045be:	d00b      	beq.n	80045d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004600 <UART_AdvFeatureConfig+0x164>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }
}
 80045d8:	46c0      	nop			@ (mov r8, r8)
 80045da:	46bd      	mov	sp, r7
 80045dc:	b002      	add	sp, #8
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	ffff7fff 	.word	0xffff7fff
 80045e4:	fffdffff 	.word	0xfffdffff
 80045e8:	fffeffff 	.word	0xfffeffff
 80045ec:	fffbffff 	.word	0xfffbffff
 80045f0:	ffffefff 	.word	0xffffefff
 80045f4:	ffffdfff 	.word	0xffffdfff
 80045f8:	ffefffff 	.word	0xffefffff
 80045fc:	ff9fffff 	.word	0xff9fffff
 8004600:	fff7ffff 	.word	0xfff7ffff

08004604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b092      	sub	sp, #72	@ 0x48
 8004608:	af02      	add	r7, sp, #8
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2284      	movs	r2, #132	@ 0x84
 8004610:	2100      	movs	r1, #0
 8004612:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004614:	f7fd ffe4 	bl	80025e0 <HAL_GetTick>
 8004618:	0003      	movs	r3, r0
 800461a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2208      	movs	r2, #8
 8004624:	4013      	ands	r3, r2
 8004626:	2b08      	cmp	r3, #8
 8004628:	d12c      	bne.n	8004684 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462c:	2280      	movs	r2, #128	@ 0x80
 800462e:	0391      	lsls	r1, r2, #14
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	4a46      	ldr	r2, [pc, #280]	@ (800474c <UART_CheckIdleState+0x148>)
 8004634:	9200      	str	r2, [sp, #0]
 8004636:	2200      	movs	r2, #0
 8004638:	f000 f88c 	bl	8004754 <UART_WaitOnFlagUntilTimeout>
 800463c:	1e03      	subs	r3, r0, #0
 800463e:	d021      	beq.n	8004684 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004640:	f3ef 8310 	mrs	r3, PRIMASK
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004648:	63bb      	str	r3, [r7, #56]	@ 0x38
 800464a:	2301      	movs	r3, #1
 800464c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	f383 8810 	msr	PRIMASK, r3
}
 8004654:	46c0      	nop			@ (mov r8, r8)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2180      	movs	r1, #128	@ 0x80
 8004662:	438a      	bics	r2, r1
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466c:	f383 8810 	msr	PRIMASK, r3
}
 8004670:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2278      	movs	r2, #120	@ 0x78
 800467c:	2100      	movs	r1, #0
 800467e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e05f      	b.n	8004744 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2204      	movs	r2, #4
 800468c:	4013      	ands	r3, r2
 800468e:	2b04      	cmp	r3, #4
 8004690:	d146      	bne.n	8004720 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004694:	2280      	movs	r2, #128	@ 0x80
 8004696:	03d1      	lsls	r1, r2, #15
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4a2c      	ldr	r2, [pc, #176]	@ (800474c <UART_CheckIdleState+0x148>)
 800469c:	9200      	str	r2, [sp, #0]
 800469e:	2200      	movs	r2, #0
 80046a0:	f000 f858 	bl	8004754 <UART_WaitOnFlagUntilTimeout>
 80046a4:	1e03      	subs	r3, r0, #0
 80046a6:	d03b      	beq.n	8004720 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a8:	f3ef 8310 	mrs	r3, PRIMASK
 80046ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80046ae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046b2:	2301      	movs	r3, #1
 80046b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f383 8810 	msr	PRIMASK, r3
}
 80046bc:	46c0      	nop			@ (mov r8, r8)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4921      	ldr	r1, [pc, #132]	@ (8004750 <UART_CheckIdleState+0x14c>)
 80046ca:	400a      	ands	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046da:	f3ef 8310 	mrs	r3, PRIMASK
 80046de:	61bb      	str	r3, [r7, #24]
  return(result);
 80046e0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e4:	2301      	movs	r3, #1
 80046e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f383 8810 	msr	PRIMASK, r3
}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2101      	movs	r1, #1
 80046fc:	438a      	bics	r2, r1
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004702:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f383 8810 	msr	PRIMASK, r3
}
 800470a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2280      	movs	r2, #128	@ 0x80
 8004710:	2120      	movs	r1, #32
 8004712:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2278      	movs	r2, #120	@ 0x78
 8004718:	2100      	movs	r1, #0
 800471a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e011      	b.n	8004744 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2280      	movs	r2, #128	@ 0x80
 800472a:	2120      	movs	r1, #32
 800472c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2278      	movs	r2, #120	@ 0x78
 800473e:	2100      	movs	r1, #0
 8004740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b010      	add	sp, #64	@ 0x40
 800474a:	bd80      	pop	{r7, pc}
 800474c:	01ffffff 	.word	0x01ffffff
 8004750:	fffffedf 	.word	0xfffffedf

08004754 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	1dfb      	adds	r3, r7, #7
 8004762:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004764:	e051      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	3301      	adds	r3, #1
 800476a:	d04e      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476c:	f7fd ff38 	bl	80025e0 <HAL_GetTick>
 8004770:	0002      	movs	r2, r0
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <UART_WaitOnFlagUntilTimeout+0x2e>
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e051      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2204      	movs	r2, #4
 800478e:	4013      	ands	r3, r2
 8004790:	d03b      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b80      	cmp	r3, #128	@ 0x80
 8004796:	d038      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b40      	cmp	r3, #64	@ 0x40
 800479c:	d035      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	2208      	movs	r2, #8
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d111      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2208      	movs	r2, #8
 80047b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 f83c 	bl	8004834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2284      	movs	r2, #132	@ 0x84
 80047c0:	2108      	movs	r1, #8
 80047c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2278      	movs	r2, #120	@ 0x78
 80047c8:	2100      	movs	r1, #0
 80047ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e02c      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	2380      	movs	r3, #128	@ 0x80
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	401a      	ands	r2, r3
 80047dc:	2380      	movs	r3, #128	@ 0x80
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d112      	bne.n	800480a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2280      	movs	r2, #128	@ 0x80
 80047ea:	0112      	lsls	r2, r2, #4
 80047ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 f81f 	bl	8004834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2284      	movs	r2, #132	@ 0x84
 80047fa:	2120      	movs	r1, #32
 80047fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2278      	movs	r2, #120	@ 0x78
 8004802:	2100      	movs	r1, #0
 8004804:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e00f      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	425a      	negs	r2, r3
 800481a:	4153      	adcs	r3, r2
 800481c:	b2db      	uxtb	r3, r3
 800481e:	001a      	movs	r2, r3
 8004820:	1dfb      	adds	r3, r7, #7
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d09e      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b004      	add	sp, #16
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08e      	sub	sp, #56	@ 0x38
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483c:	f3ef 8310 	mrs	r3, PRIMASK
 8004840:	617b      	str	r3, [r7, #20]
  return(result);
 8004842:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004844:	637b      	str	r3, [r7, #52]	@ 0x34
 8004846:	2301      	movs	r3, #1
 8004848:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f383 8810 	msr	PRIMASK, r3
}
 8004850:	46c0      	nop			@ (mov r8, r8)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4926      	ldr	r1, [pc, #152]	@ (80048f8 <UART_EndRxTransfer+0xc4>)
 800485e:	400a      	ands	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f383 8810 	msr	PRIMASK, r3
}
 800486c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486e:	f3ef 8310 	mrs	r3, PRIMASK
 8004872:	623b      	str	r3, [r7, #32]
  return(result);
 8004874:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	633b      	str	r3, [r7, #48]	@ 0x30
 8004878:	2301      	movs	r3, #1
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	f383 8810 	msr	PRIMASK, r3
}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2101      	movs	r1, #1
 8004890:	438a      	bics	r2, r1
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004896:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489a:	f383 8810 	msr	PRIMASK, r3
}
 800489e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d118      	bne.n	80048da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a8:	f3ef 8310 	mrs	r3, PRIMASK
 80048ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b2:	2301      	movs	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f383 8810 	msr	PRIMASK, r3
}
 80048bc:	46c0      	nop			@ (mov r8, r8)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2110      	movs	r1, #16
 80048ca:	438a      	bics	r2, r1
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f383 8810 	msr	PRIMASK, r3
}
 80048d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2280      	movs	r2, #128	@ 0x80
 80048de:	2120      	movs	r1, #32
 80048e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b00e      	add	sp, #56	@ 0x38
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	fffffedf 	.word	0xfffffedf

080048fc <sniprintf>:
 80048fc:	b40c      	push	{r2, r3}
 80048fe:	b530      	push	{r4, r5, lr}
 8004900:	4b18      	ldr	r3, [pc, #96]	@ (8004964 <sniprintf+0x68>)
 8004902:	000c      	movs	r4, r1
 8004904:	681d      	ldr	r5, [r3, #0]
 8004906:	b09d      	sub	sp, #116	@ 0x74
 8004908:	2900      	cmp	r1, #0
 800490a:	da08      	bge.n	800491e <sniprintf+0x22>
 800490c:	238b      	movs	r3, #139	@ 0x8b
 800490e:	2001      	movs	r0, #1
 8004910:	602b      	str	r3, [r5, #0]
 8004912:	4240      	negs	r0, r0
 8004914:	b01d      	add	sp, #116	@ 0x74
 8004916:	bc30      	pop	{r4, r5}
 8004918:	bc08      	pop	{r3}
 800491a:	b002      	add	sp, #8
 800491c:	4718      	bx	r3
 800491e:	2382      	movs	r3, #130	@ 0x82
 8004920:	466a      	mov	r2, sp
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	8293      	strh	r3, [r2, #20]
 8004926:	2300      	movs	r3, #0
 8004928:	9002      	str	r0, [sp, #8]
 800492a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800492c:	9006      	str	r0, [sp, #24]
 800492e:	4299      	cmp	r1, r3
 8004930:	d000      	beq.n	8004934 <sniprintf+0x38>
 8004932:	1e4b      	subs	r3, r1, #1
 8004934:	9304      	str	r3, [sp, #16]
 8004936:	9307      	str	r3, [sp, #28]
 8004938:	2301      	movs	r3, #1
 800493a:	466a      	mov	r2, sp
 800493c:	425b      	negs	r3, r3
 800493e:	82d3      	strh	r3, [r2, #22]
 8004940:	0028      	movs	r0, r5
 8004942:	ab21      	add	r3, sp, #132	@ 0x84
 8004944:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004946:	a902      	add	r1, sp, #8
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	f000 f9a7 	bl	8004c9c <_svfiprintf_r>
 800494e:	1c43      	adds	r3, r0, #1
 8004950:	da01      	bge.n	8004956 <sniprintf+0x5a>
 8004952:	238b      	movs	r3, #139	@ 0x8b
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	2c00      	cmp	r4, #0
 8004958:	d0dc      	beq.n	8004914 <sniprintf+0x18>
 800495a:	2200      	movs	r2, #0
 800495c:	9b02      	ldr	r3, [sp, #8]
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	e7d8      	b.n	8004914 <sniprintf+0x18>
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	20000014 	.word	0x20000014

08004968 <memset>:
 8004968:	0003      	movs	r3, r0
 800496a:	1882      	adds	r2, r0, r2
 800496c:	4293      	cmp	r3, r2
 800496e:	d100      	bne.n	8004972 <memset+0xa>
 8004970:	4770      	bx	lr
 8004972:	7019      	strb	r1, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	e7f9      	b.n	800496c <memset+0x4>

08004978 <__errno>:
 8004978:	4b01      	ldr	r3, [pc, #4]	@ (8004980 <__errno+0x8>)
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	4770      	bx	lr
 800497e:	46c0      	nop			@ (mov r8, r8)
 8004980:	20000014 	.word	0x20000014

08004984 <__libc_init_array>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	2600      	movs	r6, #0
 8004988:	4c0c      	ldr	r4, [pc, #48]	@ (80049bc <__libc_init_array+0x38>)
 800498a:	4d0d      	ldr	r5, [pc, #52]	@ (80049c0 <__libc_init_array+0x3c>)
 800498c:	1b64      	subs	r4, r4, r5
 800498e:	10a4      	asrs	r4, r4, #2
 8004990:	42a6      	cmp	r6, r4
 8004992:	d109      	bne.n	80049a8 <__libc_init_array+0x24>
 8004994:	2600      	movs	r6, #0
 8004996:	f000 fc63 	bl	8005260 <_init>
 800499a:	4c0a      	ldr	r4, [pc, #40]	@ (80049c4 <__libc_init_array+0x40>)
 800499c:	4d0a      	ldr	r5, [pc, #40]	@ (80049c8 <__libc_init_array+0x44>)
 800499e:	1b64      	subs	r4, r4, r5
 80049a0:	10a4      	asrs	r4, r4, #2
 80049a2:	42a6      	cmp	r6, r4
 80049a4:	d105      	bne.n	80049b2 <__libc_init_array+0x2e>
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
 80049a8:	00b3      	lsls	r3, r6, #2
 80049aa:	58eb      	ldr	r3, [r5, r3]
 80049ac:	4798      	blx	r3
 80049ae:	3601      	adds	r6, #1
 80049b0:	e7ee      	b.n	8004990 <__libc_init_array+0xc>
 80049b2:	00b3      	lsls	r3, r6, #2
 80049b4:	58eb      	ldr	r3, [r5, r3]
 80049b6:	4798      	blx	r3
 80049b8:	3601      	adds	r6, #1
 80049ba:	e7f2      	b.n	80049a2 <__libc_init_array+0x1e>
 80049bc:	08005ae8 	.word	0x08005ae8
 80049c0:	08005ae8 	.word	0x08005ae8
 80049c4:	08005aec 	.word	0x08005aec
 80049c8:	08005ae8 	.word	0x08005ae8

080049cc <__retarget_lock_acquire_recursive>:
 80049cc:	4770      	bx	lr

080049ce <__retarget_lock_release_recursive>:
 80049ce:	4770      	bx	lr

080049d0 <memcpy>:
 80049d0:	2300      	movs	r3, #0
 80049d2:	b510      	push	{r4, lr}
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d100      	bne.n	80049da <memcpy+0xa>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	5ccc      	ldrb	r4, [r1, r3]
 80049dc:	54c4      	strb	r4, [r0, r3]
 80049de:	3301      	adds	r3, #1
 80049e0:	e7f8      	b.n	80049d4 <memcpy+0x4>
	...

080049e4 <_free_r>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	0005      	movs	r5, r0
 80049e8:	1e0c      	subs	r4, r1, #0
 80049ea:	d010      	beq.n	8004a0e <_free_r+0x2a>
 80049ec:	3c04      	subs	r4, #4
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	da00      	bge.n	80049f6 <_free_r+0x12>
 80049f4:	18e4      	adds	r4, r4, r3
 80049f6:	0028      	movs	r0, r5
 80049f8:	f000 f8e0 	bl	8004bbc <__malloc_lock>
 80049fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <_free_r+0x90>)
 80049fe:	6813      	ldr	r3, [r2, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <_free_r+0x2c>
 8004a04:	6063      	str	r3, [r4, #4]
 8004a06:	6014      	str	r4, [r2, #0]
 8004a08:	0028      	movs	r0, r5
 8004a0a:	f000 f8df 	bl	8004bcc <__malloc_unlock>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	42a3      	cmp	r3, r4
 8004a12:	d908      	bls.n	8004a26 <_free_r+0x42>
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	1821      	adds	r1, r4, r0
 8004a18:	428b      	cmp	r3, r1
 8004a1a:	d1f3      	bne.n	8004a04 <_free_r+0x20>
 8004a1c:	6819      	ldr	r1, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	1809      	adds	r1, r1, r0
 8004a22:	6021      	str	r1, [r4, #0]
 8004a24:	e7ee      	b.n	8004a04 <_free_r+0x20>
 8004a26:	001a      	movs	r2, r3
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <_free_r+0x4e>
 8004a2e:	42a3      	cmp	r3, r4
 8004a30:	d9f9      	bls.n	8004a26 <_free_r+0x42>
 8004a32:	6811      	ldr	r1, [r2, #0]
 8004a34:	1850      	adds	r0, r2, r1
 8004a36:	42a0      	cmp	r0, r4
 8004a38:	d10b      	bne.n	8004a52 <_free_r+0x6e>
 8004a3a:	6820      	ldr	r0, [r4, #0]
 8004a3c:	1809      	adds	r1, r1, r0
 8004a3e:	1850      	adds	r0, r2, r1
 8004a40:	6011      	str	r1, [r2, #0]
 8004a42:	4283      	cmp	r3, r0
 8004a44:	d1e0      	bne.n	8004a08 <_free_r+0x24>
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	1841      	adds	r1, r0, r1
 8004a4c:	6011      	str	r1, [r2, #0]
 8004a4e:	6053      	str	r3, [r2, #4]
 8004a50:	e7da      	b.n	8004a08 <_free_r+0x24>
 8004a52:	42a0      	cmp	r0, r4
 8004a54:	d902      	bls.n	8004a5c <_free_r+0x78>
 8004a56:	230c      	movs	r3, #12
 8004a58:	602b      	str	r3, [r5, #0]
 8004a5a:	e7d5      	b.n	8004a08 <_free_r+0x24>
 8004a5c:	6820      	ldr	r0, [r4, #0]
 8004a5e:	1821      	adds	r1, r4, r0
 8004a60:	428b      	cmp	r3, r1
 8004a62:	d103      	bne.n	8004a6c <_free_r+0x88>
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	1809      	adds	r1, r1, r0
 8004a6a:	6021      	str	r1, [r4, #0]
 8004a6c:	6063      	str	r3, [r4, #4]
 8004a6e:	6054      	str	r4, [r2, #4]
 8004a70:	e7ca      	b.n	8004a08 <_free_r+0x24>
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	200004bc 	.word	0x200004bc

08004a78 <sbrk_aligned>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ab8 <sbrk_aligned+0x40>)
 8004a7c:	000d      	movs	r5, r1
 8004a7e:	6831      	ldr	r1, [r6, #0]
 8004a80:	0004      	movs	r4, r0
 8004a82:	2900      	cmp	r1, #0
 8004a84:	d102      	bne.n	8004a8c <sbrk_aligned+0x14>
 8004a86:	f000 fb95 	bl	80051b4 <_sbrk_r>
 8004a8a:	6030      	str	r0, [r6, #0]
 8004a8c:	0029      	movs	r1, r5
 8004a8e:	0020      	movs	r0, r4
 8004a90:	f000 fb90 	bl	80051b4 <_sbrk_r>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d103      	bne.n	8004aa0 <sbrk_aligned+0x28>
 8004a98:	2501      	movs	r5, #1
 8004a9a:	426d      	negs	r5, r5
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	1cc5      	adds	r5, r0, #3
 8004aa4:	439d      	bics	r5, r3
 8004aa6:	42a8      	cmp	r0, r5
 8004aa8:	d0f8      	beq.n	8004a9c <sbrk_aligned+0x24>
 8004aaa:	1a29      	subs	r1, r5, r0
 8004aac:	0020      	movs	r0, r4
 8004aae:	f000 fb81 	bl	80051b4 <_sbrk_r>
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d1f2      	bne.n	8004a9c <sbrk_aligned+0x24>
 8004ab6:	e7ef      	b.n	8004a98 <sbrk_aligned+0x20>
 8004ab8:	200004b8 	.word	0x200004b8

08004abc <_malloc_r>:
 8004abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004abe:	2203      	movs	r2, #3
 8004ac0:	1ccb      	adds	r3, r1, #3
 8004ac2:	4393      	bics	r3, r2
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	0005      	movs	r5, r0
 8004ac8:	001f      	movs	r7, r3
 8004aca:	2b0c      	cmp	r3, #12
 8004acc:	d234      	bcs.n	8004b38 <_malloc_r+0x7c>
 8004ace:	270c      	movs	r7, #12
 8004ad0:	42b9      	cmp	r1, r7
 8004ad2:	d833      	bhi.n	8004b3c <_malloc_r+0x80>
 8004ad4:	0028      	movs	r0, r5
 8004ad6:	f000 f871 	bl	8004bbc <__malloc_lock>
 8004ada:	4e37      	ldr	r6, [pc, #220]	@ (8004bb8 <_malloc_r+0xfc>)
 8004adc:	6833      	ldr	r3, [r6, #0]
 8004ade:	001c      	movs	r4, r3
 8004ae0:	2c00      	cmp	r4, #0
 8004ae2:	d12f      	bne.n	8004b44 <_malloc_r+0x88>
 8004ae4:	0039      	movs	r1, r7
 8004ae6:	0028      	movs	r0, r5
 8004ae8:	f7ff ffc6 	bl	8004a78 <sbrk_aligned>
 8004aec:	0004      	movs	r4, r0
 8004aee:	1c43      	adds	r3, r0, #1
 8004af0:	d15f      	bne.n	8004bb2 <_malloc_r+0xf6>
 8004af2:	6834      	ldr	r4, [r6, #0]
 8004af4:	9400      	str	r4, [sp, #0]
 8004af6:	9b00      	ldr	r3, [sp, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d14a      	bne.n	8004b92 <_malloc_r+0xd6>
 8004afc:	2c00      	cmp	r4, #0
 8004afe:	d052      	beq.n	8004ba6 <_malloc_r+0xea>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	0028      	movs	r0, r5
 8004b04:	18e3      	adds	r3, r4, r3
 8004b06:	9900      	ldr	r1, [sp, #0]
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	f000 fb53 	bl	80051b4 <_sbrk_r>
 8004b0e:	9b01      	ldr	r3, [sp, #4]
 8004b10:	4283      	cmp	r3, r0
 8004b12:	d148      	bne.n	8004ba6 <_malloc_r+0xea>
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	0028      	movs	r0, r5
 8004b18:	1aff      	subs	r7, r7, r3
 8004b1a:	0039      	movs	r1, r7
 8004b1c:	f7ff ffac 	bl	8004a78 <sbrk_aligned>
 8004b20:	3001      	adds	r0, #1
 8004b22:	d040      	beq.n	8004ba6 <_malloc_r+0xea>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	19db      	adds	r3, r3, r7
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	6833      	ldr	r3, [r6, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	2a00      	cmp	r2, #0
 8004b30:	d133      	bne.n	8004b9a <_malloc_r+0xde>
 8004b32:	9b00      	ldr	r3, [sp, #0]
 8004b34:	6033      	str	r3, [r6, #0]
 8004b36:	e019      	b.n	8004b6c <_malloc_r+0xb0>
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	dac9      	bge.n	8004ad0 <_malloc_r+0x14>
 8004b3c:	230c      	movs	r3, #12
 8004b3e:	602b      	str	r3, [r5, #0]
 8004b40:	2000      	movs	r0, #0
 8004b42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b44:	6821      	ldr	r1, [r4, #0]
 8004b46:	1bc9      	subs	r1, r1, r7
 8004b48:	d420      	bmi.n	8004b8c <_malloc_r+0xd0>
 8004b4a:	290b      	cmp	r1, #11
 8004b4c:	d90a      	bls.n	8004b64 <_malloc_r+0xa8>
 8004b4e:	19e2      	adds	r2, r4, r7
 8004b50:	6027      	str	r7, [r4, #0]
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	d104      	bne.n	8004b60 <_malloc_r+0xa4>
 8004b56:	6032      	str	r2, [r6, #0]
 8004b58:	6863      	ldr	r3, [r4, #4]
 8004b5a:	6011      	str	r1, [r2, #0]
 8004b5c:	6053      	str	r3, [r2, #4]
 8004b5e:	e005      	b.n	8004b6c <_malloc_r+0xb0>
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	e7f9      	b.n	8004b58 <_malloc_r+0x9c>
 8004b64:	6862      	ldr	r2, [r4, #4]
 8004b66:	42a3      	cmp	r3, r4
 8004b68:	d10e      	bne.n	8004b88 <_malloc_r+0xcc>
 8004b6a:	6032      	str	r2, [r6, #0]
 8004b6c:	0028      	movs	r0, r5
 8004b6e:	f000 f82d 	bl	8004bcc <__malloc_unlock>
 8004b72:	0020      	movs	r0, r4
 8004b74:	2207      	movs	r2, #7
 8004b76:	300b      	adds	r0, #11
 8004b78:	1d23      	adds	r3, r4, #4
 8004b7a:	4390      	bics	r0, r2
 8004b7c:	1ac2      	subs	r2, r0, r3
 8004b7e:	4298      	cmp	r0, r3
 8004b80:	d0df      	beq.n	8004b42 <_malloc_r+0x86>
 8004b82:	1a1b      	subs	r3, r3, r0
 8004b84:	50a3      	str	r3, [r4, r2]
 8004b86:	e7dc      	b.n	8004b42 <_malloc_r+0x86>
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	e7ef      	b.n	8004b6c <_malloc_r+0xb0>
 8004b8c:	0023      	movs	r3, r4
 8004b8e:	6864      	ldr	r4, [r4, #4]
 8004b90:	e7a6      	b.n	8004ae0 <_malloc_r+0x24>
 8004b92:	9c00      	ldr	r4, [sp, #0]
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	e7ad      	b.n	8004af6 <_malloc_r+0x3a>
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	42a3      	cmp	r3, r4
 8004ba0:	d1fb      	bne.n	8004b9a <_malloc_r+0xde>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e7da      	b.n	8004b5c <_malloc_r+0xa0>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	0028      	movs	r0, r5
 8004baa:	602b      	str	r3, [r5, #0]
 8004bac:	f000 f80e 	bl	8004bcc <__malloc_unlock>
 8004bb0:	e7c6      	b.n	8004b40 <_malloc_r+0x84>
 8004bb2:	6007      	str	r7, [r0, #0]
 8004bb4:	e7da      	b.n	8004b6c <_malloc_r+0xb0>
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	200004bc 	.word	0x200004bc

08004bbc <__malloc_lock>:
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	4802      	ldr	r0, [pc, #8]	@ (8004bc8 <__malloc_lock+0xc>)
 8004bc0:	f7ff ff04 	bl	80049cc <__retarget_lock_acquire_recursive>
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	200004b4 	.word	0x200004b4

08004bcc <__malloc_unlock>:
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4802      	ldr	r0, [pc, #8]	@ (8004bd8 <__malloc_unlock+0xc>)
 8004bd0:	f7ff fefd 	bl	80049ce <__retarget_lock_release_recursive>
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	200004b4 	.word	0x200004b4

08004bdc <__ssputs_r>:
 8004bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bde:	688e      	ldr	r6, [r1, #8]
 8004be0:	b085      	sub	sp, #20
 8004be2:	001f      	movs	r7, r3
 8004be4:	000c      	movs	r4, r1
 8004be6:	680b      	ldr	r3, [r1, #0]
 8004be8:	9002      	str	r0, [sp, #8]
 8004bea:	9203      	str	r2, [sp, #12]
 8004bec:	42be      	cmp	r6, r7
 8004bee:	d830      	bhi.n	8004c52 <__ssputs_r+0x76>
 8004bf0:	210c      	movs	r1, #12
 8004bf2:	5e62      	ldrsh	r2, [r4, r1]
 8004bf4:	2190      	movs	r1, #144	@ 0x90
 8004bf6:	00c9      	lsls	r1, r1, #3
 8004bf8:	420a      	tst	r2, r1
 8004bfa:	d028      	beq.n	8004c4e <__ssputs_r+0x72>
 8004bfc:	2003      	movs	r0, #3
 8004bfe:	6921      	ldr	r1, [r4, #16]
 8004c00:	1a5b      	subs	r3, r3, r1
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	6963      	ldr	r3, [r4, #20]
 8004c06:	4343      	muls	r3, r0
 8004c08:	9801      	ldr	r0, [sp, #4]
 8004c0a:	0fdd      	lsrs	r5, r3, #31
 8004c0c:	18ed      	adds	r5, r5, r3
 8004c0e:	1c7b      	adds	r3, r7, #1
 8004c10:	181b      	adds	r3, r3, r0
 8004c12:	106d      	asrs	r5, r5, #1
 8004c14:	42ab      	cmp	r3, r5
 8004c16:	d900      	bls.n	8004c1a <__ssputs_r+0x3e>
 8004c18:	001d      	movs	r5, r3
 8004c1a:	0552      	lsls	r2, r2, #21
 8004c1c:	d528      	bpl.n	8004c70 <__ssputs_r+0x94>
 8004c1e:	0029      	movs	r1, r5
 8004c20:	9802      	ldr	r0, [sp, #8]
 8004c22:	f7ff ff4b 	bl	8004abc <_malloc_r>
 8004c26:	1e06      	subs	r6, r0, #0
 8004c28:	d02c      	beq.n	8004c84 <__ssputs_r+0xa8>
 8004c2a:	9a01      	ldr	r2, [sp, #4]
 8004c2c:	6921      	ldr	r1, [r4, #16]
 8004c2e:	f7ff fecf 	bl	80049d0 <memcpy>
 8004c32:	89a2      	ldrh	r2, [r4, #12]
 8004c34:	4b18      	ldr	r3, [pc, #96]	@ (8004c98 <__ssputs_r+0xbc>)
 8004c36:	401a      	ands	r2, r3
 8004c38:	2380      	movs	r3, #128	@ 0x80
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	81a3      	strh	r3, [r4, #12]
 8004c3e:	9b01      	ldr	r3, [sp, #4]
 8004c40:	6126      	str	r6, [r4, #16]
 8004c42:	18f6      	adds	r6, r6, r3
 8004c44:	6026      	str	r6, [r4, #0]
 8004c46:	003e      	movs	r6, r7
 8004c48:	6165      	str	r5, [r4, #20]
 8004c4a:	1aed      	subs	r5, r5, r3
 8004c4c:	60a5      	str	r5, [r4, #8]
 8004c4e:	42be      	cmp	r6, r7
 8004c50:	d900      	bls.n	8004c54 <__ssputs_r+0x78>
 8004c52:	003e      	movs	r6, r7
 8004c54:	0032      	movs	r2, r6
 8004c56:	9903      	ldr	r1, [sp, #12]
 8004c58:	6820      	ldr	r0, [r4, #0]
 8004c5a:	f000 fa99 	bl	8005190 <memmove>
 8004c5e:	2000      	movs	r0, #0
 8004c60:	68a3      	ldr	r3, [r4, #8]
 8004c62:	1b9b      	subs	r3, r3, r6
 8004c64:	60a3      	str	r3, [r4, #8]
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	199b      	adds	r3, r3, r6
 8004c6a:	6023      	str	r3, [r4, #0]
 8004c6c:	b005      	add	sp, #20
 8004c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c70:	002a      	movs	r2, r5
 8004c72:	9802      	ldr	r0, [sp, #8]
 8004c74:	f000 fabb 	bl	80051ee <_realloc_r>
 8004c78:	1e06      	subs	r6, r0, #0
 8004c7a:	d1e0      	bne.n	8004c3e <__ssputs_r+0x62>
 8004c7c:	6921      	ldr	r1, [r4, #16]
 8004c7e:	9802      	ldr	r0, [sp, #8]
 8004c80:	f7ff feb0 	bl	80049e4 <_free_r>
 8004c84:	230c      	movs	r3, #12
 8004c86:	2001      	movs	r0, #1
 8004c88:	9a02      	ldr	r2, [sp, #8]
 8004c8a:	4240      	negs	r0, r0
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	89a2      	ldrh	r2, [r4, #12]
 8004c90:	3334      	adds	r3, #52	@ 0x34
 8004c92:	4313      	orrs	r3, r2
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	e7e9      	b.n	8004c6c <__ssputs_r+0x90>
 8004c98:	fffffb7f 	.word	0xfffffb7f

08004c9c <_svfiprintf_r>:
 8004c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9e:	b0a1      	sub	sp, #132	@ 0x84
 8004ca0:	9003      	str	r0, [sp, #12]
 8004ca2:	001d      	movs	r5, r3
 8004ca4:	898b      	ldrh	r3, [r1, #12]
 8004ca6:	000f      	movs	r7, r1
 8004ca8:	0016      	movs	r6, r2
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	d511      	bpl.n	8004cd2 <_svfiprintf_r+0x36>
 8004cae:	690b      	ldr	r3, [r1, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10e      	bne.n	8004cd2 <_svfiprintf_r+0x36>
 8004cb4:	2140      	movs	r1, #64	@ 0x40
 8004cb6:	f7ff ff01 	bl	8004abc <_malloc_r>
 8004cba:	6038      	str	r0, [r7, #0]
 8004cbc:	6138      	str	r0, [r7, #16]
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d105      	bne.n	8004cce <_svfiprintf_r+0x32>
 8004cc2:	230c      	movs	r3, #12
 8004cc4:	9a03      	ldr	r2, [sp, #12]
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	2001      	movs	r0, #1
 8004cca:	4240      	negs	r0, r0
 8004ccc:	e0cf      	b.n	8004e6e <_svfiprintf_r+0x1d2>
 8004cce:	2340      	movs	r3, #64	@ 0x40
 8004cd0:	617b      	str	r3, [r7, #20]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	ac08      	add	r4, sp, #32
 8004cd6:	6163      	str	r3, [r4, #20]
 8004cd8:	3320      	adds	r3, #32
 8004cda:	7663      	strb	r3, [r4, #25]
 8004cdc:	3310      	adds	r3, #16
 8004cde:	76a3      	strb	r3, [r4, #26]
 8004ce0:	9507      	str	r5, [sp, #28]
 8004ce2:	0035      	movs	r5, r6
 8004ce4:	782b      	ldrb	r3, [r5, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <_svfiprintf_r+0x52>
 8004cea:	2b25      	cmp	r3, #37	@ 0x25
 8004cec:	d148      	bne.n	8004d80 <_svfiprintf_r+0xe4>
 8004cee:	1bab      	subs	r3, r5, r6
 8004cf0:	9305      	str	r3, [sp, #20]
 8004cf2:	42b5      	cmp	r5, r6
 8004cf4:	d00b      	beq.n	8004d0e <_svfiprintf_r+0x72>
 8004cf6:	0032      	movs	r2, r6
 8004cf8:	0039      	movs	r1, r7
 8004cfa:	9803      	ldr	r0, [sp, #12]
 8004cfc:	f7ff ff6e 	bl	8004bdc <__ssputs_r>
 8004d00:	3001      	adds	r0, #1
 8004d02:	d100      	bne.n	8004d06 <_svfiprintf_r+0x6a>
 8004d04:	e0ae      	b.n	8004e64 <_svfiprintf_r+0x1c8>
 8004d06:	6963      	ldr	r3, [r4, #20]
 8004d08:	9a05      	ldr	r2, [sp, #20]
 8004d0a:	189b      	adds	r3, r3, r2
 8004d0c:	6163      	str	r3, [r4, #20]
 8004d0e:	782b      	ldrb	r3, [r5, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d100      	bne.n	8004d16 <_svfiprintf_r+0x7a>
 8004d14:	e0a6      	b.n	8004e64 <_svfiprintf_r+0x1c8>
 8004d16:	2201      	movs	r2, #1
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4252      	negs	r2, r2
 8004d1c:	6062      	str	r2, [r4, #4]
 8004d1e:	a904      	add	r1, sp, #16
 8004d20:	3254      	adds	r2, #84	@ 0x54
 8004d22:	1852      	adds	r2, r2, r1
 8004d24:	1c6e      	adds	r6, r5, #1
 8004d26:	6023      	str	r3, [r4, #0]
 8004d28:	60e3      	str	r3, [r4, #12]
 8004d2a:	60a3      	str	r3, [r4, #8]
 8004d2c:	7013      	strb	r3, [r2, #0]
 8004d2e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004d30:	4b54      	ldr	r3, [pc, #336]	@ (8004e84 <_svfiprintf_r+0x1e8>)
 8004d32:	2205      	movs	r2, #5
 8004d34:	0018      	movs	r0, r3
 8004d36:	7831      	ldrb	r1, [r6, #0]
 8004d38:	9305      	str	r3, [sp, #20]
 8004d3a:	f000 fa4d 	bl	80051d8 <memchr>
 8004d3e:	1c75      	adds	r5, r6, #1
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d11f      	bne.n	8004d84 <_svfiprintf_r+0xe8>
 8004d44:	6822      	ldr	r2, [r4, #0]
 8004d46:	06d3      	lsls	r3, r2, #27
 8004d48:	d504      	bpl.n	8004d54 <_svfiprintf_r+0xb8>
 8004d4a:	2353      	movs	r3, #83	@ 0x53
 8004d4c:	a904      	add	r1, sp, #16
 8004d4e:	185b      	adds	r3, r3, r1
 8004d50:	2120      	movs	r1, #32
 8004d52:	7019      	strb	r1, [r3, #0]
 8004d54:	0713      	lsls	r3, r2, #28
 8004d56:	d504      	bpl.n	8004d62 <_svfiprintf_r+0xc6>
 8004d58:	2353      	movs	r3, #83	@ 0x53
 8004d5a:	a904      	add	r1, sp, #16
 8004d5c:	185b      	adds	r3, r3, r1
 8004d5e:	212b      	movs	r1, #43	@ 0x2b
 8004d60:	7019      	strb	r1, [r3, #0]
 8004d62:	7833      	ldrb	r3, [r6, #0]
 8004d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d66:	d016      	beq.n	8004d96 <_svfiprintf_r+0xfa>
 8004d68:	0035      	movs	r5, r6
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	200a      	movs	r0, #10
 8004d6e:	68e3      	ldr	r3, [r4, #12]
 8004d70:	782a      	ldrb	r2, [r5, #0]
 8004d72:	1c6e      	adds	r6, r5, #1
 8004d74:	3a30      	subs	r2, #48	@ 0x30
 8004d76:	2a09      	cmp	r2, #9
 8004d78:	d950      	bls.n	8004e1c <_svfiprintf_r+0x180>
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d111      	bne.n	8004da2 <_svfiprintf_r+0x106>
 8004d7e:	e017      	b.n	8004db0 <_svfiprintf_r+0x114>
 8004d80:	3501      	adds	r5, #1
 8004d82:	e7af      	b.n	8004ce4 <_svfiprintf_r+0x48>
 8004d84:	9b05      	ldr	r3, [sp, #20]
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	1ac0      	subs	r0, r0, r3
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4083      	lsls	r3, r0
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	002e      	movs	r6, r5
 8004d92:	6023      	str	r3, [r4, #0]
 8004d94:	e7cc      	b.n	8004d30 <_svfiprintf_r+0x94>
 8004d96:	9b07      	ldr	r3, [sp, #28]
 8004d98:	1d19      	adds	r1, r3, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	9107      	str	r1, [sp, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	db01      	blt.n	8004da6 <_svfiprintf_r+0x10a>
 8004da2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004da4:	e004      	b.n	8004db0 <_svfiprintf_r+0x114>
 8004da6:	425b      	negs	r3, r3
 8004da8:	60e3      	str	r3, [r4, #12]
 8004daa:	2302      	movs	r3, #2
 8004dac:	4313      	orrs	r3, r2
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	782b      	ldrb	r3, [r5, #0]
 8004db2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004db4:	d10c      	bne.n	8004dd0 <_svfiprintf_r+0x134>
 8004db6:	786b      	ldrb	r3, [r5, #1]
 8004db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dba:	d134      	bne.n	8004e26 <_svfiprintf_r+0x18a>
 8004dbc:	9b07      	ldr	r3, [sp, #28]
 8004dbe:	3502      	adds	r5, #2
 8004dc0:	1d1a      	adds	r2, r3, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	9207      	str	r2, [sp, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da01      	bge.n	8004dce <_svfiprintf_r+0x132>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	425b      	negs	r3, r3
 8004dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dd0:	4e2d      	ldr	r6, [pc, #180]	@ (8004e88 <_svfiprintf_r+0x1ec>)
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	0030      	movs	r0, r6
 8004dd6:	7829      	ldrb	r1, [r5, #0]
 8004dd8:	f000 f9fe 	bl	80051d8 <memchr>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d006      	beq.n	8004dee <_svfiprintf_r+0x152>
 8004de0:	2340      	movs	r3, #64	@ 0x40
 8004de2:	1b80      	subs	r0, r0, r6
 8004de4:	4083      	lsls	r3, r0
 8004de6:	6822      	ldr	r2, [r4, #0]
 8004de8:	3501      	adds	r5, #1
 8004dea:	4313      	orrs	r3, r2
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	7829      	ldrb	r1, [r5, #0]
 8004df0:	2206      	movs	r2, #6
 8004df2:	4826      	ldr	r0, [pc, #152]	@ (8004e8c <_svfiprintf_r+0x1f0>)
 8004df4:	1c6e      	adds	r6, r5, #1
 8004df6:	7621      	strb	r1, [r4, #24]
 8004df8:	f000 f9ee 	bl	80051d8 <memchr>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d038      	beq.n	8004e72 <_svfiprintf_r+0x1d6>
 8004e00:	4b23      	ldr	r3, [pc, #140]	@ (8004e90 <_svfiprintf_r+0x1f4>)
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d122      	bne.n	8004e4c <_svfiprintf_r+0x1b0>
 8004e06:	2207      	movs	r2, #7
 8004e08:	9b07      	ldr	r3, [sp, #28]
 8004e0a:	3307      	adds	r3, #7
 8004e0c:	4393      	bics	r3, r2
 8004e0e:	3308      	adds	r3, #8
 8004e10:	9307      	str	r3, [sp, #28]
 8004e12:	6963      	ldr	r3, [r4, #20]
 8004e14:	9a04      	ldr	r2, [sp, #16]
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	6163      	str	r3, [r4, #20]
 8004e1a:	e762      	b.n	8004ce2 <_svfiprintf_r+0x46>
 8004e1c:	4343      	muls	r3, r0
 8004e1e:	0035      	movs	r5, r6
 8004e20:	2101      	movs	r1, #1
 8004e22:	189b      	adds	r3, r3, r2
 8004e24:	e7a4      	b.n	8004d70 <_svfiprintf_r+0xd4>
 8004e26:	2300      	movs	r3, #0
 8004e28:	200a      	movs	r0, #10
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	3501      	adds	r5, #1
 8004e2e:	6063      	str	r3, [r4, #4]
 8004e30:	782a      	ldrb	r2, [r5, #0]
 8004e32:	1c6e      	adds	r6, r5, #1
 8004e34:	3a30      	subs	r2, #48	@ 0x30
 8004e36:	2a09      	cmp	r2, #9
 8004e38:	d903      	bls.n	8004e42 <_svfiprintf_r+0x1a6>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0c8      	beq.n	8004dd0 <_svfiprintf_r+0x134>
 8004e3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e40:	e7c6      	b.n	8004dd0 <_svfiprintf_r+0x134>
 8004e42:	4341      	muls	r1, r0
 8004e44:	0035      	movs	r5, r6
 8004e46:	2301      	movs	r3, #1
 8004e48:	1889      	adds	r1, r1, r2
 8004e4a:	e7f1      	b.n	8004e30 <_svfiprintf_r+0x194>
 8004e4c:	aa07      	add	r2, sp, #28
 8004e4e:	9200      	str	r2, [sp, #0]
 8004e50:	0021      	movs	r1, r4
 8004e52:	003a      	movs	r2, r7
 8004e54:	4b0f      	ldr	r3, [pc, #60]	@ (8004e94 <_svfiprintf_r+0x1f8>)
 8004e56:	9803      	ldr	r0, [sp, #12]
 8004e58:	e000      	b.n	8004e5c <_svfiprintf_r+0x1c0>
 8004e5a:	bf00      	nop
 8004e5c:	9004      	str	r0, [sp, #16]
 8004e5e:	9b04      	ldr	r3, [sp, #16]
 8004e60:	3301      	adds	r3, #1
 8004e62:	d1d6      	bne.n	8004e12 <_svfiprintf_r+0x176>
 8004e64:	89bb      	ldrh	r3, [r7, #12]
 8004e66:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e68:	065b      	lsls	r3, r3, #25
 8004e6a:	d500      	bpl.n	8004e6e <_svfiprintf_r+0x1d2>
 8004e6c:	e72c      	b.n	8004cc8 <_svfiprintf_r+0x2c>
 8004e6e:	b021      	add	sp, #132	@ 0x84
 8004e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e72:	aa07      	add	r2, sp, #28
 8004e74:	9200      	str	r2, [sp, #0]
 8004e76:	0021      	movs	r1, r4
 8004e78:	003a      	movs	r2, r7
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <_svfiprintf_r+0x1f8>)
 8004e7c:	9803      	ldr	r0, [sp, #12]
 8004e7e:	f000 f87b 	bl	8004f78 <_printf_i>
 8004e82:	e7eb      	b.n	8004e5c <_svfiprintf_r+0x1c0>
 8004e84:	08005ab4 	.word	0x08005ab4
 8004e88:	08005aba 	.word	0x08005aba
 8004e8c:	08005abe 	.word	0x08005abe
 8004e90:	00000000 	.word	0x00000000
 8004e94:	08004bdd 	.word	0x08004bdd

08004e98 <_printf_common>:
 8004e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e9a:	0016      	movs	r6, r2
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	688a      	ldr	r2, [r1, #8]
 8004ea0:	690b      	ldr	r3, [r1, #16]
 8004ea2:	000c      	movs	r4, r1
 8004ea4:	9000      	str	r0, [sp, #0]
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	da00      	bge.n	8004eac <_printf_common+0x14>
 8004eaa:	0013      	movs	r3, r2
 8004eac:	0022      	movs	r2, r4
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	3243      	adds	r2, #67	@ 0x43
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d001      	beq.n	8004ebc <_printf_common+0x24>
 8004eb8:	3301      	adds	r3, #1
 8004eba:	6033      	str	r3, [r6, #0]
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	069b      	lsls	r3, r3, #26
 8004ec0:	d502      	bpl.n	8004ec8 <_printf_common+0x30>
 8004ec2:	6833      	ldr	r3, [r6, #0]
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	2306      	movs	r3, #6
 8004ecc:	0015      	movs	r5, r2
 8004ece:	401d      	ands	r5, r3
 8004ed0:	421a      	tst	r2, r3
 8004ed2:	d027      	beq.n	8004f24 <_printf_common+0x8c>
 8004ed4:	0023      	movs	r3, r4
 8004ed6:	3343      	adds	r3, #67	@ 0x43
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	1e5a      	subs	r2, r3, #1
 8004edc:	4193      	sbcs	r3, r2
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	0692      	lsls	r2, r2, #26
 8004ee2:	d430      	bmi.n	8004f46 <_printf_common+0xae>
 8004ee4:	0022      	movs	r2, r4
 8004ee6:	9901      	ldr	r1, [sp, #4]
 8004ee8:	9800      	ldr	r0, [sp, #0]
 8004eea:	9d08      	ldr	r5, [sp, #32]
 8004eec:	3243      	adds	r2, #67	@ 0x43
 8004eee:	47a8      	blx	r5
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d025      	beq.n	8004f40 <_printf_common+0xa8>
 8004ef4:	2206      	movs	r2, #6
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	2500      	movs	r5, #0
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d105      	bne.n	8004f0c <_printf_common+0x74>
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	68e5      	ldr	r5, [r4, #12]
 8004f04:	1aed      	subs	r5, r5, r3
 8004f06:	43eb      	mvns	r3, r5
 8004f08:	17db      	asrs	r3, r3, #31
 8004f0a:	401d      	ands	r5, r3
 8004f0c:	68a3      	ldr	r3, [r4, #8]
 8004f0e:	6922      	ldr	r2, [r4, #16]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	dd01      	ble.n	8004f18 <_printf_common+0x80>
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	18ed      	adds	r5, r5, r3
 8004f18:	2600      	movs	r6, #0
 8004f1a:	42b5      	cmp	r5, r6
 8004f1c:	d120      	bne.n	8004f60 <_printf_common+0xc8>
 8004f1e:	2000      	movs	r0, #0
 8004f20:	e010      	b.n	8004f44 <_printf_common+0xac>
 8004f22:	3501      	adds	r5, #1
 8004f24:	68e3      	ldr	r3, [r4, #12]
 8004f26:	6832      	ldr	r2, [r6, #0]
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	42ab      	cmp	r3, r5
 8004f2c:	ddd2      	ble.n	8004ed4 <_printf_common+0x3c>
 8004f2e:	0022      	movs	r2, r4
 8004f30:	2301      	movs	r3, #1
 8004f32:	9901      	ldr	r1, [sp, #4]
 8004f34:	9800      	ldr	r0, [sp, #0]
 8004f36:	9f08      	ldr	r7, [sp, #32]
 8004f38:	3219      	adds	r2, #25
 8004f3a:	47b8      	blx	r7
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d1f0      	bne.n	8004f22 <_printf_common+0x8a>
 8004f40:	2001      	movs	r0, #1
 8004f42:	4240      	negs	r0, r0
 8004f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f46:	2030      	movs	r0, #48	@ 0x30
 8004f48:	18e1      	adds	r1, r4, r3
 8004f4a:	3143      	adds	r1, #67	@ 0x43
 8004f4c:	7008      	strb	r0, [r1, #0]
 8004f4e:	0021      	movs	r1, r4
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	3145      	adds	r1, #69	@ 0x45
 8004f54:	7809      	ldrb	r1, [r1, #0]
 8004f56:	18a2      	adds	r2, r4, r2
 8004f58:	3243      	adds	r2, #67	@ 0x43
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	7011      	strb	r1, [r2, #0]
 8004f5e:	e7c1      	b.n	8004ee4 <_printf_common+0x4c>
 8004f60:	0022      	movs	r2, r4
 8004f62:	2301      	movs	r3, #1
 8004f64:	9901      	ldr	r1, [sp, #4]
 8004f66:	9800      	ldr	r0, [sp, #0]
 8004f68:	9f08      	ldr	r7, [sp, #32]
 8004f6a:	321a      	adds	r2, #26
 8004f6c:	47b8      	blx	r7
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d0e6      	beq.n	8004f40 <_printf_common+0xa8>
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7d1      	b.n	8004f1a <_printf_common+0x82>
	...

08004f78 <_printf_i>:
 8004f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f7a:	b08b      	sub	sp, #44	@ 0x2c
 8004f7c:	9206      	str	r2, [sp, #24]
 8004f7e:	000a      	movs	r2, r1
 8004f80:	3243      	adds	r2, #67	@ 0x43
 8004f82:	9307      	str	r3, [sp, #28]
 8004f84:	9005      	str	r0, [sp, #20]
 8004f86:	9203      	str	r2, [sp, #12]
 8004f88:	7e0a      	ldrb	r2, [r1, #24]
 8004f8a:	000c      	movs	r4, r1
 8004f8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f8e:	2a78      	cmp	r2, #120	@ 0x78
 8004f90:	d809      	bhi.n	8004fa6 <_printf_i+0x2e>
 8004f92:	2a62      	cmp	r2, #98	@ 0x62
 8004f94:	d80b      	bhi.n	8004fae <_printf_i+0x36>
 8004f96:	2a00      	cmp	r2, #0
 8004f98:	d100      	bne.n	8004f9c <_printf_i+0x24>
 8004f9a:	e0ba      	b.n	8005112 <_printf_i+0x19a>
 8004f9c:	497a      	ldr	r1, [pc, #488]	@ (8005188 <_printf_i+0x210>)
 8004f9e:	9104      	str	r1, [sp, #16]
 8004fa0:	2a58      	cmp	r2, #88	@ 0x58
 8004fa2:	d100      	bne.n	8004fa6 <_printf_i+0x2e>
 8004fa4:	e08e      	b.n	80050c4 <_printf_i+0x14c>
 8004fa6:	0025      	movs	r5, r4
 8004fa8:	3542      	adds	r5, #66	@ 0x42
 8004faa:	702a      	strb	r2, [r5, #0]
 8004fac:	e022      	b.n	8004ff4 <_printf_i+0x7c>
 8004fae:	0010      	movs	r0, r2
 8004fb0:	3863      	subs	r0, #99	@ 0x63
 8004fb2:	2815      	cmp	r0, #21
 8004fb4:	d8f7      	bhi.n	8004fa6 <_printf_i+0x2e>
 8004fb6:	f7fb f8a7 	bl	8000108 <__gnu_thumb1_case_shi>
 8004fba:	0016      	.short	0x0016
 8004fbc:	fff6001f 	.word	0xfff6001f
 8004fc0:	fff6fff6 	.word	0xfff6fff6
 8004fc4:	001ffff6 	.word	0x001ffff6
 8004fc8:	fff6fff6 	.word	0xfff6fff6
 8004fcc:	fff6fff6 	.word	0xfff6fff6
 8004fd0:	0036009f 	.word	0x0036009f
 8004fd4:	fff6007e 	.word	0xfff6007e
 8004fd8:	00b0fff6 	.word	0x00b0fff6
 8004fdc:	0036fff6 	.word	0x0036fff6
 8004fe0:	fff6fff6 	.word	0xfff6fff6
 8004fe4:	0082      	.short	0x0082
 8004fe6:	0025      	movs	r5, r4
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	3542      	adds	r5, #66	@ 0x42
 8004fec:	1d11      	adds	r1, r2, #4
 8004fee:	6019      	str	r1, [r3, #0]
 8004ff0:	6813      	ldr	r3, [r2, #0]
 8004ff2:	702b      	strb	r3, [r5, #0]
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e09e      	b.n	8005136 <_printf_i+0x1be>
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	6809      	ldr	r1, [r1, #0]
 8004ffc:	1d02      	adds	r2, r0, #4
 8004ffe:	060d      	lsls	r5, r1, #24
 8005000:	d50b      	bpl.n	800501a <_printf_i+0xa2>
 8005002:	6806      	ldr	r6, [r0, #0]
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	2e00      	cmp	r6, #0
 8005008:	da03      	bge.n	8005012 <_printf_i+0x9a>
 800500a:	232d      	movs	r3, #45	@ 0x2d
 800500c:	9a03      	ldr	r2, [sp, #12]
 800500e:	4276      	negs	r6, r6
 8005010:	7013      	strb	r3, [r2, #0]
 8005012:	4b5d      	ldr	r3, [pc, #372]	@ (8005188 <_printf_i+0x210>)
 8005014:	270a      	movs	r7, #10
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	e018      	b.n	800504c <_printf_i+0xd4>
 800501a:	6806      	ldr	r6, [r0, #0]
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	0649      	lsls	r1, r1, #25
 8005020:	d5f1      	bpl.n	8005006 <_printf_i+0x8e>
 8005022:	b236      	sxth	r6, r6
 8005024:	e7ef      	b.n	8005006 <_printf_i+0x8e>
 8005026:	6808      	ldr	r0, [r1, #0]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	c940      	ldmia	r1!, {r6}
 800502c:	0605      	lsls	r5, r0, #24
 800502e:	d402      	bmi.n	8005036 <_printf_i+0xbe>
 8005030:	0640      	lsls	r0, r0, #25
 8005032:	d500      	bpl.n	8005036 <_printf_i+0xbe>
 8005034:	b2b6      	uxth	r6, r6
 8005036:	6019      	str	r1, [r3, #0]
 8005038:	4b53      	ldr	r3, [pc, #332]	@ (8005188 <_printf_i+0x210>)
 800503a:	270a      	movs	r7, #10
 800503c:	9304      	str	r3, [sp, #16]
 800503e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005040:	d100      	bne.n	8005044 <_printf_i+0xcc>
 8005042:	3f02      	subs	r7, #2
 8005044:	0023      	movs	r3, r4
 8005046:	2200      	movs	r2, #0
 8005048:	3343      	adds	r3, #67	@ 0x43
 800504a:	701a      	strb	r2, [r3, #0]
 800504c:	6863      	ldr	r3, [r4, #4]
 800504e:	60a3      	str	r3, [r4, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	db06      	blt.n	8005062 <_printf_i+0xea>
 8005054:	2104      	movs	r1, #4
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	9d03      	ldr	r5, [sp, #12]
 800505a:	438a      	bics	r2, r1
 800505c:	6022      	str	r2, [r4, #0]
 800505e:	4333      	orrs	r3, r6
 8005060:	d00c      	beq.n	800507c <_printf_i+0x104>
 8005062:	9d03      	ldr	r5, [sp, #12]
 8005064:	0030      	movs	r0, r6
 8005066:	0039      	movs	r1, r7
 8005068:	f7fb f8de 	bl	8000228 <__aeabi_uidivmod>
 800506c:	9b04      	ldr	r3, [sp, #16]
 800506e:	3d01      	subs	r5, #1
 8005070:	5c5b      	ldrb	r3, [r3, r1]
 8005072:	702b      	strb	r3, [r5, #0]
 8005074:	0033      	movs	r3, r6
 8005076:	0006      	movs	r6, r0
 8005078:	429f      	cmp	r7, r3
 800507a:	d9f3      	bls.n	8005064 <_printf_i+0xec>
 800507c:	2f08      	cmp	r7, #8
 800507e:	d109      	bne.n	8005094 <_printf_i+0x11c>
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	07db      	lsls	r3, r3, #31
 8005084:	d506      	bpl.n	8005094 <_printf_i+0x11c>
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	429a      	cmp	r2, r3
 800508c:	dc02      	bgt.n	8005094 <_printf_i+0x11c>
 800508e:	2330      	movs	r3, #48	@ 0x30
 8005090:	3d01      	subs	r5, #1
 8005092:	702b      	strb	r3, [r5, #0]
 8005094:	9b03      	ldr	r3, [sp, #12]
 8005096:	1b5b      	subs	r3, r3, r5
 8005098:	6123      	str	r3, [r4, #16]
 800509a:	9b07      	ldr	r3, [sp, #28]
 800509c:	0021      	movs	r1, r4
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	9805      	ldr	r0, [sp, #20]
 80050a2:	9b06      	ldr	r3, [sp, #24]
 80050a4:	aa09      	add	r2, sp, #36	@ 0x24
 80050a6:	f7ff fef7 	bl	8004e98 <_printf_common>
 80050aa:	3001      	adds	r0, #1
 80050ac:	d148      	bne.n	8005140 <_printf_i+0x1c8>
 80050ae:	2001      	movs	r0, #1
 80050b0:	4240      	negs	r0, r0
 80050b2:	b00b      	add	sp, #44	@ 0x2c
 80050b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050b6:	2220      	movs	r2, #32
 80050b8:	6809      	ldr	r1, [r1, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	6022      	str	r2, [r4, #0]
 80050be:	2278      	movs	r2, #120	@ 0x78
 80050c0:	4932      	ldr	r1, [pc, #200]	@ (800518c <_printf_i+0x214>)
 80050c2:	9104      	str	r1, [sp, #16]
 80050c4:	0021      	movs	r1, r4
 80050c6:	3145      	adds	r1, #69	@ 0x45
 80050c8:	700a      	strb	r2, [r1, #0]
 80050ca:	6819      	ldr	r1, [r3, #0]
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	c940      	ldmia	r1!, {r6}
 80050d0:	0610      	lsls	r0, r2, #24
 80050d2:	d402      	bmi.n	80050da <_printf_i+0x162>
 80050d4:	0650      	lsls	r0, r2, #25
 80050d6:	d500      	bpl.n	80050da <_printf_i+0x162>
 80050d8:	b2b6      	uxth	r6, r6
 80050da:	6019      	str	r1, [r3, #0]
 80050dc:	07d3      	lsls	r3, r2, #31
 80050de:	d502      	bpl.n	80050e6 <_printf_i+0x16e>
 80050e0:	2320      	movs	r3, #32
 80050e2:	4313      	orrs	r3, r2
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	2e00      	cmp	r6, #0
 80050e8:	d001      	beq.n	80050ee <_printf_i+0x176>
 80050ea:	2710      	movs	r7, #16
 80050ec:	e7aa      	b.n	8005044 <_printf_i+0xcc>
 80050ee:	2220      	movs	r2, #32
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	4393      	bics	r3, r2
 80050f4:	6023      	str	r3, [r4, #0]
 80050f6:	e7f8      	b.n	80050ea <_printf_i+0x172>
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	680d      	ldr	r5, [r1, #0]
 80050fc:	1d10      	adds	r0, r2, #4
 80050fe:	6949      	ldr	r1, [r1, #20]
 8005100:	6018      	str	r0, [r3, #0]
 8005102:	6813      	ldr	r3, [r2, #0]
 8005104:	062e      	lsls	r6, r5, #24
 8005106:	d501      	bpl.n	800510c <_printf_i+0x194>
 8005108:	6019      	str	r1, [r3, #0]
 800510a:	e002      	b.n	8005112 <_printf_i+0x19a>
 800510c:	066d      	lsls	r5, r5, #25
 800510e:	d5fb      	bpl.n	8005108 <_printf_i+0x190>
 8005110:	8019      	strh	r1, [r3, #0]
 8005112:	2300      	movs	r3, #0
 8005114:	9d03      	ldr	r5, [sp, #12]
 8005116:	6123      	str	r3, [r4, #16]
 8005118:	e7bf      	b.n	800509a <_printf_i+0x122>
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	1d11      	adds	r1, r2, #4
 800511e:	6019      	str	r1, [r3, #0]
 8005120:	6815      	ldr	r5, [r2, #0]
 8005122:	2100      	movs	r1, #0
 8005124:	0028      	movs	r0, r5
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	f000 f856 	bl	80051d8 <memchr>
 800512c:	2800      	cmp	r0, #0
 800512e:	d001      	beq.n	8005134 <_printf_i+0x1bc>
 8005130:	1b40      	subs	r0, r0, r5
 8005132:	6060      	str	r0, [r4, #4]
 8005134:	6863      	ldr	r3, [r4, #4]
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	2300      	movs	r3, #0
 800513a:	9a03      	ldr	r2, [sp, #12]
 800513c:	7013      	strb	r3, [r2, #0]
 800513e:	e7ac      	b.n	800509a <_printf_i+0x122>
 8005140:	002a      	movs	r2, r5
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	9906      	ldr	r1, [sp, #24]
 8005146:	9805      	ldr	r0, [sp, #20]
 8005148:	9d07      	ldr	r5, [sp, #28]
 800514a:	47a8      	blx	r5
 800514c:	3001      	adds	r0, #1
 800514e:	d0ae      	beq.n	80050ae <_printf_i+0x136>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	079b      	lsls	r3, r3, #30
 8005154:	d415      	bmi.n	8005182 <_printf_i+0x20a>
 8005156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005158:	68e0      	ldr	r0, [r4, #12]
 800515a:	4298      	cmp	r0, r3
 800515c:	daa9      	bge.n	80050b2 <_printf_i+0x13a>
 800515e:	0018      	movs	r0, r3
 8005160:	e7a7      	b.n	80050b2 <_printf_i+0x13a>
 8005162:	0022      	movs	r2, r4
 8005164:	2301      	movs	r3, #1
 8005166:	9906      	ldr	r1, [sp, #24]
 8005168:	9805      	ldr	r0, [sp, #20]
 800516a:	9e07      	ldr	r6, [sp, #28]
 800516c:	3219      	adds	r2, #25
 800516e:	47b0      	blx	r6
 8005170:	3001      	adds	r0, #1
 8005172:	d09c      	beq.n	80050ae <_printf_i+0x136>
 8005174:	3501      	adds	r5, #1
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	42ab      	cmp	r3, r5
 800517e:	dcf0      	bgt.n	8005162 <_printf_i+0x1ea>
 8005180:	e7e9      	b.n	8005156 <_printf_i+0x1de>
 8005182:	2500      	movs	r5, #0
 8005184:	e7f7      	b.n	8005176 <_printf_i+0x1fe>
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	08005ac5 	.word	0x08005ac5
 800518c:	08005ad6 	.word	0x08005ad6

08005190 <memmove>:
 8005190:	b510      	push	{r4, lr}
 8005192:	4288      	cmp	r0, r1
 8005194:	d902      	bls.n	800519c <memmove+0xc>
 8005196:	188b      	adds	r3, r1, r2
 8005198:	4298      	cmp	r0, r3
 800519a:	d308      	bcc.n	80051ae <memmove+0x1e>
 800519c:	2300      	movs	r3, #0
 800519e:	429a      	cmp	r2, r3
 80051a0:	d007      	beq.n	80051b2 <memmove+0x22>
 80051a2:	5ccc      	ldrb	r4, [r1, r3]
 80051a4:	54c4      	strb	r4, [r0, r3]
 80051a6:	3301      	adds	r3, #1
 80051a8:	e7f9      	b.n	800519e <memmove+0xe>
 80051aa:	5c8b      	ldrb	r3, [r1, r2]
 80051ac:	5483      	strb	r3, [r0, r2]
 80051ae:	3a01      	subs	r2, #1
 80051b0:	d2fb      	bcs.n	80051aa <memmove+0x1a>
 80051b2:	bd10      	pop	{r4, pc}

080051b4 <_sbrk_r>:
 80051b4:	2300      	movs	r3, #0
 80051b6:	b570      	push	{r4, r5, r6, lr}
 80051b8:	4d06      	ldr	r5, [pc, #24]	@ (80051d4 <_sbrk_r+0x20>)
 80051ba:	0004      	movs	r4, r0
 80051bc:	0008      	movs	r0, r1
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	f7fc fb1a 	bl	80017f8 <_sbrk>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d103      	bne.n	80051d0 <_sbrk_r+0x1c>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d000      	beq.n	80051d0 <_sbrk_r+0x1c>
 80051ce:	6023      	str	r3, [r4, #0]
 80051d0:	bd70      	pop	{r4, r5, r6, pc}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	200004b0 	.word	0x200004b0

080051d8 <memchr>:
 80051d8:	b2c9      	uxtb	r1, r1
 80051da:	1882      	adds	r2, r0, r2
 80051dc:	4290      	cmp	r0, r2
 80051de:	d101      	bne.n	80051e4 <memchr+0xc>
 80051e0:	2000      	movs	r0, #0
 80051e2:	4770      	bx	lr
 80051e4:	7803      	ldrb	r3, [r0, #0]
 80051e6:	428b      	cmp	r3, r1
 80051e8:	d0fb      	beq.n	80051e2 <memchr+0xa>
 80051ea:	3001      	adds	r0, #1
 80051ec:	e7f6      	b.n	80051dc <memchr+0x4>

080051ee <_realloc_r>:
 80051ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051f0:	0006      	movs	r6, r0
 80051f2:	000c      	movs	r4, r1
 80051f4:	0015      	movs	r5, r2
 80051f6:	2900      	cmp	r1, #0
 80051f8:	d105      	bne.n	8005206 <_realloc_r+0x18>
 80051fa:	0011      	movs	r1, r2
 80051fc:	f7ff fc5e 	bl	8004abc <_malloc_r>
 8005200:	0004      	movs	r4, r0
 8005202:	0020      	movs	r0, r4
 8005204:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005206:	2a00      	cmp	r2, #0
 8005208:	d103      	bne.n	8005212 <_realloc_r+0x24>
 800520a:	f7ff fbeb 	bl	80049e4 <_free_r>
 800520e:	002c      	movs	r4, r5
 8005210:	e7f7      	b.n	8005202 <_realloc_r+0x14>
 8005212:	f000 f81c 	bl	800524e <_malloc_usable_size_r>
 8005216:	0007      	movs	r7, r0
 8005218:	4285      	cmp	r5, r0
 800521a:	d802      	bhi.n	8005222 <_realloc_r+0x34>
 800521c:	0843      	lsrs	r3, r0, #1
 800521e:	42ab      	cmp	r3, r5
 8005220:	d3ef      	bcc.n	8005202 <_realloc_r+0x14>
 8005222:	0029      	movs	r1, r5
 8005224:	0030      	movs	r0, r6
 8005226:	f7ff fc49 	bl	8004abc <_malloc_r>
 800522a:	9001      	str	r0, [sp, #4]
 800522c:	2800      	cmp	r0, #0
 800522e:	d101      	bne.n	8005234 <_realloc_r+0x46>
 8005230:	9c01      	ldr	r4, [sp, #4]
 8005232:	e7e6      	b.n	8005202 <_realloc_r+0x14>
 8005234:	002a      	movs	r2, r5
 8005236:	42bd      	cmp	r5, r7
 8005238:	d900      	bls.n	800523c <_realloc_r+0x4e>
 800523a:	003a      	movs	r2, r7
 800523c:	0021      	movs	r1, r4
 800523e:	9801      	ldr	r0, [sp, #4]
 8005240:	f7ff fbc6 	bl	80049d0 <memcpy>
 8005244:	0021      	movs	r1, r4
 8005246:	0030      	movs	r0, r6
 8005248:	f7ff fbcc 	bl	80049e4 <_free_r>
 800524c:	e7f0      	b.n	8005230 <_realloc_r+0x42>

0800524e <_malloc_usable_size_r>:
 800524e:	1f0b      	subs	r3, r1, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	1f18      	subs	r0, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	da01      	bge.n	800525c <_malloc_usable_size_r+0xe>
 8005258:	580b      	ldr	r3, [r1, r0]
 800525a:	18c0      	adds	r0, r0, r3
 800525c:	4770      	bx	lr
	...

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	46c0      	nop			@ (mov r8, r8)
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
